<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PHP对接telegram</title>
    <url>/2024-12-01-2024/12/2024-12-01-php%E5%AF%B9%E6%8E%A5telegram/index.html</url>
    <content><![CDATA[<ul>
<li><p>前言我使用的是 larvel 框架，找了一个组件直接使用的。不过，如果自己写原生的对接，其实也很简单<br>  本文我假设我的机器人名字是 <code>abc_bot</code></p>
</li>
<li><p>推荐阅读 <a href="https://links.jianshu.com/go?to=https://core.telegram.org/bots">https://core.telegram.org/bots</a></p>
</li>
<li><p>组件安装和使用<br>  <a href="https://links.jianshu.com/go?to=https://telegram-bot-sdk.readme.io/docs">https://telegram-bot-sdk.readme.io/docs</a><br>  组件的安装和使用，在上面的手册写的很详细，不再复述，API文档可手册是这个<a href="https://links.jianshu.com/go?to=https://telegram-bot-sdk.readme.io/reference">https://telegram-bot-sdk.readme.io/reference</a>。下面说明几个常用的操作</p>
</li>
</ul>
<h2 id="1-创建机器人"><a href="#1-创建机器人" class="headerlink" title="1.创建机器人"></a>1.创建机器人</h2><p>使用浏览器访问 <a href="https://links.jianshu.com/go?to=https://t.me/botfather">https://t.me/botfather</a> 会自动跳转到 <code>BotFather</code> 的对话框。这个是管理你机器人的命令对话框。与它的对话都要以<code>/</code> 开头。有些指令。<code>/help</code>,可以看到所有的可用指令</p>
<ul>
<li>接收消息的设置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在 BotFather  对话框操作</span><br><span class="line">/setprivacy</span><br><span class="line">然后选择一个你的机器人，会弹出对话</span><br><span class="line">&#x27;Enable&#x27; - your bot will only receive messages that either start with the &#x27;/&#x27; symbol or mention the bot by username.</span><br><span class="line">&#x27;Disable&#x27; - your bot will receive all messages that people send to groups.</span><br><span class="line">Current status is: DISABLED</span><br><span class="line">选择 `Enable` 则在群消息中只有 `/abc_bot 消息`的时候，你才能看到消息</span><br><span class="line">选择 `Disable` 则可以看到群里的所有消息。</span><br></pre></td></tr></table></figure>

<h2 id="2-API-操作"><a href="#2-API-操作" class="headerlink" title="2. API 操作"></a>2. API 操作</h2><ul>
<li>2.1 获取所有的消息</li>
</ul>
<blockquote>
<p>注意，在执行这个操作的时候，不能有 <code>$telegram-&gt;setWebhook()</code>，因为如果执行过 <code>$telegram-&gt;setWebhook()</code>,新数据其实是会直接返回给你指定的 url 的。如果你有开启，则需要执行 <code>$telegram-&gt;removeWebhook()</code> 关闭<br>注意这个操作最多可以获取100条数据，但是有两个参数可以使用<br>offset–开始获取数据的id，这个对应的是 update_id<br>limit-获取数据的条数</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$key = config(&#x27;telegram.bot_token&#x27;);</span><br><span class="line"> return $this-&gt;get(&#x27;https://api.telegram.org/bot&#x27; . $key . &#x27;/getUpdates&#x27;);</span><br><span class="line">或者</span><br><span class="line">$telegram = new Api($key);</span><br><span class="line">return $telegram-&gt;getUpdates();</span><br></pre></td></tr></table></figure>

<p>获取到的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">message.message_id   - 消息ID，回复或者转发的时候可以用到</span><br><span class="line">message.from.id  - 发送消息的人的ID</span><br><span class="line">message.chat.id  - 所在群的ID，如果是个人发送给你的私信，则是个人ID  回复消息时候可以用到</span><br></pre></td></tr></table></figure>

<ul>
<li>2.2 发送消息的操作</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;telegram-&gt;sendMessage([</span><br><span class="line">    &#x27;chat_id&#x27; =&gt; $chat_id, // 接收消息的人或者群的id-- message.chat.id</span><br><span class="line">    &#x27;text&#x27; =&gt; $message, // 消息内容</span><br><span class="line">    &#x27;parse_mode&#x27; =&gt; &#x27;HTML&#x27;, // 格式，这个可以不要</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<ul>
<li>2.3 回复消息的操作</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;telegram-&gt;sendMessage([</span><br><span class="line">    &#x27;chat_id&#x27; =&gt; $chant_id, //  message.chat,id   这个id必须是消息发布的群，不然不能实现回复</span><br><span class="line">    &#x27;reply_to_message_id&#x27; =&gt; $reply_message_id, // message.message_id  聊天中的具体一个消息id</span><br><span class="line">    &#x27;text&#x27; =&gt; $text, //  回复内容</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<ul>
<li>2.4 开启网站自动接收消息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网站必须是 https，路由随便你配置，只要跟你网站的匹配即可</span><br><span class="line">$telegram-&gt;setWebhook([&#x27;url&#x27; =&gt; &#x27;https://xxx.com/telegram/webhook&#x27;]); </span><br><span class="line">在开启网站自动接收消息后，执行 $telegram-&gt;getUpdates(); 是无效的</span><br><span class="line"></span><br><span class="line">然后机器人做在的群，每次有人发消息，都会 post  推送到 `https://xxx.com/telegram/webhook`,你可以做相应的处理</span><br><span class="line">接收的文字是 message.text</span><br><span class="line">如果是图片加文字，则是  message.caption </span><br></pre></td></tr></table></figure>

<ul>
<li>2.5 关闭网站自动接收消息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网站必须是 https，路由随便你配置，只要跟你网站的匹配即可</span><br><span class="line">$telegram-&gt;removeWebhook(); </span><br></pre></td></tr></table></figure>

<h2 id="纸飞机安装"><a href="#纸飞机安装" class="headerlink" title="纸飞机安装"></a>纸飞机安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 安装组件</span><br><span class="line">composer require irazasyed/telegram-bot-sdk ^2.0</span><br><span class="line">2. 添加路由</span><br><span class="line"></span><br><span class="line">2.1 &#x27;createWebHook&#x27; =&gt; [&#x27;web/telegramController/createWebHook&#x27;, [&#x27;method&#x27; =&gt; &#x27;get&#x27;]],//创建群对话</span><br><span class="line">2.2 &#x27;removeWebHook&#x27; =&gt; [&#x27;web/telegramController/removeWebHook&#x27;, [&#x27;method&#x27; =&gt; &#x27;get&#x27;]],//删除群对话</span><br><span class="line">2.3 &#x27;listenWebHook&#x27; =&gt; [&#x27;web/telegramController/listenWebHook&#x27;, [&#x27;method&#x27; =&gt; &#x27;post&#x27;]],</span><br><span class="line">2.1 是创建对话的，告诉飞机官网，我要用 2.3 这个路由接收飞机的返回消息</span><br><span class="line">2.2 基本用不到，是删除对话的，告诉纸飞机  我不再接收飞机推送的消息了</span><br><span class="line">2.3 的路由 必须是 https </span><br><span class="line">参考文档  </span><br><span class="line">https://telegram-bot-sdk.readme.io/docs</span><br><span class="line"></span><br><span class="line">3. 创建机器人</span><br><span class="line">3.1/help</span><br><span class="line">3.2 /newbot</span><br><span class="line">3.3  名字+&#x27;_bot&#x27; 结尾  比如 &#x27;aaa_bot&#x27;</span><br><span class="line">3.4  再次输入 3.3 的名字 &#x27;aaa_bot&#x27;</span><br><span class="line"></span><br><span class="line">这时候，生成的 token  是你需要的  </span><br><span class="line">3.5  设置，群消息任何一条都接收通知</span><br><span class="line">/setprivacy   </span><br><span class="line">然后选中你的机器人</span><br><span class="line">然后选择  DISABLED</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace app\web\controller;</span><br><span class="line"></span><br><span class="line">use app\model\Member;</span><br><span class="line">use think\Controller;</span><br><span class="line">use Telegram\Bot\Api;</span><br><span class="line">use think\Db;</span><br><span class="line">use think\Log;</span><br><span class="line">use app\utils\CacheUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TelegramController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    // 机器人名字  mall_rebate1_bot</span><br><span class="line">    const TG_TOKEN = &#x27;xxxx&#x27;;</span><br><span class="line"></span><br><span class="line">    private $chat_id; //群ID</span><br><span class="line">    private $message_text;//群消息内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 错误代码</span><br><span class="line">     * @var int</span><br><span class="line">     */</span><br><span class="line">    protected $errorCode;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 错误信息</span><br><span class="line">     * @var string</span><br><span class="line">     */</span><br><span class="line">    protected $errorMessage = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回错误代码</span><br><span class="line">     * @return int</span><br><span class="line">     */</span><br><span class="line">    public function getErrorCode()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回错误信息</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public function getErrorMessage()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建对话</span><br><span class="line">     */</span><br><span class="line">    public function createWebHook()</span><br><span class="line">    &#123;</span><br><span class="line">        $telegram = new Api(self::TG_TOKEN);</span><br><span class="line">        return $telegram-&gt;setWebhook([&#x27;url&#x27; =&gt; &#x27;https://xxxx/listenWebHook&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 移除对话</span><br><span class="line">     */</span><br><span class="line">    public function removeWebHook()</span><br><span class="line">    &#123;</span><br><span class="line">        $telegram = new Api(self::TG_TOKEN);</span><br><span class="line">        return $telegram-&gt;removeWebhook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 监听对话</span><br><span class="line">     */</span><br><span class="line">    public function listenWebHook()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        if (!$this-&gt;checkRequest()) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //  加彩金的方法</span><br><span class="line">        if (in_array($this-&gt;chat_id, [&#x27;-11&#x27;, &#x27;-22&#x27;])) &#123;</span><br><span class="line">            $response_text = $this-&gt;transferIn();</span><br><span class="line">            if ($response_text) &#123;</span><br><span class="line">                return $this-&gt;replayMessage($response_text);</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">//            return $this-&gt;replayMessage($this-&gt;chat_id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return false;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function transferIn()</span><br><span class="line">    &#123;</span><br><span class="line">        //  使用空格做区分</span><br><span class="line">        $arr = array_values(array_filter(explode(&quot; &quot;, $this-&gt;message_text)));</span><br><span class="line">        if (count($arr) != 2) &#123;</span><br><span class="line">            return &#x27;格式有误&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $username = $arr[0];</span><br><span class="line">        $userInfo = Member::getByUsername($username);</span><br><span class="line">        if (!$userInfo) &#123;</span><br><span class="line">            return &#x27;用户不存在&#x27; . $username;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       // 业务</span><br><span class="line"></span><br><span class="line">        return  &#x27;success&#x27;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 推送消息</span><br><span class="line">     * @param $result</span><br><span class="line">     * @return bool|\Telegram\Bot\Objects\Message</span><br><span class="line">     * @throws \Telegram\Bot\Exceptions\TelegramSDKException</span><br><span class="line">     */</span><br><span class="line">    private function replayMessage($result)</span><br><span class="line">    &#123;</span><br><span class="line">        $telegram = new Api(self::TG_TOKEN);</span><br><span class="line">        try &#123;</span><br><span class="line">            return $telegram-&gt;sendMessage([</span><br><span class="line">                &#x27;chat_id&#x27; =&gt; $this-&gt;chat_id, //  message.chat.id   这个id必须是消息发布的群，不然不能实现回复</span><br><span class="line">                &#x27;text&#x27; =&gt; $result, //  回复内容</span><br><span class="line">                &#x27;parse_mode&#x27; =&gt; &#x27;HTML&#x27;,</span><br><span class="line">            ]);</span><br><span class="line">        &#125; catch (\Exception $exception) &#123;</span><br><span class="line">            $this-&gt;errorCode = -1;</span><br><span class="line">            $this-&gt;errorMessage = $exception-&gt;getMessage(); // 一般来说都是 chat_id 有误</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检查请求消息</span><br><span class="line">     * @return bool</span><br><span class="line">     */</span><br><span class="line">    private function checkRequest()</span><br><span class="line">    &#123;</span><br><span class="line">        $info = file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line">        $request = [];</span><br><span class="line">        if (json_decode($info)) &#123;</span><br><span class="line">            $request = json_decode($info, 1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//        Log::info(&#x27;222 notify1 start data = &#x27; . json_encode($info));</span><br><span class="line"></span><br><span class="line">        // 1.检查数据格式  是否有 chat_id 和 caption</span><br><span class="line">        if (!isset($request[&#x27;message&#x27;][&#x27;chat&#x27;][&#x27;id&#x27;])) &#123;</span><br><span class="line">            $this-&gt;errorCode = -11;</span><br><span class="line">            $this-&gt;errorMessage = &#x27;chat id 不存在&#x27;;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!isset($request[&#x27;message&#x27;][&#x27;text&#x27;])) &#123;</span><br><span class="line">            $this-&gt;errorCode = -12;</span><br><span class="line">            $this-&gt;errorMessage = &#x27;text不存在&#x27;;</span><br><span class="line">            return false; // 这个不需要输出  不需要处理</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($request[&#x27;message&#x27;][&#x27;from&#x27;][&#x27;is_bot&#x27;] == true) &#123;</span><br><span class="line">            return true;//机器人发送的消息  不需要处理</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 群ID 也是chat_id</span><br><span class="line">        $this-&gt;chat_id = $request[&#x27;message&#x27;][&#x27;chat&#x27;][&#x27;id&#x27;];</span><br><span class="line">        $this-&gt;message_text = trim($request[&#x27;message&#x27;][&#x27;text&#x27;]); // 群消息</span><br><span class="line"></span><br><span class="line">        //  有中文  表示是聊天信息</span><br><span class="line">        preg_match(&#x27;/^(\p&#123;Han&#125;)/u&#x27;, $this-&gt;message_text, $result);</span><br><span class="line">        if ($result) &#123;</span><br><span class="line">            $this-&gt;errorCode = -3;</span><br><span class="line">            $this-&gt;errorMessage = &#x27;中文聊天，不需要处理&#x27;;</span><br><span class="line">            return false; // 这条消息不发送给飞机群 所以是 false</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="纸飞机安装-thinkphp-流程"><a href="#纸飞机安装-thinkphp-流程" class="headerlink" title="纸飞机安装 thinkphp 流程"></a>纸飞机安装 thinkphp 流程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 安装组件</span><br><span class="line">composer require irazasyed/telegram-bot-sdk ^2.0</span><br><span class="line">2. 添加路由</span><br><span class="line"></span><br><span class="line">2.1 &#x27;createWebHook&#x27; =&gt; [&#x27;web/telegramController/createWebHook&#x27;, [&#x27;method&#x27; =&gt; &#x27;get&#x27;]],//创建群对话</span><br><span class="line">2.2 &#x27;removeWebHook&#x27; =&gt; [&#x27;web/telegramController/removeWebHook&#x27;, [&#x27;method&#x27; =&gt; &#x27;get&#x27;]],//删除群对话</span><br><span class="line">2.3 &#x27;listenWebHook&#x27; =&gt; [&#x27;web/telegramController/listenWebHook&#x27;, [&#x27;method&#x27; =&gt; &#x27;post&#x27;]],</span><br><span class="line">2.1 是创建对话的，告诉飞机官网，我要用 2.3 这个路由接收飞机的返回消息</span><br><span class="line">2.2 基本用不到，是删除对话的，告诉纸飞机  我不再接收飞机推送的消息了</span><br><span class="line">2.3 的路由 必须是 https </span><br><span class="line">参考文档  </span><br><span class="line">https://telegram-bot-sdk.readme.io/docs</span><br><span class="line"></span><br><span class="line">3. 创建机器人</span><br><span class="line">3.1/help</span><br><span class="line">3.2 /newbot</span><br><span class="line">3.3  名字+&#x27;_bot&#x27; 结尾  比如 &#x27;aaa_bot&#x27;</span><br><span class="line">3.4  再次输入 3.3 的名字 &#x27;aaa_bot&#x27;</span><br><span class="line"></span><br><span class="line">这时候，生成的 token  是你需要的  </span><br><span class="line">3.5  设置，群消息任何一条都接收通知</span><br><span class="line">/setprivacy   </span><br><span class="line">然后选中你的机器人</span><br><span class="line">然后选择  DISABLED</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后编辑于 ：2022.03.29 17:57:48</p>
<p>作者：云龙789<br>链接：<a href="https://www.jianshu.com/p/66fa73e596cd">https://www.jianshu.com/p/66fa73e596cd</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>wenzhang</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>//posts/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello world!</title>
    <url>/2024-12-05-2024/12/2024-12-05-hello-world/index.html</url>
    <content><![CDATA[<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!</p>
]]></content>
  </entry>
  <entry>
    <title>求教navicat for mysql 如何设置重复内容不导入（插入）去重</title>
    <url>/2024-12-02-2024/12/2024-12-02-%E6%B1%82%E6%95%99navicat-for-mysql-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E9%87%8D%E5%A4%8D%E5%86%85%E5%AE%B9%E4%B8%8D%E5%AF%BC%E5%85%A5%EF%BC%88%E6%8F%92%E5%85%A5%EF%BC%89%E5%8E%BB%E9%87%8D/index.html</url>
    <content><![CDATA[<p>mysql的导入，没有在导入之前去重的设置；<br>建议方案：<br>1，全量导入，唯一索引去掉；<br>2，新增表结构自增id；<br>3，根据自增id删除重复数据；参考sql如下</p>
<p>删除重复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(DELETE a FROM `game_table` a</span><br><span class="line">JOIN (SELECT id FROM game_table GROUP BY TYPE HAVING COUNT(1) &gt; 1) b</span><br><span class="line">WHERE a.id = b.id;)</span><br><span class="line"></span><br><span class="line">DELETE a FROM `ce` a</span><br><span class="line">JOIN (SELECT	id FROM	ce GROUP BY	uuid , mesuid HAVING	count(1) &gt;1) b</span><br><span class="line">WHERE a.id = b.id;</span><br></pre></td></tr></table></figure>

<p>4，新增唯一索引;</p>
<p>创建全文索引，瞬间使用量超出一倍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE FULLTEXT INDEX text_fulltext ON messages(text) with parser ngram;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>yuanchuang</category>
      </categories>
  </entry>
  <entry>
    <title>可以通过CLI或Cloudflare控制面板执行这些任务D1数据库 hono</title>
    <url>/2024-12-05-2024/12/2024-12-05-%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87cli%E6%88%96cloudflare%E6%8E%A7%E5%88%B6%E9%9D%A2%E6%9D%BF%E6%89%A7%E8%A1%8C%E8%BF%99%E4%BA%9B%E4%BB%BB%E5%8A%A1d1%E6%95%B0%E6%8D%AE%E5%BA%93-hono/index.html</url>
    <content><![CDATA[<p>npm install hono</p>
<p>本指南指导您:</p>
<ul>
<li><p>使用Cloudflare的本机无服务器SQL数据库D1创建您的第一个数据库。</p>
</li>
<li><p>创建模式并通过命令行查询数据库。</p>
</li>
<li><p>连接一个<a href="https://developers.cloudflare.com/workers/">Cloudflare工作人员</a>到您的D1数据库以编程方式查询您的D1数据库。</p>
</li>
</ul>
<p>您可以通过CLI或Cloudflare控制面板执行这些任务。</p>
<p>备注</p>
<p>如果您已经有一个现有的Worker和一个现有的D1数据库，请按照本教程从<a href="https://developers.cloudflare.com/d1/get-started/#3-bind-your-worker-to-your-d1-database">3.将Worker绑定到D1数据库</a>。</p>
<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p><a href="https://developers.cloudflare.com/d1/get-started/#prerequisites"></a></p>
<ol>
<li><p>注册一个<a href="https://dash.cloudflare.com/sign-up/workers-and-pages">Cloudflare帐户↗</a>。</p>
</li>
<li><p>安装<a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"><code>Node.js</code>↗</a>。</p>
</li>
</ol>
<p>Node.js版本管理器</p>
<p><a href="https://volta.sh/"></a><a href="https://github.com/nvm-sh/nvm"></a><a href="https://developers.cloudflare.com/workers/wrangler/install-and-update/"></a></p>
<h2 id="1-创建一个工人"><a href="#1-创建一个工人" class="headerlink" title="1.创建一个工人"></a>1.创建一个工人</h2><p><a href="https://developers.cloudflare.com/d1/get-started/#1-create-a-worker"></a></p>
<p>创建一个新的Worker作为查询数据库的方法。</p>
<ul>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-951">CLI</a></p>
</li>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-952">仪表板</a></p>
</li>
</ul>
<ol>
<li><p>创建一个名为的新项目<code>d1-tutorial</code>通过运行:</p>
<ul>
<li><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-929">npm</a></li>
<li><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-930">纱线</a></li>
<li><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-931">pnpm</a></li>
</ul>
<p> 终端窗口<code>npm create cloudflare@latest -- d1-tutorial</code>对于 “设置”，请选择以下选项:</p>
<ul>
<li>用于_你想从什么开始？_,选择<code>Hello World example</code>。</li>
<li>用于_您要使用哪个模板？_,选择<code>Hello World Worker</code>。</li>
<li>用于_您想使用哪种语言？_,选择<code>TypeScript</code>。</li>
<li>用于_你想使用git进行版本控制吗？_,选择<code>Yes</code>。</li>
<li>用于_是否要部署应用程序？_,选择<code>No</code>(我们将在部署之前进行一些更改)。</li>
</ul>
<p> 这将创建一个新的<code>d1-tutorial</code>目录，如下图所示。</p>
<ul>
<li>目录d1-tutorial<ul>
<li>目录node_modules&#x2F;</li>
<li>目录试验&#x2F;</li>
<li>目录src<ul>
<li><strong>index.ts</strong></li>
</ul>
</li>
<li>package-lock.json</li>
<li>package.json</li>
<li>testconfig.json</li>
<li>vitest.config.mts</li>
<li>worker-configuration.d.ts</li>
<li><strong>牧马人.托姆</strong></li>
</ul>
</li>
</ul>
<p> 您的新<code>d1-tutorial</code>目录包括:</p>
<ul>
<li><p>A<code>&quot;Hello World&quot;</code> <a href="https://developers.cloudflare.com/workers/get-started/guide/#3-write-code">工人</a>在<code>index.ts</code>。</p>
</li>
<li><p>A<a href="https://developers.cloudflare.com/workers/wrangler/configuration/"><code>wrangler.toml</code></a>配置文件。<code>wrangler.toml</code>是你的<code>d1-tutorial</code>Worker访问您的D1数据库。</p>
</li>
</ul>
</li>
</ol>
<p>备注</p>
<p>如果您熟悉Cloudflare Workers，或者在持续集成 (CI) 环境中初始化项目，请通过设置<code>CI=true</code>作为运行时的环境变量<code>create cloudflare@latest</code>。</p>
<p>例如:<code>CI=true npm create cloudflare@latest d1-tutorial --type=simple --git --ts --deploy=false</code>创建一个基本的 “Hello World” 项目。</p>
<h2 id="2-创建数据库"><a href="#2-创建数据库" class="headerlink" title="2.创建数据库"></a>2.创建数据库</h2><p><a href="https://developers.cloudflare.com/d1/get-started/#2-create-a-database"></a></p>
<p>D1数据库在概念上类似于许多其他数据库: 数据库可以包含一个或多个表、查询这些表的能力以及可选的索引。D1使用熟悉的<a href="https://www.sqlite.org/lang.html">SQL查询语言↗</a>(由SQLite使用)。</p>
<p>创建第一个D1数据库:</p>
<ul>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-923">CLI</a></p>
</li>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-924">仪表板</a></p>
</li>
</ul>
<ol>
<li><p>更改为您刚刚为Workers项目创建的目录:终端窗口<code>cd d1-tutorial</code></p>
</li>
<li><p>运行以下<code>wrangler d1</code>命令并为您的数据库命名。在本教程中，数据库名为<code>prod-d1-tutorial</code>:终端窗口<code>npx wrangler d1 create prod-d1-tutorial``✅ Successfully created DB &#39;prod-d1-tutorial&#39;[[d1_databases]]binding = &quot;DB&quot; # available in your Worker on env.DBdatabase_name = &quot;prod-d1-tutorial&quot;database_id = &quot;&lt;unique-ID-for-your-database&gt;&quot;</code></p>
</li>
</ol>
<p>这将创建一个新的D1数据库并输出<a href="https://developers.cloudflare.com/workers/runtime-apis/bindings/">装订</a>下一步需要配置。</p>
<p>备注</p>
<p>的<code>wrangler</code>命令行界面是Cloudflare的工具，用于在终端中管理和部署Workers应用程序和D1数据库。它是在你使用的时候安装的<code>npm create cloudflare@latest</code>初始化您的新项目。</p>
<p>备注</p>
<p>作为参考，一个好的数据库名称:</p>
<ul>
<li><p>使用小于32个字符的ASCII字符组合，并使用破折号 (-) 代替空格。</p>
</li>
<li><p>描述用例和环境。例如，“staging-db-web” 或 “production-db-backend”。</p>
</li>
<li><p>仅描述数据库，并且不在代码中直接引用。</p>
</li>
</ul>
<h2 id="3-将Worker绑定到D1数据库"><a href="#3-将Worker绑定到D1数据库" class="headerlink" title="3.将Worker绑定到D1数据库"></a>3.将Worker绑定到D1数据库</h2><p><a href="https://developers.cloudflare.com/d1/get-started/#3-bind-your-worker-to-your-d1-database"></a></p>
<p>您必须为Worker创建绑定才能连接到D1数据库。<a href="https://developers.cloudflare.com/workers/runtime-apis/bindings/">绑定</a>允许您的工作人员访问Cloudflare开发人员平台上的资源 (如D1)。</p>
<p>要将D1数据库绑定到您的工作人员:</p>
<ul>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-949">CLI</a></p>
</li>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-950">仪表板</a></p>
</li>
</ul>
<p>您可以通过更新您的<code>wrangler.toml</code>文件。</p>
<ol>
<li><p>复制从获得的行<a href="https://developers.cloudflare.com/d1/get-started/#2-create-a-database">步骤2</a>从你的终端。</p>
</li>
<li><p>将它们添加到您的<code>wrangler.toml</code>文件。</p>
<ul>
<li><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-932">牧马人.托姆</a></li>
<li><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-933">牧马人.json</a></li>
</ul>
<p> <code>[[d1_databases]]binding = &quot;DB&quot; # available in your Worker on env.DBdatabase_name = &quot;prod-d1-tutorial&quot;database_id = &quot;&lt;unique-ID-for-your-database&gt;&quot;</code>具体而言:</p>
<ul>
<li><p>为设置的值 (字符串)<code>binding</code>是<strong>绑定名称</strong>,并用于在您的Worker中引用此数据库。在本教程中，将您的绑定命名为<code>DB</code>。</p>
</li>
<li><p>绑定名称必须为<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#variables">有效的JavaScript变量名↗</a>。例如，<code>binding = &quot;MY_DB&quot;</code>或<code>binding = &quot;productionDB&quot;</code>都将是绑定的有效名称。</p>
</li>
<li><p>您的绑定在您的工作人员中可用，位于<code>env.&lt;BINDING_NAME&gt;</code>和D1<a href="https://developers.cloudflare.com/d1/build-with-d1/d1-client-api/">客户端API</a>在此绑定上暴露。</p>
</li>
</ul>
</li>
</ol>
<p>备注</p>
<p>当您执行<code>wrangler d1 create</code>命令，则会自动安装客户端API包 (它实现D1 API和数据库类)。有关D1客户端API的详细信息，请参阅<a href="https://developers.cloudflare.com/d1/build-with-d1/d1-client-api/">D1客户端API</a>。</p>
<p>您还可以将D1数据库绑定到<a href="https://developers.cloudflare.com/pages/functions/">Pages函数</a>。有关更多信息，请参考<a href="https://developers.cloudflare.com/pages/functions/bindings/#d1-databases">D1的函数绑定</a>。</p>
<h2 id="4-对D1数据库运行查询"><a href="#4-对D1数据库运行查询" class="headerlink" title="4.对D1数据库运行查询"></a>4.对D1数据库运行查询</h2><p><a href="https://developers.cloudflare.com/d1/get-started/#4-run-a-query-against-your-d1-database"></a></p>
<h3 id="配置D1数据库"><a href="#配置D1数据库" class="headerlink" title="配置D1数据库"></a>配置D1数据库</h3><p><a href="https://developers.cloudflare.com/d1/get-started/#configure-your-d1-database"></a></p>
<ul>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-925">CLI</a></p>
</li>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-926">仪表板</a></p>
</li>
</ul>
<p>与<code>wrangler.toml</code>正确配置，设置您的数据库。使用示例<code>schema.sql</code>下面的文件来初始化您的数据库。</p>
<ol>
<li><p>复制以下代码并将其保存为<code>schema.sql</code>文件中的<code>d1-tutorial</code>您在步骤1中创建的工作目录:<code>DROP TABLE IF EXISTS Customers;CREATE TABLE IF NOT EXISTS Customers (CustomerId INTEGER PRIMARY KEY, CompanyName TEXT, ContactName TEXT);INSERT INTO Customers (CustomerID, CompanyName, ContactName) VALUES (1, &#39;Alfreds Futterkiste&#39;, &#39;Maria Anders&#39;), (4, &#39;Around the Horn&#39;, &#39;Thomas Hardy&#39;), (11, &#39;Bs Beverages&#39;, &#39;Victoria Ashworth&#39;), (13, &#39;Bs Beverages&#39;, &#39;Random Name&#39;);</code></p>
</li>
<li><p>初始化数据库以首先在本地运行和测试。通过运行以下命令引导您的新D1数据库:终端窗口<code>npx wrangler d1 execute prod-d1-tutorial --local --file=./schema.sql</code></p>
</li>
<li><p>通过运行来验证您的数据是否在数据库中:终端窗口<code>npx wrangler d1 execute prod-d1-tutorial --local --command=&quot;SELECT * FROM Customers&quot;``🌀 Mapping SQL input into an array of statements🌀 Executing on local database production-db-backend (5f092302-3fbd-4247-a873-bf1afc5150b) from .wrangler/state/v3/d1:┌────────────┬─────────────────────┬───────────────────┐│ CustomerId │ CompanyName │ ContactName │├────────────┼─────────────────────┼───────────────────┤│ 1 │ Alfreds Futterkiste │ Maria Anders │├────────────┼─────────────────────┼───────────────────┤│ 4 │ Around the Horn │ Thomas Hardy │├────────────┼─────────────────────┼───────────────────┤│ 11 │ Bs Beverages │ Victoria Ashworth │├────────────┼─────────────────────┼───────────────────┤│ 13 │ Bs Beverages │ Random Name │└────────────┴─────────────────────┴───────────────────┘</code></p>
</li>
</ol>
<h3 id="在Worker中编写查询"><a href="#在Worker中编写查询" class="headerlink" title="在Worker中编写查询"></a>在Worker中编写查询</h3><p><a href="https://developers.cloudflare.com/d1/get-started/#write-queries-within-your-worker"></a></p>
<p>设置数据库后，从Worker中运行SQL查询。</p>
<ul>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-963">CLI</a></p>
</li>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-964">仪表板</a></p>
</li>
</ul>
<ol>
<li><p>导航到您的<code>d1-tutorial</code>Worker并打开<code>index.ts</code>文件。的<code>index.ts</code>文件是您配置Worker与d1的交互的位置。</p>
</li>
<li><p>清除的内容<code>index.ts</code>。</p>
</li>
<li><p>将以下代码段粘贴到您的<code>index.ts</code>文件:</p>
<ul>
<li><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-957">JavaScript</a></li>
<li><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-958">TypeScript</a></li>
</ul>
<p> index.js<code>export default &#123; async fetch(request, env) &#123; const &#123; pathname &#125; = new URL(request.url); if (pathname === &quot;/api/beverages&quot;) &#123; // If you did not use `DB` as your binding name, change it here const &#123; results &#125; = await env.DB.prepare( &quot;SELECT * FROM Customers WHERE CompanyName = ?&quot;, ) .bind(&quot;Bs Beverages&quot;) .all(); return Response.json(results); &#125; return new Response( &quot;Call /api/beverages to see everyone who works at Bs Beverages&quot;, ); &#125;,&#125;;</code>在上面的代码中，您:</p>
<ol>
<li><p>在TypeScript代码中定义与D1数据库的绑定。此绑定与<code>binding</code>您在中设置的值<code>wrangler.toml</code>下<code>[[d1_databases]]</code>。</p>
</li>
<li><p>使用查询您的数据库<code>env.DB.prepare</code>发出一个<a href="https://developers.cloudflare.com/d1/build-with-d1/d1-client-api/">已准备的查询</a>带有占位符 (<code>?</code>在查询中)。</p>
</li>
<li><p>呼叫<code>bind()</code>安全可靠地将值绑定到该占位符。在实际应用程序中，您将允许用户定义<code>CompanyName</code>他们想列出结果。使用<code>bind()</code>防止用户对您的应用程序执行任意SQL (称为 “SQL注入”) 并删除或以其他方式修改您的数据库。</p>
</li>
<li><p>通过调用执行查询<code>all()</code>返回所有行 (如果查询返回none，则返回none)。</p>
</li>
<li><p>以JSON格式返回您的查询结果 (如果有)<code>Response.json(results)</code>。</p>
</li>
</ol>
</li>
</ol>
<p>配置工作线程后，您可以在全局部署之前在本地测试项目。</p>
<h2 id="5-部署数据库"><a href="#5-部署数据库" class="headerlink" title="5.部署数据库"></a>5.部署数据库</h2><p><a href="https://developers.cloudflare.com/d1/get-started/#5-deploy-your-database"></a></p>
<p>在Cloudflare的全球网络上部署数据库。</p>
<ul>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-927">CLI</a></p>
</li>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-928">仪表板</a></p>
</li>
</ul>
<p>要使用Wrangler将Worker部署到生产环境，您必须首先重复<a href="https://developers.cloudflare.com/d1/get-started/#configure-your-d1-database">数据库配置</a>替换后的步骤<code>--local</code>标志与<code>--remote</code>标记以提供要读取的工作人员数据。这将创建数据库表并将数据导入到数据库的生产版本中。</p>
<ol>
<li><p>引导您的数据库与<code>schema.sql</code>在步骤4中创建的文件:终端窗口<code>npx wrangler d1 execute prod-d1-tutorial --remote --file=./schema.sql</code></p>
</li>
<li><p>通过运行以下操作来验证数据是否处于生产状态:终端窗口<code>npx wrangler d1 execute prod-d1-tutorial --remote --command=&quot;SELECT * FROM Customers&quot;</code></p>
</li>
<li><p>部署您的工作人员以使您的项目可在Internet上访问。运行时间:终端窗口<code>npx wrangler deploy``Outputs: https://d1-tutorial.&lt;YOUR_SUBDOMAIN&gt;.workers.dev</code>您现在可以访问新创建的项目的URL来查询您的实时数据库。例如，如果新Worker的URL为<code>d1-tutorial.&lt;YOUR_SUBDOMAIN&gt;.workers.dev</code>,访问<code>https://d1-tutorial.&lt;YOUR_SUBDOMAIN&gt;.workers.dev/api/beverages</code>向您的工作人员发送直接查询您的实时数据库的请求。</p>
</li>
<li><p>测试数据库是否成功运行。添加<code>/api/beverages</code>到提供的牧马人URL。例如，<code>https://d1-tutorial.&lt;YOUR_SUBDOMAIN&gt;.workers.dev/api/beverages</code>。</p>
</li>
</ol>
<h2 id="6-可选-与牧马人本地开发"><a href="#6-可选-与牧马人本地开发" class="headerlink" title="6. (可选) 与牧马人本地开发"></a>6. (可选) 与牧马人本地开发</h2><p><a href="https://developers.cloudflare.com/d1/get-started/#6-optional-develop-locally-with-wrangler"></a></p>
<p>如果您将D1与Wrangler一起使用，则可以在本地测试数据库。在您的项目目录中:</p>
<ol>
<li><p>运行<code>wrangler dev</code>:终端窗口<code>npx wrangler dev</code>当你运行<code>wrangler dev</code>,牧马人提供了一个URL (很可能<code>localhost:8787</code>) 审查你的工人。</p>
</li>
<li><p>转到URL。页面显示<code>Call /api/beverages to see everyone who works at Bs Beverages</code>。</p>
</li>
<li><p>测试数据库是否成功运行。添加<code>/api/beverages</code>到提供的牧马人URL。例如，<code>localhost:8787/api/beverages</code>。</p>
</li>
</ol>
<p>如果成功，浏览器将显示您的数据。</p>
<p>备注</p>
<p>如果您使用Wrangler，则只能在本地开发。您无法通过Cloudflare仪表板进行本地开发。</p>
<h2 id="7-可选-删除您的数据库"><a href="#7-可选-删除您的数据库" class="headerlink" title="7. (可选) 删除您的数据库"></a>7. (可选) 删除您的数据库</h2><p><a href="https://developers.cloudflare.com/d1/get-started/#7-optional-delete-your-database"></a></p>
<p>删除数据库:</p>
<ul>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-919">CLI</a></p>
</li>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-920">仪表板</a></p>
</li>
</ul>
<p>运行时间:终端窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx wrangler d1 delete prod-d1-tutorial</span><br></pre></td></tr></table></figure>

<p>如果您想删除您的员工:</p>
<ul>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-921">CLI</a></p>
</li>
<li><p><a href="https://developers.cloudflare.com/d1/get-started/#tab-panel-922">仪表板</a></p>
</li>
</ul>
<p>运行时间:终端窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx wrangler delete d1-tutorial</span><br></pre></td></tr></table></figure>

<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p><a href="https://developers.cloudflare.com/d1/get-started/#summary"></a></p>
<p>在本教程中，您有:</p>
<ul>
<li><p>已创建D1数据库</p>
</li>
<li><p>创建了一个Worker来访问该数据库</p>
</li>
<li><p>在全球部署您的项目</p>
</li>
</ul>
<h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><p><a href="https://developers.cloudflare.com/d1/get-started/#next-steps"></a></p>
<p>如果您有任何功能请求或发现任何错误，请通过加入<a href="https://discord.cloudflare.com/">Discord上的Cloudflare开发人员社区↗</a>。</p>
<ul>
<li><p>请参阅支持<a href="https://developers.cloudflare.com/workers/wrangler/commands/#d1">D1的牧马人命令</a>。</p>
</li>
<li><p>学习如何使用<a href="https://developers.cloudflare.com/d1/worker-api/">D1 Worker绑定api</a>在您的Worker中，并从<a href="https://developers.cloudflare.com/d1/worker-api/#api-playground">API游乐场</a>。</p>
</li>
<li><p>探索<a href="https://developers.cloudflare.com/d1/reference/community-projects/">基于D1的社区项目</a>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>yuanchuang</category>
        <category>wenzhang</category>
      </categories>
  </entry>
  <entry>
    <title>如何在 Linux 命令行中运行 Python 脚本？</title>
    <url>/2024-12-03-2024/12/2024-12-03-%E5%A6%82%E4%BD%95%E5%9C%A8-linux-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E8%BF%90%E8%A1%8C-python-%E8%84%9A%E6%9C%AC%EF%BC%9F/index.html</url>
    <content><![CDATA[<p>Python 是一种高级编程语言，被广泛应用于数据科学、机器学习、Web 开发等领域。在 Linux 操作系统中，Python 是一个默认安装的解释器，用户可以通过命令行界面（CLI）来运行 Python 脚本。</p>
<p>在本文中，我们将详细介绍如何在 Linux 命令行中运行 Python 脚本。我们将讨论以下主题：</p>
<p>Python 解释器在 Linux 中的位置<br>创建 Python 脚本<br>运行 Python 脚本<br>添加参数和选项<br>将输出重定向到文件<br>常见问题和解决方法</p>
<p>Python 解释器在 Linux 中的位置<br>在 Linux 中，Python 解释器通常安装在 &#x2F;usr&#x2F;bin&#x2F;python 或 &#x2F;usr&#x2F;bin&#x2F;python3 目录下。如果您不确定 Python 解释器的位置，可以在命令行中运行以下命令：</p>
<p>which python<br>1<br>这将显示 Python 解释器的完整路径。如果您安装了多个版本的 Python 解释器，可以使用 python3 命令来指定使用 Python 3.x 版本的解释器。</p>
<p>创建 Python 脚本<br>创建 Python 脚本非常简单。在 Linux 命令行中，您可以使用任何文本编辑器来创建一个新的 Python 脚本文件。例如，使用 nano 命令来创建一个名为 hello.py 的 Python 脚本：</p>
<p>nano hello.py<br>1<br>这将打开 nano 编辑器，并在其中创建一个新文件 hello.py。您可以在该文件中编写 Python 代码。例如，以下是一个简单的 Python 脚本，它将打印一条消息：</p>
<p>print(“Hello, World!”)<br>1<br>‘<br>运行运行<br>在 nano 编辑器中，您可以使用快捷键 Ctrl + X 来保存并退出编辑器。当您按下该快捷键时，您将看到提示消息询问是否要保存文件。按下 Y 键即可保存文件。然后，您将被带回到命令行界面。</p>
<p>运行 Python 脚本<br>要在 Linux 命令行中运行 Python 脚本，您需要使用以下命令：</p>
<p>python hello.py<br>1<br>这将使用默认的 Python 解释器来执行 hello.py 文件中的代码，并在命令行界面上输出 “Hello, World!” 消息。如果您安装了多个版本的 Python 解释器，可以使用 python3 命令来指定使用 Python 3.x 版本的解释器。例如，要使用 Python 3.x 版本的解释器来运行脚本，请使用以下命令：</p>
<p>python3 hello.py<br>1<br>添加参数和选项<br>您可以在命令行中向 Python 脚本传递参数和选项。在 Python 脚本中，您可以使用sys.argv 对象来获取这些参数和选项。sys.argv 是一个包含命令行参数的列表，其中第一个元素是脚本的名称，后面的元素是传递给脚本的参数和选项。以下是一个简单的 Python 脚本，它将读取传递给它的参数，并将它们打印到命令行界面上：</p>
<p>import sys</p>
<p>for arg in sys.argv:<br>print(arg)<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>要向 Python 脚本传递参数，请在命令行中使用以下命令：</p>
<p>python script.py arg1 arg2 arg3<br>1<br>这将运行 script.py 文件，并将 arg1、arg2 和 arg3 作为参数传递给它。在 Python 脚本中，您可以使用 sys.argv 来访问这些参数。例如，使用以下命令来运行上面的 Python 脚本，并将 arg1、arg2 和 arg3 作为参数传递给它：</p>
<p>python script.py arg1 arg2 arg3<br>1<br>这将输出以下内容：</p>
<p>script.py<br>arg1<br>arg2<br>arg3<br>1<br>2<br>3<br>4<br>除了参数外，您还可以在命令行中使用选项来配置 Python 脚本的行为。例如，以下是一个 Python 脚本，它将读取传递给它的选项，并将它们打印到命令行界面上：</p>
<p>import argparse</p>
<p>parser &#x3D; argparse.ArgumentParser()<br>parser.add_argument(“–name”, help&#x3D;”your name”)<br>parser.add_argument(“–age”, help&#x3D;”your age”)</p>
<p>args &#x3D; parser.parse_args()</p>
<p>print(f”Your name is {args.name}”)<br>print(f”Your age is {args.age}”)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>‘<br>运行运行<br>在上面的脚本中，我们使用 argparse 模块来解析命令行选项。使用 add_argument 方法来定义需要接受的选项。在这个例子中，我们定义了两个选项：–name 和 –age。然后，我们使用 parse_args 方法来解析这些选项，并将它们保存在 args 对象中。最后，我们将使用 args 对象来访问选项的值，并将它们打印到命令行界面上。</p>
<p>要使用选项来运行 Python 脚本，请在命令行中使用以下命令：</p>
<p>python script.py –name Alice –age 30<br>1<br>这将运行 script.py 文件，并将 –name 和 –age 选项设置为 Alice 和 30。在 Python 脚本中，我们使用 argparse 模块来解析这些选项，并将它们打印到命令行界面上。</p>
<p>将输出重定向到文件<br>默认情况下，Python 脚本的输出将打印到命令行界面上。但是，有时您可能希望将输出保存到文件中。在 Linux 中，您可以使用输出重定向来实现这一点。</p>
<p>要将 Python脚本的输出重定向到文件，请在命令行中使用以下命令：</p>
<p>python script.py &gt; output.txt<br>1<br>这将运行 script.py 文件，并将输出重定向到 output.txt 文件中。在文件中，您将看到与命令行界面上相同的输出。</p>
<p>您还可以将输出附加到文件中，而不是覆盖它。要附加输出，请使用以下命令：</p>
<p>python script.py &gt;&gt; output.txt<br>1<br>这将运行 script.py 文件，并将输出附加到 output.txt 文件的末尾。</p>
<p>使用管道连接多个命令<br>在 Linux 中，您可以使用管道 | 将多个命令连接在一起。这将使每个命令的输出成为下一个命令的输入。</p>
<p>例如，假设您有一个 Python 脚本，它输出一系列数字，您希望对这些数字进行排序。您可以使用以下命令来实现这一点：</p>
<p>python script.py | sort<br>1<br>这将运行 script.py 文件，并将其输出发送到 sort 命令。sort 命令将读取 script.py 文件的输出，并将数字排序后将其输出到命令行界面上。</p>
<p>您还可以将多个命令连接在一起来执行复杂的操作。例如，以下命令将运行一个 Python 脚本，该脚本输出一些文本，然后将这些文本传递给 grep 命令，grep 命令将搜索包含特定单词的行：</p>
<p>python script.py | grep “keyword”<br>1<br>这将运行 script.py 文件，并将其输出发送到 grep 命令。grep 命令将搜索包含 “keyword” 的行，并将它们输出到命令行界面上。</p>
<p>使用 Python 脚本自动化任务<br>使用 Python 脚本在 Linux 命令行中运行程序可以自动化许多任务。例如，您可以使用 Python 脚本来：</p>
<p>自动化数据备份和恢复<br>自动更新软件包<br>自动管理文件系统<br>自动发送电子邮件或短信<br>自动化服务器管理任务，如日志清理和监控<br>这里是一个例子，演示了如何使用 Python 脚本自动化数据备份和恢复。</p>
<p>import os<br>import shutil<br>import tarfile</p>
<p>def backup(source, destination):<br>with tarfile.open(destination, “w:gz”) as tar:<br>tar.add(source)</p>
<p>def restore(source, destination):<br>with tarfile.open(source, “r:gz”) as tar:<br>tar.extractall(destination)</p>
<p>if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br># 备份数据<br>source &#x3D; “&#x2F;home&#x2F;user&#x2F;data”<br>destination &#x3D; “&#x2F;home&#x2F;user&#x2F;backup.tar.gz”<br>backup(source, destination)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复数据</span><br><span class="line">source = &quot;/home/user/backup.tar.gz&quot;</span><br><span class="line">destination = &quot;/home/user/data-restored&quot;</span><br><span class="line">restore(source, destination)</span><br></pre></td></tr></table></figure>

<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>这个 Python 脚本将一个目录压缩成一个 tar.gz 文件，并将其保存到备份目录中。它还提供了一个恢复函数，该函数将 tar.gz 文件解压缩到指定目录中。</p>
<p>您可以将此脚本添加到 crontab 文件中，以在每天或每周自动备份数据。要编辑 crontab 文件，请在命令行中输入：</p>
<p>crontab -e<br>1<br>然后添加以下行：</p>
<p>0 0 * * * &#x2F;usr&#x2F;bin&#x2F;python &#x2F;path&#x2F;to&#x2F;backup_script.py<br>1<br>这将每天午夜自动运行脚本，将数据备份到指定的目录中。</p>
<p>总结<br>————————————————</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://blog.csdn.net/Python84310366/article/details/130638465">https://blog.csdn.net/Python84310366/article/details/130638465</a></p>
]]></content>
  </entry>
  <entry>
    <title>hono Cloudflare Workers使用环境变量</title>
    <url>/2024-12-08-2024/12/2024-12-08-hono-cloudflare-workers%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/index.html</url>
    <content><![CDATA[<h1 id="适配器帮助程序​"><a href="#适配器帮助程序​" class="headerlink" title="适配器帮助程序​"></a>适配器帮助程序<a href="https://hono.dev/docs/helpers/adapter#adapter-helper">​</a></h1><p>Adapter Helper 提供了一种通过统一界面与各种平台交互的无缝方式。</p>
<h2 id="进口​"><a href="#进口​" class="headerlink" title="进口​"></a>进口<a href="https://hono.dev/docs/helpers/adapter#import">​</a></h2><p>茨</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Hono &#125; from &#x27;hono&#x27;</span><br><span class="line">import &#123; env, getRuntimeKey &#125; from &#x27;hono/adapter&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="env-​"><a href="#env-​" class="headerlink" title="env()​"></a><code>env()</code><a href="https://hono.dev/docs/helpers/adapter#env">​</a></h2><p>该函数有助于跨不同运行时检索环境变量，不仅限于 Cloudflare Workers’ Bindings。每个运行时的可检索值可能不同。<code>env()``env(c)</code></p>
<p>茨</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; env &#125; from &#x27;hono/adapter&#x27;</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/env&#x27;, (c) =&gt; &#123;</span><br><span class="line">  // NAME is process.env.NAME on Node.js or Bun</span><br><span class="line">  // NAME is the value written in `wrangler.toml` on Cloudflare NAME 与定义变量名一致，取完在赋值其他变量</span><br><span class="line">  const &#123; NAME &#125; = env&lt;&#123; NAME: string &#125;&gt;(c)</span><br><span class="line">  return c.text(NAME)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>支持的运行时、无服务器平台和云服务：</p>
<ul>
<li><p>Cloudflare 工人</p>
<ul>
<li><p><code>wrangler.toml</code></p>
</li>
<li><p>[vars]</p>
</li>
<li><p>MY_VARIABLE &#x3D; “production_value”</p>
</li>
</ul>
</li>
<li><p>德诺</p>
<ul>
<li><p><a href="https://docs.deno.com/runtime/manual/basics/env_variables"><code>Deno.env</code></a></p>
</li>
<li><p><code>.env</code>文件</p>
</li>
</ul>
</li>
<li><p>包子</p>
<ul>
<li><p><a href="https://bun.sh/guides/runtime/set-env"><code>Bun.env</code></a></p>
</li>
<li><p><code>process.env</code></p>
</li>
</ul>
</li>
<li><p>Node.js</p>
<ul>
<li><code>process.env</code></li>
</ul>
</li>
<li><p>Vercel 餐厅</p>
<ul>
<li><a href="https://vercel.com/docs/projects/environment-variables">Vercel 上的环境变量</a></li>
</ul>
</li>
<li><p>AWS Lambda</p>
<ul>
<li><a href="https://docs.aws.amazon.com/lambda/latest/dg/samples-blank.html#samples-blank-architecture">AWS Lambda 上的环境变量</a></li>
</ul>
</li>
<li><p>Lambda@Edge Lambda@Edge<a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/add-origin-custom-headers.html">不支持</a> Lambda 上的<br>  环境变量，您需要使用 <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-event-structure.html">Lamdba@Edge 事件</a>作为替代。</p>
</li>
<li><p>快速计算<br>  在 Fastly Compute 上，您可以使用 ConfigStore 来管理用户定义的数据。</p>
</li>
<li><p>Netlify<br>  在 Netlify 上，您可以使用 <a href="https://docs.netlify.com/site-deploys/overview/#deploy-contexts">Netlify 上下文</a>来管理用户定义的数据。</p>
</li>
</ul>
<h3 id="指定运行时​"><a href="#指定运行时​" class="headerlink" title="指定运行时​"></a>指定运行时<a href="https://hono.dev/docs/helpers/adapter#specify-the-runtime">​</a></h3><p>您可以通过将运行时键作为第二个参数传递来指定运行时以获取环境变量。</p>
<p>茨</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/env&#x27;, (c) =&gt; &#123;</span><br><span class="line">  const &#123; NAME &#125; = env&lt;&#123; NAME: string &#125;&gt;(c, &#x27;workerd&#x27;)</span><br><span class="line">  return c.text(NAME)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="getRuntimeKey-​"><a href="#getRuntimeKey-​" class="headerlink" title="getRuntimeKey()​"></a><code>getRuntimeKey()</code><a href="https://hono.dev/docs/helpers/adapter#getruntimekey">​</a></h2><p>该函数返回当前运行时的标识符。<code>getRuntimeKey()</code></p>
<p>茨</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/&#x27;, (c) =&gt; &#123;</span><br><span class="line">  if (getRuntimeKey() === &#x27;workerd&#x27;) &#123;</span><br><span class="line">    return c.text(&#x27;You are on Cloudflare&#x27;)</span><br><span class="line">  &#125; else if (getRuntimeKey() === &#x27;bun&#x27;) &#123;</span><br><span class="line">    return c.text(&#x27;You are on Bun&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="可用的-Runtimes-键​"><a href="#可用的-Runtimes-键​" class="headerlink" title="可用的 Runtimes 键​"></a>可用的 Runtimes 键<a href="https://hono.dev/docs/helpers/adapter#available-runtimes-keys">​</a></h3><p>以下是可用的运行时密钥，不可用的运行时密钥运行时可能受支持并标记为 ，其中一些受到 <a href="https://runtime-keys.proposal.wintercg.org/">WinterCG 的运行时密钥</a>的启发：<code>other</code></p>
<ul>
<li><p><code>workerd</code>- Cloudflare 工人</p>
</li>
<li><p><code>deno</code></p>
</li>
<li><p><code>bun</code></p>
</li>
<li><p><code>node</code></p>
</li>
<li><p><code>edge-light</code>- Vercel Edge 函数</p>
</li>
<li><p><code>fastly</code>- 快速计算</p>
</li>
<li><p><code>other</code>- 其他未知的运行时键</p>
</li>
</ul>
<p><a href="https://github.com/honojs/website/edit/main/docs/helpers/adapter.md">在 GitHub 上编辑此页</a></p>
]]></content>
      <categories>
        <category>yuanchuang</category>
        <category>wenzhang</category>
      </categories>
  </entry>
  <entry>
    <title>Hono.js 使用笔记</title>
    <url>/2024-12-04-2024/12/2024-12-04-hono-js-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/index.html</url>
    <content><![CDATA[<p>Hono.js 是目前比较流行的后端框架，支持所有 JS 运行时，使用简便，路由和中间件语法类似 express&#x2F;koa ，可很方便地结合 zod 进行参数校验，支持类似 tRPC 的前后端 RPC 同构能力。</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><a href="https://hono.dev/docs/getting-started/basic">https://hono.dev/docs/getting-started/basic</a></p>
<p>默认支持预设：</p>
<ul>
<li><p>aws-lambda</p>
</li>
<li><p>bun</p>
</li>
<li><p>cloudflare-pages</p>
</li>
<li><p>cloudflare-workers</p>
</li>
<li><p>deno</p>
</li>
<li><p>fastly</p>
</li>
<li><p>nextjs</p>
</li>
<li><p>nodejs</p>
</li>
<li><p>vercel</p>
</li>
</ul>
<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p>类似于 Express 的代码结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Hono &#125; from &#x27;hono&#x27;</span><br><span class="line"></span><br><span class="line">const app = new Hono()</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (c) =&gt; &#123;</span><br><span class="line">  return c.text(&#x27;Hello Hono!&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default app</span><br></pre></td></tr></table></figure>

<p>获取参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/hello/:test&#x27;,</span><br><span class="line">    (c) =&gt; &#123;</span><br><span class="line">        const test = c.req.param(&#x27;test&#x27;)</span><br><span class="line">        return c.json(&#123;</span><br><span class="line">            test</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>类似 KOA 的洋葱圈中间件模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.use(async (c, next) =&gt; &#123;</span><br><span class="line">  const start = Date.now()</span><br><span class="line">  await next()</span><br><span class="line">  const end = Date.now()</span><br><span class="line">  c.res.headers.set(&#x27;X-Response-Time&#x27;, `$&#123;end - start&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="结合-zod-参数校验"><a href="#结合-zod-参数校验" class="headerlink" title="结合 zod 参数校验"></a>结合 zod 参数校验</h2><p>安装依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -S zod @hono/zod-validator</span><br></pre></td></tr></table></figure>

<p>参数校验，支持param、query、json、header等，同时校验配置多个中间件即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.post(&#x27;/create/:postId&#x27;,</span><br><span class="line">    zValidator(&quot;json&quot;, z.object(&#123;</span><br><span class="line">        name: z.string(),</span><br><span class="line">        userId: z.number(),</span><br><span class="line">    &#125;)),</span><br><span class="line">    zValidator(&quot;param&quot;, z.object(&#123;</span><br><span class="line">        postId: z.number(),</span><br><span class="line">    &#125;)),</span><br><span class="line">    (c) =&gt; &#123;</span><br><span class="line">        const &#123; postId &#125; = c.req.valid(&quot;param&quot;)</span><br><span class="line">        const &#123; name, userId &#125; = c.req.valid(&quot;json&quot;)</span><br><span class="line">        return c.json(&#123;</span><br><span class="line">            name, userId, postId</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>原始内容转换后校验，如将 url 参数的 id 转换为 number</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/test/:id&#x27;, zValidator(&#x27;param&#x27;, z.object(&#123;</span><br><span class="line">  id: z.coerce.number()</span><br><span class="line">&#125;)), async c =&gt; &#123;</span><br><span class="line">  const &#123; id &#125; = c.req.valid(&#x27;param&#x27;);</span><br><span class="line">  console.log(typeof id, &#x27;id&#x27;);</span><br><span class="line">  return c.json(&#123; id &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="路由拆分"><a href="#路由拆分" class="headerlink" title="路由拆分"></a>路由拆分</h2><p>hono.js 不推荐使用 controller 的模式去拆分路由。</p>
<p>与 express 类似，支持拆分文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// books.ts</span><br><span class="line">import &#123; Hono &#125; from &#x27;hono&#x27;</span><br><span class="line"></span><br><span class="line">const app = new Hono()</span><br><span class="line">  .get(&#x27;/&#x27;, (c) =&gt; c.json(&#x27;list books&#x27;))</span><br><span class="line">  .post(&#x27;/&#x27;, (c) =&gt; c.json(&#x27;create a book&#x27;, 201))</span><br><span class="line">  .get(&#x27;/:id&#x27;, (c) =&gt; c.json(`get $&#123;c.req.param(&#x27;id&#x27;)&#125;`))</span><br><span class="line"></span><br><span class="line">export default app</span><br></pre></td></tr></table></figure>

<p>在入口文件中引用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.route(&#x27;/authors&#x27;, authors).route(&#x27;/books&#x27;, books)</span><br></pre></td></tr></table></figure>

<h2 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h2><p>可以在处理函数或中间件中抛出异常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throw new HTTPException(401, &#123; message: &quot;未登录&quot; &#125;)</span><br></pre></td></tr></table></figure>

<p>使用 onError 捕获：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.onError((err, c) =&gt; &#123;</span><br><span class="line">    if (err instanceof HTTPException) &#123;</span><br><span class="line">        return c.json(&#123; error: err.message &#125;, err.status)</span><br><span class="line">    &#125;</span><br><span class="line">    console.error(err)</span><br><span class="line">    return c.json(&#123; error: &#x27;服务器未知错误&#x27; &#125;, 500)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>hono.js 的 rpc 非常实用，一方面是类似于 express 这样标准的 rest api ，又可获取类似于 tPRC 的前后端同构能力。</p>
<p>在后端项目中导出类型，可通过 pnpm monorepo 在前后端项目间共享类型。如果使用 Next.js 这类前后端同构的框架，可直接获得对应的类型。</p>
<p>需注意，定义路由时要用链式结构连接所有路由，方便 ts 推导类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const app = new Hono().basePath(&#x27;/api&#x27;)</span><br><span class="line"></span><br><span class="line">const routes = app.route(&#x27;/authors&#x27;, authors).route(&#x27;/books&#x27;, books)</span><br><span class="line"></span><br><span class="line">export type AppType = typeof routes</span><br></pre></td></tr></table></figure>

<p>客户端项目中导入该类型，即可使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; hc &#125; from &quot;hono/client&quot;;</span><br><span class="line">import &#123; AppType &#125; from &quot;./server&quot;;</span><br><span class="line"></span><br><span class="line">const client = hc&lt;AppType&gt;(&#x27;http://localhost:8787/&#x27;)</span><br></pre></td></tr></table></figure>

<p>客户端使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const client = hc&lt;AppType&gt;(&#x27;http://localhost:8787/&#x27;)</span><br><span class="line"></span><br><span class="line">const res = await client.api.books.create[&#x27;:postId&#x27;].$post(&#123;</span><br><span class="line">    json: &#123;</span><br><span class="line">        name: &#x27;11&#x27;,</span><br><span class="line">        userId: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    param: &#123;</span><br><span class="line">        postId: &#x27;111&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const data = await res.json()</span><br></pre></td></tr></table></figure>

<p>客户端获取接口的入参和响应类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; InferResponseType, InferRequestType &#125; from &quot;hono&quot;;</span><br><span class="line"></span><br><span class="line">// 获取响应类型</span><br><span class="line">type LoginResponseType = InferResponseType&lt;typeof client.api.users.login.$post&gt;;</span><br><span class="line"></span><br><span class="line">// 获取请求参数类型</span><br><span class="line">type LoginRequestType = InferRequestType&lt;typeof client.api.users.login.$post&gt;;</span><br><span class="line">// 只读取请求参数类型中的 json 部分</span><br><span class="line">type LoginRequestBodyType = InferRequestType&lt;typeof client.api.users.login.$post&gt;[&quot;json&quot;];</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wenzhang</category>
      </categories>
  </entry>
  <entry>
    <title>SQLite 在SQLite3数据库中识别重复行并删除它们</title>
    <url>/2024-12-08-2024/12/2024-12-08-sqlite-%E5%9C%A8sqlite3%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E8%AF%86%E5%88%AB%E9%87%8D%E5%A4%8D%E8%A1%8C%E5%B9%B6%E5%88%A0%E9%99%A4%E5%AE%83%E4%BB%AC/index.html</url>
    <content><![CDATA[<h2 id="什么是重复行"><a href="#什么是重复行" class="headerlink" title="什么是重复行"></a>什么是重复行</h2><p>在数据库中，重复行是指包含多个相同数据的记录。这可能是由于数据输入错误、数据冗余、软件故障或其他原因造成的。重复行具有相同的主键或一组字段值，但可能包含其他字段值的差异。</p>
<h2 id="如何识别重复行"><a href="#如何识别重复行" class="headerlink" title="如何识别重复行"></a>如何识别重复行</h2><p>在SQLite中，我们可以使用SQL查询来识别重复的行。通常，我们会使用GROUP BY子句结合HAVING子句来识别具有重复值的行。</p>
<p>例如，假设我们有一个名为”employees”的表，其中包含以下列：id、name、age和salary。我们要识别具有相同姓名和年龄的员工。下面是一个示例查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM table_name WHERE id NOT IN ( SELECT MIN(id) FROM table_name  GROUP BY uuid , mesuid  HAVING count(1) &gt; 1 );</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>yuanchuang</category>
        <category>wenzhang</category>
      </categories>
      <tags>
        <tag>cloudflare-workers</tag>
        <tag>sqlite</tag>
        <tag>telegram-聊天记录搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLite 全文检索：快速高效的文本查询方案</title>
    <url>/2024-12-08-2024/12/2024-12-08-sqlite-%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%EF%BC%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E7%9A%84%E6%96%87%E6%9C%AC%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%A1%88/index.html</url>
    <content><![CDATA[<p>什么是全文检索？<br>全文检索是指对文本数据进行索引和查询的一种技术。与常规的 LIKE 查询不同，全文检索通过对文本建立倒排索引，可以更快地处理文本搜索，尤其在涉及大量数据时，性能优势尤为明显。</p>
<p>在 SQLite 中，使用 FTS5 模块可以轻松实现全文检索功能。该模块是一个虚拟表模块，允许你创建一个可以进行全文索引的表。</p>
<p>如何启用 FTS？<br>在 SQLite 中启用全文检索的前提是 SQLite 已经支持 FTS5（通常默认支持）。我们可以使用以下命令创建一个支持全文检索的表：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE VIRTUAL TABLE blog_posts_fts USING fts5(id, title, content);</span><br></pre></td></tr></table></figure>

<p>上述命令创建了一个名为 blog_posts_fts 的虚拟表，其中包含 id、title 和 content 三个字段，并为 title 和 content 字段建立了全文索引。</p>
<p>插入数据<br>由于 FTS 表是虚拟表，因此无法直接与普通表同步数据，需要手动将数据插入到 FTS 表中。示例代码如下：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO blog_posts_fts (id, title, content)</span><br><span class="line">SELECT id, title, content FROM blog_posts;</span><br></pre></td></tr></table></figure>

<p>这会将 blog_posts 表中的所有数据同步到 blog_posts_fts 表中，以供全文检索使用。  </p>
<p>执行全文检索<br>执行全文检索时，可以使用 MATCH 语法来查询文本内容。以下示例展示了如何搜索包含关键字 SQLite 的文章：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id, title, content</span><br><span class="line">FROM blog_posts_fts</span><br><span class="line">WHERE blog_posts_fts MATCH &#x27;SQLite&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这种方式可以在大量数据中快速找到与关键字匹配的结果。</p>
<h2 id="关联原始表与-FTS-表"><a href="#关联原始表与-FTS-表" class="headerlink" title="关联原始表与 FTS 表"></a>关联原始表与 FTS 表</h2><p>为了方便获取更多的元数据（如日期、作者等），我们可以通过 <code>id</code> 关联 <code>FTS 表</code>与原始的 <code>blog_posts 表</code>。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT bp.id, bp.title, bp.date, fts.content</span><br><span class="line">FROM blog_posts bp</span><br><span class="line">JOIN blog_posts_fts fts ON bp.id = fts.id</span><br><span class="line">WHERE fts MATCH &#x27;SQLite&#x27;</span><br><span class="line">ORDER BY bp.date DESC;</span><br></pre></td></tr></table></figure>

<p>这样，你就可以在检索的同时获取完整的博客信息，并按日期进行排序。</p>
<h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><p>当 <code>blog_posts 表</code>的数据发生变化时，需要同步更新到 <code>blog_posts_fts 表</code>。你可以手动更新，也可以使用触发器自动同步：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER after_blog_posts_insert</span><br><span class="line">AFTER INSERT ON blog_posts</span><br><span class="line">BEGIN</span><br><span class="line">   INSERT INTO blog_posts_fts (id, title, content)</span><br><span class="line">   VALUES (NEW.id, NEW.title, NEW.content);</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">CREATE TRIGGER after_blog_posts_update</span><br><span class="line">AFTER UPDATE ON blog_posts</span><br><span class="line">BEGIN</span><br><span class="line">   UPDATE blog_posts_fts</span><br><span class="line">   SET title = NEW.title, content = NEW.content</span><br><span class="line">   WHERE id = NEW.id;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">CREATE TRIGGER after_blog_posts_delete</span><br><span class="line">AFTER DELETE ON blog_posts</span><br><span class="line">BEGIN</span><br><span class="line">   DELETE FROM blog_posts_fts WHERE id = OLD.id;</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>触发器会确保 <code>FTS 表</code>自动更新，不需要手动同步。</p>
<h4 id="优化FTS虚拟表"><a href="#优化FTS虚拟表" class="headerlink" title="优化FTS虚拟表"></a><strong>优化FTS虚拟表</strong></h4><p>为了提高FTS虚拟表的性能和存储效率，可以定期对其进行优化。在SQLite中，可以使用<code>OPTIMIZE</code>命令优化FTS虚拟表。例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO articles(articles) VALUES(&#x27;optimize&#x27;);</span><br></pre></td></tr></table></figure>

<p><strong>删除原始FTS虚拟表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE old_articles;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>yuanchuang</category>
        <category>wenzhang</category>
      </categories>
      <tags>
        <tag>cloudflare-workers</tag>
        <tag>telegram-聊天记录搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>abby 使用私钥登录serv00</title>
    <url>/2024-11-13-2024/11/2024-11-13-abby-%E4%BD%BF%E7%94%A8%E7%A7%81%E9%92%A5%E7%99%BB%E5%BD%95serv00/index.html</url>
    <content><![CDATA[<p>运行ssh-keygen -t rsa -b 4096命令，根据指引，一路默认回车或y，创建一对公钥+私钥（id_rsa.pub和id_rsa），生成的这对密钥默认保存存在~&#x2F;.ssh&#x2F;</p>
<p>image image 1220×892 65.2 KB 运行scp <del>&#x2F;.ssh&#x2F;id_rsa.pub <a href="mailto:&#117;&#x73;&#x65;&#114;&#64;&#x73;&#55;&#x2e;&#x73;&#101;&#x72;&#x76;&#x30;&#x30;&#x2e;&#x63;&#111;&#x6d;">&#117;&#x73;&#x65;&#114;&#64;&#x73;&#55;&#x2e;&#x73;&#101;&#x72;&#x76;&#x30;&#x30;&#x2e;&#x63;&#111;&#x6d;</a>:</del>&#x2F;.ssh&#x2F;authorized_keys命令， 用scp 命令把公钥传到你的 serv00主机上，其中user记得改为邮件中的Login，稍后会提示你输入密码也就是邮件中的Password</p>
<p>image image 1134×166 17 KB Tabby中配置好密钥登录，私钥也是在本地的~&#x2F;.ssh 目录下</p>
<p>image image 1604×1372 196 KB 又可以用Tabby愉快一键登录了</p>
<p>image image 1720×1202 219 KB</p>
]]></content>
  </entry>
  <entry>
    <title>abby 使用私钥登录serv00</title>
    <url>/2024-11-13-2024/11/2024-11-13-abby-%E4%BD%BF%E7%94%A8%E7%A7%81%E9%92%A5%E7%99%BB%E5%BD%95serv00-2/index.html</url>
    <content><![CDATA[<p>fdfsf</p>
<ol>
<li><p>运行ssh-keygen -t rsa -b 4096命令，根据指引，一路默认回车或y，创建一对公钥+私钥（id_rsa.pub和id_rsa），生成的这对密钥默认保存存在~&#x2F;.ssh&#x2F;<br> <a href="https://linux.do/uploads/default/original/3X/7/b/7b883a51f1828ae2f48c785a4e9d153315f660e8.png"></a><a href="https://linux.do/uploads/default/original/3X/7/b/7b883a51f1828ae2f48c785a4e9d153315f660e8.png">image1220×892 65.2 KB</a></p>
</li>
<li><p>运行scp <del>&#x2F;.ssh&#x2F;id_rsa.pub <a href="mailto:user@s7.serv00.com">user@s7.serv00.com</a>:</del>&#x2F;.ssh&#x2F;authorized_keys命令， 用scp 命令把公钥传到你的 serv00主机上，其中user记得改为邮件中的Login，稍后会提示你输入密码也就是邮件中的Password<br> <a href="https://linux.do/uploads/default/original/3X/e/0/e0c12ee325ba0815a98e1ef8ea2cc231caf5d93e.png"></a><a href="https://linux.do/uploads/default/original/3X/e/0/e0c12ee325ba0815a98e1ef8ea2cc231caf5d93e.png">image1134×166 17 KB</a></p>
</li>
<li><p>Tabby中配置好密钥登录，私钥也是在本地的~&#x2F;.ssh 目录下<br> <a href="https://linux.do/uploads/default/original/3X/f/3/f3e71e89a41ba6fd22e3a0ab9de538a0c61e85ad.png"></a><a href="https://linux.do/uploads/default/original/3X/f/3/f3e71e89a41ba6fd22e3a0ab9de538a0c61e85ad.png">image1604×1372 196 KB</a></p>
</li>
<li><p>又可以用Tabby愉快一键登录了<br> <a href="https://linux.do/uploads/default/original/3X/3/d/3dad1ce111ab45934a2dc72f3954379a5f6c8825.png"></a><a href="https://linux.do/uploads/default/original/3X/3/d/3dad1ce111ab45934a2dc72f3954379a5f6c8825.png">image1720×1202 219 KB</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>世界，您好！</title>
    <url>/2024-11-13-2024/11/2024-11-13-hello-world-2/index.html</url>
    <content><![CDATA[<p>欢迎使用 WordPress。这是您的第一篇文章。编辑或删除它，然后开始写作吧！</p>
]]></content>
  </entry>
  <entry>
    <title>wordpress部署SSL（https）后提示网页重定向次数过多的解决方法</title>
    <url>/2024-11-13-2024/11/2024-11-13-wordpress%E9%83%A8%E7%BD%B2ssl%EF%BC%88https%EF%BC%89%E5%90%8E%E6%8F%90%E7%A4%BA%E7%BD%91%E9%A1%B5%E9%87%8D%E5%AE%9A%E5%90%91%E6%AC%A1%E6%95%B0%E8%BF%87%E5%A4%9A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9/index.html</url>
    <content><![CDATA[<p>遇到网页重定向次数过多一般是.htaccess里面的规则问题，简单来说就是A跳转B、B跳转A，这就产生了一个循环过程导致浏览器直接报错，通过修改.htaccess里面的规则就可以解决这个问题。</p>
<p><img src="/images/d6dc0b1fbc34f0d8d734ecf1c9b3d440.jpeg" alt="wordpress部署SSL（https）后提示网页重定向次数过多的解决方法"></p>
<p>如果是刚部署完SSL（https）后遇到这个问题的话就不能只考虑.htaccess的问题了，博主这个站点部署完SSL的时候就遇到这个问题，在.htaccess规则里面部署了HTTP跳转至HTTPS的规则后，打开网站浏览器就报错。</p>
<p>一开始博主以为是.htaccess规则的问题，就直接把设置好的301跳转规则删除了，虽然这样能解决问题，但是部署的HTTP跳转HTTPS就失效了，用HTTP检测工具检测出来的状态码就直接是200了。</p>
<p>后来博主就开始了疯狂的拾荒模式，把网上所有的教程都看了一遍并且记录下来，目的就是为了解决网页重定向次数过多的问题，并且同时还要部署HTTP跳转HTTPS的规则。</p>
<p>最终博主在网上看到了一篇文章，是关于虚拟主机部署SSL的一些问题，里面提到”$_SERVER[‘HTTPS’]”未启用，可能导致网站访问时出现循环，抱着试一试的态度就去操作了，最终还这真的就解决了网页重定向的问题，并且HTTP检测的状态码也是301。</p>
<h2 id="网页重定向次数过多解决方法"><a href="#网页重定向次数过多解决方法" class="headerlink" title="网页重定向次数过多解决方法"></a>网页重定向次数过多解决方法</h2><p>1、先申请SSL证书并完成SSL部署。</p>
<p>2、登录WordPress后台 – 设置 – 常规 – 将WordPress地址（URL）&#x2F;站点地址（URL） 地址修改为https格式。</p>
<p><img src="/images/2068c503f360025e12a213a9a66ea634.jpeg" alt="wordpress部署SSL（https）后提示网页重定向次数过多的解决方法"></p>
<p>3、修改wp-includes目录下的load.php或者functions.php文件，找到is_ssl对应的函数，把$_SERVER[‘HTTPS’]修改为$_SERVER[“HTTP_FROM_HTTPS”]。</p>
<p><img src="/images/0e743652838cf44c0325c416dde6cbc2.jpeg" alt="wordpress部署SSL（https）后提示网页重定向次数过多的解决方法"></p>
<h3 id="博主小提示"><a href="#博主小提示" class="headerlink" title="博主小提示"></a>博主小提示</h3><p>如遇到以上问题还可通过修改网站根目录的wp-config.php来解决。</p>
<p>在网站根目录的wp-config.php中加入以下代码即可。</p>
<p>$_SERVER[‘HTTPS’] &#x3D; ‘on’; define(‘FORCE_SSL_LOGIN’, true); define(‘FORCE_SSL_ADMIN’, true);</p>
]]></content>
  </entry>
  <entry>
    <title>【教程】免信用卡为cloudflare添加付款方式</title>
    <url>/2024-11-13-2024/11/2024-11-13-%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E5%85%8D%E4%BF%A1%E7%94%A8%E5%8D%A1%E4%B8%BAcloudflare%E6%B7%BB%E5%8A%A0%E4%BB%98%E6%AC%BE%E6%96%B9%E5%BC%8F/index.html</url>
    <content><![CDATA[<p>Cloudflare是一家全球云平台服务提供商，面向全球不同规模的企业和个人用户提供广泛的网络服务。该公司提供多项免费网络服务，包括CDN、Workers and Pages、R2、Zero Trust等，深获用户好评。然而，部分免费服务如R2、Zero Trust需要绑定支付方式方可使用。鉴于一些用户没有外币信用卡、担心意外超额扣费、或因隐私考虑不愿绑定真实信用卡，Paypal信息等原因，无法使用R2、Tunnel、SaaS等服务。本教程将介绍一种通过<strong>生成信用卡信息</strong>为Cloudflare添加付款方式的方法。</p>
<ol>
<li><strong>需要准备：</strong></li>
</ol>
<ul>
<li>一个信用卡号生成网站，这里以<a href="https://www.nodeseek.com/jump?to=https://namso-gen.com/">Namso-gen</a>为例</li>
<li>一个信用卡校验测活网站，这里以<a href="https://www.nodeseek.com/jump?to=https://www.mrchecker.net/card-checker/ccn2/">MrChecker</a>为例</li>
<li>一个卡BIN查询网站，这里以<a href="https://www.nodeseek.com/jump?to=https://bincheck.io/zh">BINCheck</a>为例</li>
<li>一个虚拟地址生成网站，这里以<a href="https://www.nodeseek.com/jump?to=https://www.meiguodizhi.com/">美国地址生成器</a>为例</li>
<li>一个可以通过cf支付网关验证的卡段，这里我为大家提供几个： <code>601121255660xxxx</code> <code>546775142533xxxx</code> <code>622759531087xxxx</code> <code>479229938031xxxx</code> （用其他卡段测试成功的mjj也可在楼下补充）</li>
</ul>
<ol start="2">
<li><strong>原理</strong>： 一部分网站的支付网关在初步验证信用卡信息时仅检查卡号的格式是否符合标准（如<a href="https://www.nodeseek.com/jump?to=https://zh.wikipedia.org/wiki/%25E5%258D%25A2%25E6%2581%25A9%25E7%25AE%2597%25E6%25B3%2595">Luhn算法</a>）以及卡种、发卡行等基本信息，而不进行实际的资金预授权或小额扣款验证。也就是说，在绑定信用卡时，这些网站可能只进行基本的格式检查，而不与银行或信用卡网络进行实时验证来确认卡号的真实性和有效性。这意味着，只要卡号格式正确，就可能可以通过验证。然而，这并不意味着可以使用这些随机生成的信用卡信息进行实际消费或支付，因为在进行交易时，支付系统会进行更深入的验证，包括资金的实际可用性和账户的有效性。因此，当一些网站采用更严格的验证措施，如要求验证卡的有效性或进行小额扣款验证时，这时随机生成的信用卡信息就无法通过验证。</li>
<li><strong>操作步骤</strong>： a.在Cloudflare Dashboard点击右上角的头像–&gt;账单–&gt;付款信息，添加付款方式。 b.使用信用卡号生成网站<a href="https://www.nodeseek.com/jump?to=https://namso-gen.com/">Namso-gen</a>，在对应的卡段下生成一定数量的信用卡信息 <img src="/images/e670e88553491b105870e.png" alt="【教程】免信用卡为cloudflare添加付款方式"> c.将随机生成得到的信用卡信息复制到<a href="https://www.nodeseek.com/jump?to=https://www.mrchecker.net/card-checker/ccn2/">MrChecker</a>进行校验 <img src="/images/ddf07dff0ec3c15ae49e7.png" alt="【教程】免信用卡为cloudflare添加付款方式"> d.挑选一个通过校验的信用卡信息，将卡号，有效期，cvv填写到cf中，其中的地址信息最好要和信用卡段所在国家一致，比如我提供的信用卡卡段是美国的，就填写美国的地址信息。卡bin查询和虚拟地址生成可以使用我上面提供的网站。 <img src="/images/81ccd6aac96dc25046f48.png" alt="【教程】免信用卡为cloudflare添加付款方式"> e.最后点击确定即可通过验证，如果不能通过，可以选取另外的信用卡信息再次进行尝试。</li>
<li><strong>后话</strong> 生成的虚假信用卡信息远不止绑定cf这一用处。比如可以通过绑定特定卡段的虚假信用卡信息，实现免费试用github copilot服务，白嫖perplexity ai pro等，一般把这种行为称为C号（C即CVV，Crack之意），这里因为篇幅和防止滥用等一些原因不再深入。</li>
</ol>
<p>❌<strong>在某种意义上，尝试使用随机生成的信用卡信息进行绑定或交易属于非法行为，可能会导致法律后果，包括被网站禁止、面临欺诈指控等。因此如非必要，即便在技术上可能存在这样的漏洞，也强烈建议遵守法律和道德规范，不要尝试使用非法手段进行操作。本教程仅供学习参考</strong> ❌<strong>在某种意义上，尝试使用随机生成的信用卡信息进行绑定或交易属于非法行为，可能会导致法律后果，包括被网站禁止、面临欺诈指控等。因此如非必要，即便在技术上可能存在这样的漏洞，也强烈建议遵守法律和道德规范，不要尝试使用非法手段进行操作。本教程仅供学习参考</strong> ❌<strong>在某种意义上，尝试使用随机生成的信用卡信息进行绑定或交易属于非法行为，可能会导致法律后果，包括被网站禁止、面临欺诈指控等。因此如非必要，即便在技术上可能存在这样的漏洞，也强烈建议遵守法律和道德规范，不要尝试使用非法手段进行操作。本教程仅供学习参考</strong></p>
<ol start="5">
<li>参考链接 [1]<a href="https://www.nodeseek.com/jump?to=https://linux.do/t/topic/23341">信用卡知识 BIN</a> [2]<a href="https://www.nodeseek.com/jump?to=https://linux.do/t/topic/2279">免费使用GPT-4,试用github copilot的服务</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门</title>
    <url>/2024-11-13-2024/11/2024-11-13-%E7%8E%A9%E8%BD%ACserv00%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BAwordpress%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%85%A5/index.html</url>
    <content><![CDATA[<p>不少童鞋在搭建博客、alist、图床等各类web服务的时候苦于云<a href="https://www.smzdm.com/fenlei/fuwuqi/">服务器</a>的成本望而却步，但其实搭建web服务也可以用虚拟主机，不少厂商都有免费的虚拟主机，但对于很多童鞋可能是第一次听说虚拟主机，这里就开一个新的系列，玩转serv00家的免费虚拟主机，本期就从0开始搭建wordpress个人博客。</p>
<p>先解释下什么是虚拟主机：虚拟主机（英语：virtual hosting）或称共享主机（shared web hosting），又称<a href="https://www.smzdm.com/fenlei/xunifuwu/">虚拟服务</a>器，是一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术。虚拟主机之间完全独立，并可由用户自行管理，虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器。以上这段来自<a href="https://pinpai.smzdm.com/3357/">百度</a>百科，简单来说就是只能用来搭建网站（web服务+数据库）的一种特定化的服务器，没有公网ip（只能通过域名来访问），不能或者只能开放几个端口。</p>
<p>市面上有不少虚拟主机服务商，但是基本上都是要收费，免费的也有不少限制，但是限制都颇多，一番用下来感觉serv00这家比较合适，3g的存储空间，带数据库，分配了512mb<a href="https://www.smzdm.com/fenlei/neicun/">内存</a>（普通网页是足够了），还能用ssh，也支持开放少量端口，不限流量，带个子域名，重点是免费还没广告，唯一的要求就是需要每三个月登录一次后台或者ssh，不然就删号了，这个可以通过自动脚本来实现，或者干脆自己每三个月上一次后台就可以保活了。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_2/"><img src="/images/c1e2591347598521f3e0819ca19f026e.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>本系列教程只是推荐用serv00，如果不想用这家选择其他的虚拟主机一样可以，只是步骤可能会有所差异。</p>
<h2 id="一、注册账号并登录"><a href="#一、注册账号并登录" class="headerlink" title="一、注册账号并登录"></a><strong>一、注册账号并登录</strong></h2><p>前往serv00官网（Serv00.com）自行注册一个账号，serv00有注册人数限制，如果达到上限可能不再开放注册。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_3/"><img src="/images/d7684e8d0470e5ccec49b288b83583b3.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>注册完成后会收到一封邮件，里面包含了账户名称以及密码，还包含了服务器地址（SSH&#x2F;SFTP server address）、登录控制台地址（DevilWEB webpanel）以及一个子域名。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_4/"><img src="/images/2075e9eb658993bdc2c38b34cd6b1a0e.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>打开控制台地址，输入用户名+密码登录就可以了。进入控制台后就可以看到目前空间&#x2F;性能占用情况。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_5/"><img src="/images/4cc48e034e8948492d060ae0a238fd25.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<h2 id="（可选）二、绑定自己的域名"><a href="#（可选）二、绑定自己的域名" class="headerlink" title="（可选）二、绑定自己的域名"></a><strong>（可选）二、绑定自己的域名</strong></h2><p>serv00赠送的那个子域名不太好记住，如果有自己的域名推荐绑定上自己的域名。什么，域名不就得花钱？《<a href="https://post.smzdm.com/p/aqq6o08p/" title="免费的eu.org">免费的eu.org</a>》了解一下，或者《<a href="https://go.smzdm.com/6b2f78d8cc5ecb1f/ca_aa_yc_163_aqq6o08p_18024_0_179_0" title="6块一年的xyz">6块一年的xyz</a>》了解一下，这些内容往期文章都有，需要的童鞋自行翻阅。</p>
<p>先添加网站，进入控制台后选择WWW Websites-Add new website，domain填入自己的域名，其他的不用管，如果是需要用到其他的环境例如python，可以在高级里面选择，本期wordpress是需要php就默认的就行，不用改动，然后点击add添加。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_6/"><img src="/images/c0c407ca5650a3691cc46e3eba4d2002.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>添加完成后，进入DNS zones，编辑刚刚添加的域名，查看这个域名a记录（也就是域名解析的服务器地址），记下这个ip，这个ip每个人不一定相同，所以不要抄我图中的。这个ip也就是等下你建立好的网站实际的ip地址。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_7/"><img src="/images/6b24894c4c5a4ee3f683a016049af789.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a><a href="https://post.smzdm.com/p/aqq6o08p/pic_8/"><img src="/images/c27d5985fcd1bfc3d96d94ecfe467efc.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>然后登录自己域名的解析商，添加一个这个域名的ipv4解析，填入刚刚获取的ip地址就可以完成添加域名了。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_9/"><img src="/images/60d2265d96ea1d029d31f714d6593352.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<h2 id="三、添加数据库"><a href="#三、添加数据库" class="headerlink" title="三、添加数据库"></a><strong>三、添加数据库</strong></h2><p>本期教程搭建的wordpress（以下简称wp），wp所需要的是mysql数据库，这里就需要添加一个mysql数据库，如果后续需要其他的服务，添加对应的数据库就可以了，数据库可以添加多个，一个服务对应一个数据库。</p>
<p>进入MySQL-Add database，输入数据库名称、数据库用户名以及密码，其他的默认就行，这里为了安全数据库名称和用户名不建议一致，密码也建议高强度密码，如果对数据库字符有要求就在高级设置里面更改，本期wp用默认的就行。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_10/"><img src="/images/1da120ff6dfe5d92daf2723c893e9cde.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>添加好后返回MySQL，就可以看到刚刚添加的数据库连接地址，这个也需要记住，每个人地址可能均不一样，也不要抄我图中的地址。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_11/"><img src="/images/d7e3125e27d6aba610ae0c4c42f19e02.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<h2 id="四、搭建wordpress网站"><a href="#四、搭建wordpress网站" class="headerlink" title="四、搭建wordpress网站"></a><strong>四、搭建wordpress网站</strong></h2><p>一个虚拟服务器可以添加多个网站，和数据库一样，只要虚拟主机还有剩余空间就行，但是鉴于这个虚拟服务器的性能，不建议部署太多的网站。</p>
<h3 id="1-上传wp文件"><a href="#1-上传wp文件" class="headerlink" title="1.上传wp文件"></a><strong>1.上传wp文件</strong></h3><p>先到wp的官网下载（<a href="https://wordpress.org/latest.zip%EF%BC%89%E6%9C%80%E6%96%B0%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BF%9B%E5%85%A5%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%8E%A7%E5%88%B6%E5%8F%B0-File">https://wordpress.org/latest.zip）最新的文件，然后进入虚拟主机控制台-File</a> manager，进入虚拟主机文件管理界面。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_12/"><img src="/images/61bc352c524424b794d83a7dd7b2c9b7.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>进入文件管理界面后进入domains（这个文件夹就是网站存放目录），并选择对应网站的文件夹（也就是域名名称开头的文件夹），在步骤二中我添加了自己的域名，如果是选择用serv00提供的子域名，则进入子域名那个名称的文件夹。再进入public_html这个子文件夹，然后点击Send-From computer，从本地<a href="https://www.smzdm.com/ju/sp4x11p/">电脑</a>上传刚刚下载的wp压缩包（下载的压缩包不用解压）。</p>
<p>有童鞋会好奇为什么不选择第二个，从互联网上直接下载到虚拟主机，那可以猜猜我为什么不用。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_13/"><img src="/images/f516fa9154b3ea131effbc6942dbfb14.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>当上传好对应的压缩包后，刷新以下网页，不刷新看不到刚刚上传的文件，然后先选择public_html文件夹中index.html并删除。一定要先删除，否则等下解压压缩包会报错。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_14/"><img src="/images/ee0037e285f1dfc2f2c05c0cc12d40d5.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>删除后选择刚刚上传的wp压缩包，展开压缩包，右击wordpress这个文件夹，选择extract，解压到public_html文件夹中。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_15/"><img src="/images/9dc08e14675a1e63391ee7e682eb5748.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a><a href="https://post.smzdm.com/p/aqq6o08p/pic_16/"><img src="/images/1a929be92c1a81a5f8f3f8d30619f366.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<h3 id="2-初始化wp"><a href="#2-初始化wp" class="headerlink" title="2.初始化wp"></a><strong>2.初始化wp</strong></h3><p>解压完压缩包后，在浏览器打开对应的域名，就可以进入到wp初始化的界面。如果打开后浏览器提示503错误，则是虚拟主机那边还在部署中，等待几分钟再打开即可。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_17/"><img src="/images/e3d907f391173a457d96b6f9e2d6a154.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>选择中文（如果想挑战下自己的English也行），然后一路点击继续。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_18/"><img src="/images/836f6d7be10fe6049a63fa4c7f431b95.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a><a href="https://post.smzdm.com/p/aqq6o08p/pic_19/"><img src="/images/9029ed12558462b4c695ace31469ae6f.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>然后配置数据库信息，数据库名称、用户名、密码填写刚刚建立的数据库信息，数据库主机需要填写刚刚获取的地址，不是图中的localhost，表前缀默认就行，然后提交。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_20/"><img src="/images/4889d15aa5eb542fa4d456642258913d.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>如果数据库信息无误，就可以进入到最后一步，配置wp管理员信息，这里邮箱可以填自己真实邮箱，如果不想被收录也可以勾选“建议搜索引擎不索引本站点”。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_21/"><img src="/images/751f553806a255eae030dde57a35fe6f.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a><a href="https://post.smzdm.com/p/aqq6o08p/pic_22/"><img src="/images/8062e4de135f1425e213ad084fcb81ad.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>当一切都配置完成后就可以登录wp后台（xxx.xxx&#x2F;wp-admin）来管理和设置wp。此时就可以在浏览器输入域名再次访问网站，就可以看到wp默认的界面了。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_23/"><img src="/images/e24cc763a7534e8428631ebf7ca8c68f.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<h3 id="3-美化-wp详细教程"><a href="#3-美化-wp详细教程" class="headerlink" title="3.美化&amp;wp详细教程"></a><strong>3.美化&amp;wp详细教程</strong></h3><p>登录wp后台（xxx.xxx&#x2F;wp-admin），就可以对wp进行主题、文章等管理，但是碍于篇幅，wordpress相关详细教程将会再开一个单独的系列，本篇就暂不介绍相关内容。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_24/"><img src="/images/0334c29c9651678498f5bb4fe22cfa73.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<p>各位童鞋可以访问我自己的看看效果（<a href="http://jinitaimeiba.eu.org/" title="jinitaimeiba.eu.org">jinitaimeiba.eu.org</a>），注意不要在微信浏览器中直接打开，这还是毛坯房。</p>
<h2 id="（可选）五、开启ssl"><a href="#（可选）五、开启ssl" class="headerlink" title="（可选）五、开启ssl"></a><strong>（可选）五、开启ssl</strong></h2><p>关于ssl我个人不建议在serv00启用，因为会有些问题，如果确实需要ssl，可以自己先去域名服务商申请一个ssl证书并且加进去。申请ssl教程往期文章也有，这里就不展开讲了。</p>
<h2 id="（可选）六、使用cloudflare-cdn提速"><a href="#（可选）六、使用cloudflare-cdn提速" class="headerlink" title="（可选）六、使用cloudflare cdn提速"></a><strong>（可选）六、使用cloudflare cdn提速</strong></h2><p>由于serv00服务器是在欧洲地区，国内访问很慢，这时候就可以利用cloudflare（简称cf）免费的cdn来加速，cf具体使用教程具体请看《<a href="https://go.smzdm.com/b18e4fd29c070993/ca_aa_yc_163_aqq6o08p_18024_0_179_0" title="利用cloudflare让ipv4与ipv6互通">利用cloudflare让ipv4与ipv6互通</a>》。</p>
<p>注意，使用cf cdn来进行提速只支持自己的域名；​如果使用的是serv00给的子域名是无法使用cf cdn的，当然也无法使用其他的cdn加速。</p>
<p>进入cf后台，只需要开启代理就可以启用cdn，然后等待几分钟，刷新dns后再次访问就可以看到速度明显变快。同时cf还可以解决ssl的问题，开启cdn后就是https访问网站了，也不用手动配置ssl证书。</p>
<p><a href="https://post.smzdm.com/p/aqq6o08p/pic_25/"><img src="/images/1bf7e0c8dd35bd6d1678ab36925b5460.jpeg" alt="玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门"></a></p>
<h2 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a><strong>七、其他</strong></h2><ol>
<li>serv00本身是不限制流量，但请不要滥用，滥用会被封号。</li>
</ol>
<p>2.强烈建议套上cdn，如果不套cf cdn速度会很慢，当然套了cf也不会多块，但请记住这是免费的，花钱就没有这么多问题。</p>
<p>3.自己重要数据请及时备份，如果哪一天因为被滥用或者长时间不登陆导致账户被删除，数据是无法找回的。</p>
<p>4.serv00要求每三个月就登录一次ssh或者控制台，网上有脚本，但本人没有测试所以就不放出来了，本人只建议每过一个月手动登陆下后台或者ssh。</p>
<p>作者声明本文无利益相关，欢迎值友理性交流，和谐讨论～</p>
]]></content>
  </entry>
  <entry>
    <title>给serv00添加优质域名并加速网站</title>
    <url>/2024-11-13-2024/11/2024-11-13-%E7%BB%99serv00%E6%B7%BB%E5%8A%A0%E4%BC%98%E8%B4%A8%E5%9F%9F%E5%90%8D%E5%B9%B6%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99/index.html</url>
    <content><![CDATA[<p>serv00不加速网站的情况下延迟比较高，而且自带的域名也很不美观。有很多免费<strong>高大上</strong>但是<strong>不能</strong>托管cloudflare的域名，要充分将其利用请见下文 <img src="https://linux.do/images/emoji/apple/wink.png?v=12" alt=":wink:" title=":wink:"></p>
<h2 id="开始前准备"><a href="#开始前准备" class="headerlink" title="开始前准备"></a><a href="https://linux.do/t/topic/174317#p-1392492-h-1"></a>开始前准备</h2><p>1.serv00账号申请 <a href="https://www.serv00.com/">https://www.serv00.com/ 30</a> 2.注册一个添加到serv00的免费域名 <a href="https://www.changeip.com/">changeip.com 220</a> 注册参考： <a href="https://linux.do/t/topic/170258">https://linux.do/t/topic/170258</a> 或者使用其他的免费域名</p>
<p><img src="/images/48.png" alt="给serv00添加优质域名并加速网站"> <a href="https://linux.do/t/topic/26864">免费域名分享，一起将白嫖进行到底<img src="https://linux.do/images/emoji/apple/smiley.png?v=12" alt="smiley" title="smiley"></a> <a href="https://linux.do/c/softwares/14">软件分享</a></p>
<blockquote>
<p>免费的域名有以下网站，还请其他大佬继续补充，一起将白嫖进行到底 <img src="https://linux.do/images/emoji/apple/smiley.png?v=12" alt="smiley" title="smiley">： <a href="https://subreg.cz/">https://subreg.cz</a> 可以申请free.hr二级域名(现在需要收费1.6元&#x2F;年了)，可以托管到 CF <a href="https://freedomain.one/">https://freedomain.one</a> 可以申请 <a href="http://publicvm.com/">publicvm.com</a>、run.place等五种免费二级域名 <a href="https://www.azote.org/">https://www.azote.org</a> 可以申请N多免费二级域名，虽不…</p>
</blockquote>
<p>如果注册网站不支持托管域名，可以使用托管中介，<strong>但是托管后只能使用托管的次级域名进行解析</strong> 托管网址： <a href="https://hostry.com/?d=1">HOSTRY - Instant Robust Hosting Services | HOSTRY Hosting Services 25</a> 3.拥有一个托管在cloudflare的域名（需要开通SAAS） 免费可托管CF的域名 <strong>建议使用cloudns免费域名，容易注册，一个号就可以管一个serv00地区</strong> <a href="https://nic.us.kg/">https://nic.us.kg 74</a></p>
<p><a href="https://customer.l53.net/">https://customer.l53.net 41</a></p>
<p><img src="/images/949712e9a72dcc22478e509a1fd004ab.gif" alt="给serv00添加优质域名并加速网站"><a href="https://www.cloudns.net/">cloudns.net</a></p>
<h3 id="Free-DNS-hosting-Cloud-DNS-hosting-and-Domain-names-ClouDNS-35"><a href="#Free-DNS-hosting-Cloud-DNS-hosting-and-Domain-names-ClouDNS-35" class="headerlink" title="Free DNS hosting, Cloud DNS hosting and Domain names | ClouDNS 35"></a><a href="https://www.cloudns.net/">Free DNS hosting, Cloud DNS hosting and Domain names | ClouDNS 35</a></h3><p>ClouDNS provides Free DNS, Cloud DNS, Managed DNS, GeoDNS and DDoS Protected DNS hosting with included web redirects, mail forwards and Round-Robin load balancing. Instant updates in Europe, North and South America, Asia and Australia.</p>
<h1 id="1-将注册的高大上域名添加到serv00"><a href="#1-将注册的高大上域名添加到serv00" class="headerlink" title="1.将注册的高大上域名添加到serv00"></a><a href="https://linux.do/t/topic/174317#p-1392492-h-1serv00-2"></a>1.将注册的高大上域名添加到serv00</h1><p>这个<a href="https://www.changeip.com/">域名网站 220</a>很多域名后缀，挑选一个自己喜欢的</p>
<p><a href="https://linux.do/uploads/default/original/3X/0/6/06dd77f6cc1b0974619e837ef7b4a0def9c3d784.png" title="image"><img src="/images/06dd77f6cc1b0974619e837ef7b4a0def9c3d784_2_447x500.png" alt="image"></a></p>
<p>image1144×1277 82.8 KB</p>
<p> </p>
<p>添加注册域名到serv00</p>
<p><a href="https://linux.do/uploads/default/original/3X/9/8/986ca21d7f2624f3578076bce8d76b70cf5452b9.png" title="image"><img src="/images/986ca21d7f2624f3578076bce8d76b70cf5452b9_2_690x223.png" alt="image"></a></p>
<p>image1377×446 36.2 KB</p>
<p> </p>
<p> </p>
<p><a href="https://linux.do/uploads/default/original/3X/5/4/54696b4142c1567deddda441e3d3090febc3d6db.png" title="image"><img src="/images/54696b4142c1567deddda441e3d3090febc3d6db_2_690x303.png" alt="image"></a></p>
<p>image2072×911 79.1 KB</p>
<p>查看添加的域名是否自动生成DNS，如果没有需要自己进行添加域名</p>
<p><a href="https://linux.do/uploads/default/original/3X/5/3/531c1b9985a2bad82a0eaeafbca86a5c2b09757a.png" title="image"><img src="/images/531c1b9985a2bad82a0eaeafbca86a5c2b09757a_2_690x365.png" alt="image"></a></p>
<p>image2022×1072 106 KB</p>
<p> </p>
<h1 id="2-将serv00的IP解析到cloudflare"><a href="#2-将serv00的IP解析到cloudflare" class="headerlink" title="2.将serv00的IP解析到cloudflare"></a><a href="https://linux.do/t/topic/174317#p-1392492-h-2serv00ipcloudflare-3"></a>2.将serv00的IP解析到cloudflare</h1><p> </p>
<p><a href="https://linux.do/uploads/default/original/3X/7/7/775dc24dc68d305d97731d5a3dbbb50212b40fef.png" title="image"><img src="/images/775dc24dc68d305d97731d5a3dbbb50212b40fef_2_690x207.png" alt="image"></a></p>
<p>image3101×934 146 KB</p>
<p>复制获取的IP</p>
<p><a href="https://linux.do/uploads/default/original/3X/f/c/fc8e99a5cf8209a172749f5005a1bc954c42acc2.png" title="image"><img src="/images/fc8e99a5cf8209a172749f5005a1bc954c42acc2_2_690x335.png" alt="image"></a></p>
<p>image2079×1012 101 KB</p>
<p> </p>
<p>将IP解析到cloudflare</p>
<p><a href="https://linux.do/uploads/default/original/3X/2/5/253987b197880858f93e21324617989e2b858a54.png" title="image"><img src="/images/253987b197880858f93e21324617989e2b858a54_2_690x173.png" alt="image"></a></p>
<p>image3152×793 195 KB</p>
<p> </p>
<h1 id="3-添加回退源"><a href="#3-添加回退源" class="headerlink" title="3.添加回退源"></a><a href="https://linux.do/t/topic/174317#p-1392492-h-3-4"></a>3.添加回退源</h1><p>添加刚才解析的域名</p>
<p><a href="https://linux.do/uploads/default/original/3X/1/8/1830ed52f7d4c860eb94bb71e34bfa910d793ad4.png" title="image"><img src="/images/1830ed52f7d4c860eb94bb71e34bfa910d793ad4_2_690x144.png" alt="image"></a></p>
<p>image2885×603 71.4 KB</p>
<p> </p>
<h1 id="4-创建自定义主机名"><a href="#4-创建自定义主机名" class="headerlink" title="4.创建自定义主机名"></a><a href="https://linux.do/t/topic/174317#p-1392492-h-4-5"></a>4.创建自定义主机名</h1><p> </p>
<p><a href="https://linux.do/uploads/default/original/3X/9/f/9fcf3cdf6bb6e3405a9e499184d56b776560e45b.png" title="image"><img src="/images/9fcf3cdf6bb6e3405a9e499184d56b776560e45b_2_690x256.png" alt="image"></a></p>
<p>image2997×1114 225 KB</p>
<p> </p>
<p>添加你在serv00网站上添加的域名</p>
<p><a href="https://linux.do/uploads/default/original/3X/f/1/f1aba05e7b496313c113f7c14734b1a2ac544b03.png" title="image"><img src="/images/f1aba05e7b496313c113f7c14734b1a2ac544b03_2_690x255.png" alt="image"></a></p>
<p>image3007×1112 153 KB</p>
<p> </p>
<p>复制你获取的DCV</p>
<p><a href="https://linux.do/uploads/default/original/3X/f/1/f19ee592dad2765a5355eedf48f061b3903fb701.png" title="image"><img src="/images/f19ee592dad2765a5355eedf48f061b3903fb701_2_690x181.png" alt="image"></a></p>
<p>image2815×741 150 KB</p>
<p> </p>
<h1 id="5-在域名网站添加cname记录"><a href="#5-在域名网站添加cname记录" class="headerlink" title="5.在域名网站添加cname记录"></a><a href="https://linux.do/t/topic/174317#p-1392492-h-5cname-6"></a>5.在域名网站添加cname记录</h1><p> </p>
<p><a href="https://linux.do/uploads/default/original/3X/2/8/28c33411a7e3527fece018de49f2aafe200420b6.png" title="image"><img src="/images/28c33411a7e3527fece018de49f2aafe200420b6_2_690x356.png" alt="image"></a></p>
<p>image1861×962 92 KB</p>
<p> </p>
<p> </p>
<p><a href="https://linux.do/uploads/default/original/3X/8/8/8854ce062698764910d9a53ae6aafb81f4fff06e.png" title="image"><img src="/images/8854ce062698764910d9a53ae6aafb81f4fff06e_2_690x269.png" alt="image"></a></p>
<p>image2033×793 47.2 KB</p>
<p>将解析记录全部删除</p>
<p><a href="https://linux.do/uploads/default/original/3X/a/0/a0b5c926caf7f6e49fbc3fae0c6080feeed828bd.png" title="image"><img src="/images/a0b5c926caf7f6e49fbc3fae0c6080feeed828bd_2_690x327.png" alt="image"></a></p>
<p>image2552×1213 138 KB</p>
<p> </p>
<h2 id="添加两个cname记录"><a href="#添加两个cname记录" class="headerlink" title="添加两个cname记录"></a><a href="https://linux.do/t/topic/174317#p-1392492-cname-7"></a>添加两个cname记录</h2><p> </p>
<p><a href="https://linux.do/uploads/default/original/3X/c/1/c1e1ca78f8f5b19010e0bd22aba14b31cae85d0a.png" title="image"><img src="/images/c1e1ca78f8f5b19010e0bd22aba14b31cae85d0a_2_690x257.png" alt="image"></a></p>
<p>image1514×565 19.5 KB</p>
<p> </p>
<p><a href="https://linux.do/uploads/default/original/3X/5/0/50d7c0ea186b3357958ab28f440ec25577efc102.png" title="image"><img src="/images/50d7c0ea186b3357958ab28f440ec25577efc102_2_690x291.png" alt="image"></a></p>
<p>image935×395 23.6 KB</p>
<p> </p>
<h3 id="添加DCV记录获取证书"><a href="#添加DCV记录获取证书" class="headerlink" title="添加DCV记录获取证书"></a><a href="https://linux.do/t/topic/174317#p-1392492-dcv-8"></a>添加DCV记录获取证书</h3><p>格式： <code>Hostname</code>填写<code>_acme-challenge</code>，如果使用的是创建的次级域名，则需要在次级域名前缀,如：<code>_acme-challenge.前缀</code> <code>Value</code>填写<code>创建的域名.复制的DCV.</code>,最后的<code>.</code>不要落下</p>
<p><a href="https://linux.do/uploads/default/original/3X/f/b/fb2241f561798978015d2fa3bf5a95f80af76ca9.png" title="image"><img src="/images/fb2241f561798978015d2fa3bf5a95f80af76ca9_2_690x148.png" alt="image"></a></p>
<p>image2444×527 61.9 KB</p>
<p> </p>
<p> </p>
<p><a href="https://linux.do/uploads/default/original/3X/0/6/0676de7d0c10f3adc28cc434798bd22f513ee65b.png" title="image"><img src="/images/0676de7d0c10f3adc28cc434798bd22f513ee65b_2_690x193.png" alt="image"></a></p>
<p>image2394×670 35.3 KB</p>
<p> </p>
<h3 id="添加回退源"><a href="#添加回退源" class="headerlink" title="添加回退源"></a><a href="https://linux.do/t/topic/174317#p-1392492-h-9"></a>添加回退源</h3><p> </p>
<p><a href="https://linux.do/uploads/default/original/3X/5/f/5fc9c521077d6fe779ea563c5add5a04410a03ec.png" title="image"><img src="/images/5fc9c521077d6fe779ea563c5add5a04410a03ec_2_690x151.png" alt="image"></a></p>
<p>image2003×440 18.3 KB</p>
<p>Value最后的<code>.</code>别忘了 你将得到两个cname记录</p>
<p><a href="https://linux.do/uploads/default/original/3X/2/7/27fe861ff6af61269584f842b11b8cfb4d10b5b6.png" title="image"><img src="/images/27fe861ff6af61269584f842b11b8cfb4d10b5b6_2_690x357.png" alt="image"></a></p>
<p>image1648×855 36.8 KB</p>
<p> </p>
<p>加速域名解析 <a href="https://www.itdog.cn/ping/">https://www.itdog.cn/ping/ 32</a> 等待解析的域名生效即可</p>
<p><a href="https://linux.do/uploads/default/original/3X/d/4/d448cd4632027b37fec0ae1383ab9a42b2967507.png" title="image"><img src="/images/d448cd4632027b37fec0ae1383ab9a42b2967507_2_690x84.png" alt="image"></a></p>
<p>image2841×348 36.9 KB</p>
<p> </p>
<h1 id="6-添加优选cname域名"><a href="#6-添加优选cname域名" class="headerlink" title="6.添加优选cname域名"></a><a href="https://linux.do/t/topic/174317#p-1392492-h-6cname-10"></a>6.添加优选cname域名</h1><p>优选网址： <a href="https://monitor.gacjie.cn/page/cloudflare/cname.html">https://monitor.gacjie.cn/page/cloudflare/cname.html 102</a> 选择一个域名进行<a href="https://www.itdog.cn/ping">延迟测试 44</a></p>
<p>将前面指向回退源的cname地址进行替换</p>
<p><a href="https://linux.do/uploads/default/original/3X/8/c/8c650385bbedb757d4d3a184aca60d61e010d7b5.png" title="image"><img src="/images/8c650385bbedb757d4d3a184aca60d61e010d7b5_2_690x273.png" alt="image"></a></p>
<p>image2057×816 37.6 KB</p>
<p>看看效果 直接将域名解析到serv00</p>
<p><a href="https://linux.do/uploads/default/original/3X/3/3/335e500127e09e07e4d2227a71bfc7fbd5cf1e3a.jpeg" title="image"><img src="/images/335e500127e09e07e4d2227a71bfc7fbd5cf1e3a_2_666x500.jpeg" alt="image"></a></p>
<p>image1860×1396 188 KB</p>
<p> </p>
<p>通过CF回源再优选</p>
<p><a href="https://linux.do/uploads/default/original/3X/a/f/af815027ec220cdaef6ec144125a77c38ebaee57.jpeg" title="image"><img src="/images/af815027ec220cdaef6ec144125a77c38ebaee57_2_642x500.jpeg" alt="image"></a></p>
<p>image1718×1337 189 KB</p>
<p> </p>
<p><strong>只要是一个地区的serv00可以共有一个回退源，一个serv00账号部署的多个项目也可以共有</strong></p>
<p>最后你可以愉快的开始部署你的项目了</p>
<p>参考文章：</p>
<p><img src="/images/20470_2.png" alt="给serv00添加优质域名并加速网站"> <a href="https://linux.do/t/topic/113278">分享一下我个人使用CF优选的经验和方法</a> <a href="https://linux.do/c/softwares/14">软件分享</a></p>
<blockquote>
<p>第一种情况：你要建站用的域名未托管至CF,那么你想要使用CF优选，则必须有一个域名托管到CF，具体原理是自定义主机名SAAS回源，不了解saas回源的先看下面文章 然后进行CF优选 1.cf2dns宝塔面板插件 <a href="https://github.com/gacjie/cf2dns">https://github.com/gacjie/cf2dns</a> 2.cf2dnsDocker容器版 <a href="https://github.com/aaro-n/cf2dns-docker">https://github.com/aaro-n/cf2dns-dock…</a></p>
</blockquote>
<blockquote>
<p><a href="https://linux.do/t/topic/174317">给serv00添加优质域名并加速网站 - 资源荟萃 - LINUX DO</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>真正正确使用Cloudflare SaaS优选功能</title>
    <url>/2024-11-14-2024/11/2024-11-14-%E7%9C%9F%E6%AD%A3%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8cloudflare-saas%E4%BC%98%E9%80%89%E5%8A%9F%E8%83%BD/index.html</url>
    <content><![CDATA[<p>在数字世界的浩瀚海洋中，Cloudflare SaaS功能犹如一座光芒四射的灯塔，为众多网站管理员和开发者指引着网络性能优化的方向。它的强大功能，正日益成为这个技术驱动时代的宠儿。但是，当你在互联网的汪洋中寻找一盏明灯，希望找到一篇真正全面、深入且能解决实际问题的指南时，你会发现这并非易事。许多教程如同海面上的浮萍，表面光鲜，却缺乏深度，甚至彼此抄袭，让初学者望而却步，也让经验丰富的开发者难以获得更深层次的洞察。 今天，让我们摒弃那些陈词滥调，通过一个域名案例，带你深入探索Cloudflare SaaS功能的神秘殿堂。</p>
<p><a href="https://del.pub/code/cfsaas.html">真正正确使用Cloudflare SaaS优选功能 | 猫东东 - 好好生活，停止摸鱼</a></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>Cloudflare账号，申请地址: <a href="https://cloudflare.com/">https://cloudflare.com</a></li>
<li>2个域名<ul>
<li>cfd.del.pub 最终要使用的域名(这个需要在能分线路的解析商，国内的可以选择dnspod, alidns, 西数dns, 华为云dns, 国外的话,可以用<a href="https://gcore.com/">GCORE</a>)</li>
<li>sa6.us.kg 可以托管在cf上的域名，有很多，比如<a href="https://register.us.kg/">us.kg</a>, <a href="https://dot.nyc.mn/">nyc.mn</a>, <a href="https://cloudns.org/">cloudns.org</a>皆可</li>
</ul>
</li>
<li>1个演示空间<ul>
<li><a href="https://serv00.net/">serv00.net</a></li>
</ul>
</li>
</ul>
<h2 id="建立主机"><a href="#建立主机" class="headerlink" title="建立主机"></a>建立主机</h2><p>以serv00的免费空间为例，其它空间大差不差，有就行</p>
<p><strong>PS. 我们这里把cfd.del.pub作为 xafyi61.serv00.net 的别名，为了之后比对加速效果</strong></p>
<p><img src="/images/d4873fcb5cb66302c14e84bdf2054c00.png" alt="serv00"></p>
<h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><ol>
<li>在Cloudflare上添加域名 sa6.us.kg 并等待他生效</li>
</ol>
<p><img src="/images/56991d761e348aa3d4606b75e48de04f.png" alt="真正正确使用Cloudflare SaaS优选功能"></p>
<ol start="2">
<li>在sa6.us.kg上添加CNAME记录，指向你的serv00.net域名就可以，这里尽量不要用顶级去CNAME，可以随便用个2级来CNAME，现在就用serv00.sa6.us.kg来做CNAME，<strong>一定要把代理状态打开，否则这个域名无法做回源</strong></li>
</ol>
<blockquote>
<p>如果用顶级，可以用A记录，指向服务器IP</p>
</blockquote>
<p><img src="/images/2cb0f4c03c72db69e1ea5abb9b2c0d45.png" alt="添加一条CNAME解析"></p>
<h3 id="把这条二级域名添加到回源域名"><a href="#把这条二级域名添加到回源域名" class="headerlink" title="把这条二级域名添加到回源域名"></a>把这条二级域名添加到回源域名</h3><ol>
<li>在Cloudflare点击自己的域名，然后点击左侧的 SSL&#x2F;TLS -&gt; 自定义主机名，进入SAAS功能</li>
</ol>
<blockquote>
<p>这里需要认证一下，支持信用卡和paypal，如果都没有，可以用一些大佬分享的虚拟信用卡来验证，不扣钱，也不涉及后续支付，只是认证</p>
</blockquote>
<p><img src="/images/886b24b7355f5a9e817e6d290163a8bb.png" alt="开始界面"></p>
<p>添加之后，会告诉你初始化中，等待一下，就会生效了</p>
<p><img src="/images/868ca6d7e9006c62ddc3c88c8e7e2dd8.png" alt="添加完成"></p>
<p>其实现在访问一下 <a href="https://serv00.sa6.us.kg,你会发现,可以直达你的空间了/">https://serv00.sa6.us.kg，你会发现，可以直达你的空间了</a>…</p>
<blockquote>
<p>其实就cf给你的二级域名强行绑定了一个你指定的域名</p>
</blockquote>
<p><img src="/images/094540b2800a11e08561485b64fac030.png" alt="可以访问了"></p>
<h2 id="添加自定义域名-重点"><a href="#添加自定义域名-重点" class="headerlink" title="添加自定义域名[重点]"></a>添加自定义域名[重点]</h2><p>这会就可以把你要的域名绑定到你的这个回源域名上了</p>
<ol>
<li>点击添加自定义域名</li>
</ol>
<p><img src="/images/b630b94c3f4aeae09baa17d5bc58be7a.png" alt="添加自定义域名"></p>
<ol start="2">
<li>填写域名相关信息。以我们演示绑定的域名 cfd.del.pub 为例，填写如下信息：</li>
</ol>
<p><img src="/images/29bbca5c8b15ac8a6747dcab70912a89.png" alt="填写相关信息"></p>
<ol start="3">
<li>添加完成，等待证书和解析</li>
</ol>
<p><img src="/images/e16217f4bed914cf4c84c7c79ba8aa5d.png" alt="等待证书和解析"></p>
<ol start="4">
<li>[<strong>关键</strong>] 去del.pub的域名管理面板，添加解析记录，指向你的serv00.sa6.us.kg域名（我的域名在西数上，所以以西数为例）</li>
</ol>
<p><strong>PS. 因为西数没有单独的国内选项，所以我的解析是通用解析到visa.cn，国外指向serv00.sa6.us.kg，这里的解析，只要保证国外的解析到serv00.sa6.us.kg(回源域名)，国内的到你要加速的就好</strong></p>
<p>一般演示如下： <img src="/images/20ce3aa3976055f9bd06c9bf65af2cec.png" alt="添加解析记录"></p>
<p>这里推荐一个CF优选域名的地方： <a href="https://www.wetest.vip/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%BB%96%E6%8F%90%E4%BE%9B3%E4%B8%AA%E5%9F%9F%E5%90%8D%E6%9D%A5%E5%8A%A0%E9%80%9F">https://www.wetest.vip/，可以看到他提供3个域名来加速</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*.cloudflare.182682.xyz    15分钟更新</span><br><span class="line">*.cloudfront.182682.xyz    15分钟更新</span><br><span class="line">*.gcore.182682.xyz         15分钟更新</span><br></pre></td></tr></table></figure>

<p>我们选一个，将解析改为下面的</p>
<p><img src="/images/526b93d25f6f6052a7199becffc7cae8.png" alt="更新解析"></p>
<ol start="5">
<li>最重要的，证书还没有验证，再添加一条</li>
</ol>
<p><img src="/images/4d283dc839d83ffa03b5647071a841c4.png" alt="获取要解析的内容"></p>
<p>就能看到要验证证书，就要添加如下的TXT解析</p>
<p><strong>PS. 这一条有个坑，一定注意，有部分解析商，在加值的时候，要加上双引号，不然值为空，点名 x10hosting</strong></p>
<table>
<thead>
<tr>
<th>记录名</th>
<th>类型</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>_acme-challenge.cfd.del.pub</td>
<td>TXT</td>
<td>lLB_4TOxh2UlJjekcll-ymXzal4YW0160UALqoqAgdM</td>
</tr>
</tbody></table>
<p><img src="/images/b5980463416e3adaa24f2f17176f12af.png" alt="添加证书验证"></p>
<ol start="6">
<li>回到cf自定义域名这里，等待生效</li>
</ol>
<p><img src="/images/4d25924ec38e26bf77a0cd074cf11d21.png" alt="生效了"></p>
<ol start="7">
<li>SSL证书自动续期，你细细观察一下，在自定义主机最下面，有一个”自定义主机的DCV委派”，这就是自动续期域名的，点击展开，就可以看到具体说明，就是加一条CNAME到他指定的值，就可以实现自动续期证书</li>
</ol>
<p><img src="/images/ae435154058feccdd36f7982ef6abfef.png" alt="真正正确使用Cloudflare SaaS优选功能"></p>
<p>当前给我们的是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_acme-challenge.&lt;hostname&gt; CNAME &lt;hostname&gt;.8130884beea37816.dcv.cloudflare.com</span><br></pre></td></tr></table></figure>

<p>其中指的是我们自定义的域名，如：cfd.del.pub,替换之后就成了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_acme-challenge.cfd.del.pub CNAME cfd.del.pub.8130884beea37816.dcv.cloudflare.com</span><br></pre></td></tr></table></figure>

<p>所以我们去del.pub的域名管理，把刚才添加的TXT解析，_acme-challenge.cfd.del.pub改为上面的，就OK啦(直接改上面的TXT，因为CNAME会和TXT冲突，CNAME是一个万恶之源)</p>
<p><img src="/images/d6379a71ee18e31a62a08c056fe4d947.png" alt="真正正确使用Cloudflare SaaS优选功能"></p>
<h3 id="验证速度"><a href="#验证速度" class="headerlink" title="验证速度"></a>验证速度</h3><p>可以直接访问:<a href="https://cfd.del.pub/">https://cfd.del.pub/</a> 来测试速度</p>
<p>也可以用工具来测(以boce.cn为例子)：</p>
<ol>
<li>优选前： <img src="/images/000e2db5d377045f328ed2148ea348f7.png" alt="真正正确使用Cloudflare SaaS优选功能"></li>
<li>优选后： <img src="/images/9d6fdeaf33d378dd739292b6213603f9.png" alt="真正正确使用Cloudflare SaaS优选功能"></li>
<li>同类的测速工具推荐:</li>
</ol>
<table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>帝恩斯</td>
<td><a href="https://www.boce.com/http">https://www.boce.com/http</a></td>
<td>好像是dnspod的，每天有次数限制</td>
</tr>
<tr>
<td>itdog</td>
<td><a href="https://www.itdog.cn/http">https://www.itdog.cn/http</a></td>
<td>这个用的多，没次数限制</td>
</tr>
<tr>
<td>炸了么</td>
<td><a href="https://zhale.me/">https://zhale.me</a></td>
<td>这个也很好</td>
</tr>
</tbody></table>
<p><a href="https://del.pub/life/huaweiyun.html">华为云域名修改NS</a></p>
]]></content>
  </entry>
  <entry>
    <title>263</title>
    <url>/2024-11-16-2024/11/2024-11-16-263/index.html</url>
    <content><![CDATA[<p>56456</p>
]]></content>
  </entry>
  <entry>
    <title>测试elementor</title>
    <url>/2024-11-16-2024/11/2024-11-16-elementor-108/index.html</url>
    <content><![CDATA[<p>[et_pb_section admin_label&#x3D;”section”] [et_pb_row admin_label&#x3D;”row”] [et_pb_column type&#x3D;”4_4”][et_pb_text admin_label&#x3D;”Text”]</p>
<h2 id="正处在现场"><a href="#正处在现场" class="headerlink" title="正处在现场"></a>正处在现场</h2><p>在AI绘画的魔力下,我为你描绘出一幅动人的画作。她的眼眸如星光般闪耀,神情温柔而又充满活力,仿佛就是你心中的女友。她的身影融入了动漫小舞的优雅舞姿,让整幅画面充满了梦幻与浪漫。让我们一起欣赏这幅属于你我的艺术杰作吧。</p>
<p>  提交表单</p>
<h1 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h1><p>姓名:   </p>
<p>电子邮件:   </p>
<p>消息:  </p>
<p>[&#x2F;et_pb_text][&#x2F;et_pb_column] [&#x2F;et_pb_row] [&#x2F;et_pb_section]</p>
]]></content>
  </entry>
  <entry>
    <title>免费域名注册us.kg：从域名注册到Cloudflare托管全流程教程 | 永久免费</title>
    <url>/2024-11-13-2024/11/2024-11-13-%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8Cus-kg%EF%BC%9A%E4%BB%8E%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E5%88%B0cloudflare%E6%89%98%E7%AE%A1%E5%85%A8%E6%B5%81%E7%A8%8B%E6%95%99%E7%A8%8B/index.html</url>
    <content><![CDATA[<iframe title="2024注册免费域名保姆教程｜白嫖注册US.KG域名｜从域名注册到Cloudflare托管全流程教程 | 永久免费" src="https://www.youtube.com/embed/vT3u8ifqerA" width="1903" height="742" frameborder="0" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe>

<p>大家好，我是hans，今天给大家分享一期能托管到托管到Cloudflare的免费域名教程，us.kg看起来像是一个二级域名，其实是国家代码顶级域名（ccTLD），如 其实是国家代码顶级域名，简称PSL，属于公共后缀列表。PSL 的主要用途是帮助浏览器和其他软件正确处理 Cookie、安全策略和同源策略。域名长得有点特别，但功能与服务跟通用域名（.com、cn）一样，还能托管到Cloudflare，可以搭建魔法节点、博客等各种应用，关键是免费，还要啥自行车。大家请跟我一起操作。</p>
<h1 id="如何注册域名（us-kg）"><a href="#如何注册域名（us-kg）" class="headerlink" title="如何注册域名（us.kg）"></a>如何注册域名（us.kg）</h1><h2 id="一、注册us-kg帐号"><a href="#一、注册us-kg帐号" class="headerlink" title="一、注册us.kg帐号"></a>一、注册us.kg帐号</h2><h3 id="1-打开us-kg官网：https-register-us-kg"><a href="#1-打开us-kg官网：https-register-us-kg" class="headerlink" title="1.打开us.kg官网：https://register.us.kg/"></a>1.打开us.kg官网：<code>https://register.us.kg/</code></h3><ul>
<li>点击:<code>Sign up</code></li>
</ul>
<p><a href="/wp-content/uploads/replace/51f1013f82f71a1e9947c5cece92f43c.png"><img src="/wp-content/uploads/replace/51f1013f82f71a1e9947c5cece92f43c.png" alt="001.png"></a></p>
<h3 id="2-输入你的账户信息（邮箱填写真实邮箱，要接收验证邮件）"><a href="#2-输入你的账户信息（邮箱填写真实邮箱，要接收验证邮件）" class="headerlink" title="2.输入你的账户信息（邮箱填写真实邮箱，要接收验证邮件）"></a>2.输入你的账户信息<code>（邮箱填写真实邮箱，要接收验证邮件）</code></h3><p><a href="/wp-content/uploads/replace/fbfcf360fad752d183496be31e7a8303.png"><img src="/wp-content/uploads/replace/fbfcf360fad752d183496be31e7a8303.png" alt="002.png"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：用户名（自定义）、邮箱（常用邮箱，需要接收验证邮箱）、电话与地址（填写虚拟信息即可，由身份信息平台生成）；</span><br></pre></td></tr></table></figure>

<h3 id="3-身份信息平台：https-meiguodizhi-com"><a href="#3-身份信息平台：https-meiguodizhi-com" class="headerlink" title="3.身份信息平台：https://meiguodizhi.com"></a>3.身份信息平台：<code>https://meiguodizhi.com</code></h3><p><a href="/wp-content/uploads/replace/7a63852baf788c5cc34a6e9ec4477ea5.png"><img src="/wp-content/uploads/replace/7a63852baf788c5cc34a6e9ec4477ea5.png" alt="003.png"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：随意生成一个身份信息，按照注册页面要求复制 粘贴；</span><br></pre></td></tr></table></figure>

<h3 id="4-账号注册成功"><a href="#4-账号注册成功" class="headerlink" title="4.账号注册成功"></a>4.账号注册成功</h3><p><a href="/wp-content/uploads/replace/f42b05955f23dbdcbc308e2d3f523050.png"><img src="/wp-content/uploads/replace/f42b05955f23dbdcbc308e2d3f523050.png" alt="005.png"></a></p>
<h2 id="二、登录us-kg域名管理后台"><a href="#二、登录us-kg域名管理后台" class="headerlink" title="二、登录us.kg域名管理后台"></a>二、登录us.kg域名管理后台</h2><h3 id="1-输入注册邮箱、密码登录域名管理后台"><a href="#1-输入注册邮箱、密码登录域名管理后台" class="headerlink" title="1.输入注册邮箱、密码登录域名管理后台"></a>1.输入注册邮箱、密码登录域名管理后台</h3><p><a href="/wp-content/uploads/replace/3983e42c2c7be87b0f3e3c3088d9f884.png"><img src="/wp-content/uploads/replace/3983e42c2c7be87b0f3e3c3088d9f884.png" alt="006.png"></a> <a href="/wp-content/uploads/replace/aa40e02b40930ed6ba6fa00b2c5295ab.png"><img src="/wp-content/uploads/replace/aa40e02b40930ed6ba6fa00b2c5295ab.png" alt="007.png"></a></p>
<h3 id="2-KCY身份验证"><a href="#2-KCY身份验证" class="headerlink" title="2.KCY身份验证"></a>2.KCY身份验证</h3><ul>
<li><p>点击GitHub KYC Verification(Approved mail suffixes only) <a href="/wp-content/uploads/replace/0b176be9b672e38e48bb8a61847267e1.png"><img src="/wp-content/uploads/replace/0b176be9b672e38e48bb8a61847267e1.png" alt="undefined"></a></p>
<p>  注:由于安全问题,平台无法使用注册信息作KYC身份验证,目前只能通过Github KYC验证;</p>
</li>
</ul>
<h3 id="3-鼠标右键打开这里链接"><a href="#3-鼠标右键打开这里链接" class="headerlink" title="3.鼠标右键打开这里链接"></a>3.鼠标右键打开这里链接</h3><p><a href="/wp-content/uploads/replace/479f7c0d7678aab73f81fff8a34099a7.png"><img src="/wp-content/uploads/replace/479f7c0d7678aab73f81fff8a34099a7.png" alt="undefined"></a></p>
<h3 id="4-GitHub账户注册"><a href="#4-GitHub账户注册" class="headerlink" title="4.GitHub账户注册"></a>4.GitHub账户注册</h3><ul>
<li><p>点击create an account <a href="/wp-content/uploads/replace/5e107039cded7846e84aef38b608b97c.png"><img src="/wp-content/uploads/replace/5e107039cded7846e84aef38b608b97c.png" alt="undefined"></a></p>
<p>  注:如果有GitHub账户可以直接输入账号密码登陆;</p>
</li>
</ul>
<h3 id="5-输入注册GitHub身份信息"><a href="#5-输入注册GitHub身份信息" class="headerlink" title="5.输入注册GitHub身份信息"></a>5.输入注册GitHub身份信息</h3><p><a href="/wp-content/uploads/replace/dcd60cf8a376fc9d9ae49334401c46d6.png"><img src="/wp-content/uploads/replace/dcd60cf8a376fc9d9ae49334401c46d6.png" alt="undefined"></a></p>
<h3 id="6-KYC验证GitHub项目-右键打开这里链接"><a href="#6-KYC验证GitHub项目-右键打开这里链接" class="headerlink" title="6.KYC验证GitHub项目,右键打开这里链接"></a>6.KYC验证GitHub项目,右键打开这里链接</h3><ul>
<li>点击右上角Star小星星 <a href="/wp-content/uploads/replace/292f4552948ed07228741f1b09a37ce4.png"><img src="/wp-content/uploads/replace/292f4552948ed07228741f1b09a37ce4.png" alt="undefined"></a></li>
</ul>
<h3 id="8-点击Proceed-to-GitHub"><a href="#8-点击Proceed-to-GitHub" class="headerlink" title="8.点击Proceed to GitHub"></a>8.点击Proceed to GitHub</h3><ul>
<li><p>Username:<code>填写US.KG</code></p>
</li>
<li><p>Reason Registering the .US.KG Domain Name: <code>KYC Verification</code></p>
</li>
<li><p>点击Submit new issue <a href="/wp-content/uploads/replace/35ee21b0bf28489af7377dd2eed61a3c.png"><img src="/wp-content/uploads/replace/35ee21b0bf28489af7377dd2eed61a3c.png" alt="undefined"></a></p>
<p>  注:填写刚才注册US.KG的用户名,以及KYC验证理由;</p>
</li>
</ul>
<h3 id="9-KYC-Using-Your-GitHub-Account"><a href="#9-KYC-Using-Your-GitHub-Account" class="headerlink" title="9.KYC Using Your GitHub Account"></a>9.KYC Using Your GitHub Account</h3><ul>
<li><p>五项全部打勾,打完后等待验证 <a href="/wp-content/uploads/replace/0ded54fa07aa62456921744aedddbd6d.png"><img src="/wp-content/uploads/replace/0ded54fa07aa62456921744aedddbd6d.png" alt="undefined"></a></p>
<p>  注:全部打勾,打完后,不用做操作,等待几分钟下面会出KYC验证结果;</p>
</li>
</ul>
<h3 id="10-提示KYC验证通过"><a href="#10-提示KYC验证通过" class="headerlink" title="10.提示KYC验证通过"></a>10.提示KYC验证通过</h3><ul>
<li><p>验证通过后，US.KG重新输入账号密码即可 <a href="/wp-content/uploads/replace/cc657aaa68e891e33ff2b0636446f1a3.png"><img src="/wp-content/uploads/replace/cc657aaa68e891e33ff2b0636446f1a3.png" alt="undefined"></a></p>
<p>  注:如果验证不通过,请根据提示操作,然后重新提交验证;</p>
</li>
</ul>
<h2 id="三、域名注册步骤"><a href="#三、域名注册步骤" class="headerlink" title="三、域名注册步骤"></a>三、域名注册步骤</h2><h3 id="1-重新登录帐户后台"><a href="#1-重新登录帐户后台" class="headerlink" title="1.重新登录帐户后台"></a>1.重新登录帐户后台</h3><p><a href="/wp-content/uploads/replace/ca8a0b49a8497c4ba0de69c9cee1aa7f.png"><img src="/wp-content/uploads/replace/ca8a0b49a8497c4ba0de69c9cee1aa7f.png" alt="011.png"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">页面显示可以注册3个免费域名</span><br></pre></td></tr></table></figure>

<h3 id="2-向下滑动找Domain-name-registration"><a href="#2-向下滑动找Domain-name-registration" class="headerlink" title="2.向下滑动找Domain name registration)"></a>2.向下滑动找<code>Domain name registration)</code></h3><p><a href="/wp-content/uploads/replace/f7ece18ff456b8580d0cdf67220d35fb.png"><img src="/wp-content/uploads/replace/f7ece18ff456b8580d0cdf67220d35fb.png" alt="012.png"></a></p>
<h3 id="3-输入要注册的名字，然后点击Check"><a href="#3-输入要注册的名字，然后点击Check" class="headerlink" title="3.输入要注册的名字，然后点击Check"></a>3.输入要注册的名字，然后点击<code>Check</code></h3><p><a href="/wp-content/uploads/replace/f616cbad65a8f8e0ef6edf3a8baab0e9.png"><img src="/wp-content/uploads/replace/f616cbad65a8f8e0ef6edf3a8baab0e9.png" alt="013.png"></a></p>
<h3 id="4-显示域名没有被注册过，可以注册"><a href="#4-显示域名没有被注册过，可以注册" class="headerlink" title="4.显示域名没有被注册过，可以注册"></a>4.显示域名没有被注册过，可以注册</h3><ul>
<li><p><code>Name Server需要绑定名称服务器，这里我就使用用Cloudflare</code> <a href="/wp-content/uploads/replace/9073bfe37c452053ae707ca8d23819e0.png"><img src="/wp-content/uploads/replace/9073bfe37c452053ae707ca8d23819e0.png" alt="014.png"></a></p>
<p>  注：Name Server需要将域名托管到Cloudflare，然后生成名称服务器地址；</p>
</li>
</ul>
<h3 id="5-进入Cloudflare后台"><a href="#5-进入Cloudflare后台" class="headerlink" title="5.进入Cloudflare后台"></a>5.进入Cloudflare后台</h3><ul>
<li><p>打开Cloudflare官网：<code>https://cloudflare.com/</code></p>
</li>
<li><p>点击左侧导航：<code>网站</code></p>
</li>
<li><p>找到：<code>将您的网站或应用</code>，或者找到：<code>添加域</code> <a href="/wp-content/uploads/replace/98b18532213a3de2d3efa74c902bb072.png"><img src="/wp-content/uploads/replace/98b18532213a3de2d3efa74c902bb072.png" alt="015.png"></a></p>
<p>  注：关于Cloudflare使用网上有很多教程，我不过多说明，如果大家兴趣可留言，后期考虑出一期Cloudflare使用教程；</p>
</li>
</ul>
<h3 id="6-输入域名，然后点击继续"><a href="#6-输入域名，然后点击继续" class="headerlink" title="6.输入域名，然后点击继续"></a>6.输入域名，然后点击<code>继续</code></h3><p><a href="/wp-content/uploads/replace/083443e171a722210b4a382e7fd10167.png"><img src="/wp-content/uploads/replace/083443e171a722210b4a382e7fd10167.png" alt="016.png"></a></p>
<h3 id="7-选择下面免费版，然后点击继续"><a href="#7-选择下面免费版，然后点击继续" class="headerlink" title="7.选择下面免费版，然后点击继续"></a>7.选择下面<code>免费版</code>，然后点击<code>继续</code></h3><p><a href="/wp-content/uploads/replace/5ed7cf6ffd6e6982d2d6db55a27cf6e2.png"><img src="/wp-content/uploads/replace/5ed7cf6ffd6e6982d2d6db55a27cf6e2.png" alt="017.png"></a></p>
<h3 id="8-点击继续前往激活"><a href="#8-点击继续前往激活" class="headerlink" title="8.点击继续前往激活"></a>8.点击<code>继续前往激活</code></h3><p><a href="/wp-content/uploads/replace/c61ecd17b5bb47b49184806ffc9275f1.png"><img src="/wp-content/uploads/replace/c61ecd17b5bb47b49184806ffc9275f1.png" alt="018.png"></a></p>
<h3 id="9-找到下面Cloudflare名称服务器地址，点击复制"><a href="#9-找到下面Cloudflare名称服务器地址，点击复制" class="headerlink" title="9.找到下面Cloudflare名称服务器地址，点击复制"></a>9.找到下面<code>Cloudflare名称服务器地址</code>，<code>点击复制</code></h3><p><a href="https://assets.vviptuangou.com/686893791fafc8e32eb921f2a46ac82f1a1db567.jpg"><img src="https://assets.vviptuangou.com/686893791fafc8e32eb921f2a46ac82f1a1db567.jpg" alt="019.png"></a></p>
<h3 id="10-粘贴到US-KG-Name-Server地址栏，然后点击Register"><a href="#10-粘贴到US-KG-Name-Server地址栏，然后点击Register" class="headerlink" title="10.粘贴到US.KG Name Server地址栏，然后点击Register"></a>10.粘贴到US.KG <code>Name Server地址栏</code>，然后点击<code>Register</code></h3><p><a href="/wp-content/uploads/replace/05b041e03e3aa00ec15bba97f7a63260.png"><img src="/wp-content/uploads/replace/05b041e03e3aa00ec15bba97f7a63260.png" alt="020.png"></a></p>
<h3 id="11-提示Sucessful-Purchase-注册成功，完成域名注册"><a href="#11-提示Sucessful-Purchase-注册成功，完成域名注册" class="headerlink" title="11.提示Sucessful Purchase 注册成功，完成域名注册"></a>11.提示Sucessful Purchase <code>注册成功，完成域名注册</code></h3><p><a href="/wp-content/uploads/replace/380f7700ba849d528158146d4f8e31db.png"><img src="/wp-content/uploads/replace/380f7700ba849d528158146d4f8e31db.png" alt="021.png"></a></p>
<h3 id="12-查看域名信息"><a href="#12-查看域名信息" class="headerlink" title="12.查看域名信息"></a>12.查看域名信息</h3><ul>
<li>返回域名管理后台， 显示已<code>注册1个域名</code></li>
<li>点击右侧：<code>manage my domains</code>，查看域名详细信息 <a href="/wp-content/uploads/replace/3d17b06ba9ecfe799f899537a4c02e60.png"><img src="/wp-content/uploads/replace/3d17b06ba9ecfe799f899537a4c02e60.png" alt="undefined"></a></li>
</ul>
<h3 id="13-查看域名信息，"><a href="#13-查看域名信息，" class="headerlink" title="13.查看域名信息，"></a>13.查看域名信息，</h3><ul>
<li>点击<code>renew</code></li>
<li>域名免费使用，域名要每年续费，在域名到期前180天续费 <a href="/wp-content/uploads/replace/43f1decdb0cbd2e3bdef76a7e8ae2228.png"><img src="/wp-content/uploads/replace/43f1decdb0cbd2e3bdef76a7e8ae2228.png" alt="022.png"></a></li>
</ul>
<h2 id="四、Cloudflare完成域名托管"><a href="#四、Cloudflare完成域名托管" class="headerlink" title="四、Cloudflare完成域名托管"></a>四、Cloudflare完成域名托管</h2><h3 id="1-返回Cloudflare页面，点击继续"><a href="#1-返回Cloudflare页面，点击继续" class="headerlink" title="1.返回Cloudflare页面，点击继续"></a>1.返回Cloudflare页面，点击<code>继续</code></h3><p><a href="/wp-content/uploads/replace/197889a783fa4793696e6720f09e9877.png"><img src="/wp-content/uploads/replace/197889a783fa4793696e6720f09e9877.png" alt="023.png"></a></p>
<h3 id="2-状态显示：Cloudflare对名称服务器更新"><a href="#2-状态显示：Cloudflare对名称服务器更新" class="headerlink" title="2.状态显示：Cloudflare对名称服务器更新"></a>2.状态显示：<code>Cloudflare对名称服务器更新</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：上面显示要几个小时，一般几分钟就好；</span><br></pre></td></tr></table></figure>

<p><a href="/wp-content/uploads/replace/fca7a30896637f3f3729596e3b171139.png"><img src="/wp-content/uploads/replace/fca7a30896637f3f3729596e3b171139.png" alt="024.png"></a></p>
<h3 id="3-us-kg域名成功托管到Cloudflare"><a href="#3-us-kg域名成功托管到Cloudflare" class="headerlink" title="3.us.kg域名成功托管到Cloudflare"></a>3.<code>us.kg域名</code>成功托管到<code>Cloudflare</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">刷新网页，看到域名这里状态显示活动，即成功将us.kg免费域名托管到Cloudflare；</span><br></pre></td></tr></table></figure>

<p><a href="/wp-content/uploads/replace/5dfd47d509cce084fa266c367d72bc74.png"><img src="/wp-content/uploads/replace/5dfd47d509cce084fa266c367d72bc74.png" alt="025.png"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cloudflare 您的域提供出色的性能和可靠性，同时保护您的业务免受DDoS 攻击和路由泄漏和劫持。</span><br></pre></td></tr></table></figure>

<h2 id="五、su-kg免费域名注册完成"><a href="#五、su-kg免费域名注册完成" class="headerlink" title="五、su.kg免费域名注册完成"></a>五、su.kg免费域名注册完成</h2><p>###是否很简单就可以拥有一个免费域名，后面我会用这个免费域名，搭建免费个人博客、免费魔法网络等应用；</p>
<p>##我是新人博主，需要您的支持，请帮忙给我<code>点赞、关注、收藏，非常感谢！！！</code></p>
<p><a href="https://hansvlss.top/" title="头像"><img src="/wp-content/uploads/replace/069f13cd38b44bbe97b50f6b9c7a4529.jpeg" alt="头像" title="头像"><img src="/wp-content/uploads/replace/069f13cd38b44bbe97b50f6b9c7a4529.jpeg" alt="头像" title="头像"></a></p>
]]></content>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2024-11-16-2024/11/2024-11-16-%E6%B5%8B%E8%AF%95/index.html</url>
    <content><![CDATA[<p>测试</p>
]]></content>
  </entry>
  <entry>
    <title>测试评论</title>
    <url>/2024-11-16-2024/11/2024-11-16-%E6%B5%8B%E8%AF%95%E8%AF%84%E8%AE%BA/index.html</url>
    <content><![CDATA[<p>测</p>
]]></content>
  </entry>
  <entry>
    <title>真身</title>
    <url>/2024-11-16-2024/11/2024-11-16-%E7%9C%9F%E8%BA%AB/index.html</url>
    <content><![CDATA[<p>文章1</p>
]]></content>
      <categories>
        <category>wenzhang</category>
      </categories>
  </entry>
  <entry>
    <title>ce</title>
    <url>/2024-11-17-2024/11/2024-11-17-ce/index.html</url>
    <content><![CDATA[<p>ssda</p>
]]></content>
  </entry>
  <entry>
    <title>Serv00搭建各种服务</title>
    <url>/2024-11-13-2024/11/2024-11-13-serv00%E6%90%AD%E5%BB%BA%E5%90%84%E7%A7%8D%E6%9C%8D%E5%8A%A1/index.html</url>
    <content><![CDATA[<p><a href="https://www.serv00.com/">这个平台</a>是个 Virtual Host ，没有 Root ，还是 FreeBSD 的系统，不是 Linux ，不太好用。但是优点是隔离性差， Memory 和 vCPU 能短时间内超过 100% 进行调用。</p>
<p>已经玩了不少时间了，起初看到 Github 上有使用 Serv00 搭建 Vless 节点的<a href="https://github.com/qwer-search/serv00-vless">仓库</a>，就上手玩了一下，后来发现极其不稳， screen 运行的进程总是过一段时间就掉了（后经网友讨论确认为Serv00有时候会重启宿主机），又得ssh上去启动，相当不友好，且后来又发现了 Hax 这样的玩具，就对 Serv00 视如敝履了。</p>
<p>但是这两天有<a href="https://jq.qq.com/?_wv=1027&k=qssjFvAs">群友</a>突然提醒我才想起，我在 Hax 上用的很舒服的 pm2 也可以在 Serv00 上使用，这个十年有效期的玩具突然显得有用了起来。</p>
<p>经过我的尝试，成功在 Serv00 上部署了一些服务，接下来进行记录：</p>
<h1 id="面板自带功能"><a href="#面板自带功能" class="headerlink" title="面板自带功能"></a>面板自带功能</h1><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>Serv00 上如果想要使用自己的域名，有两种方式，一种是通过 Cloudflare 提供的 Argo 隧道，不仅能绑域名，免配置 ssl ，还可以享受 Cloudflare 的免费 CDN 提速。第二种就是直接使用面板内自带的 DNS 服务器功能绑定自己的域名。</p>
<p>在 Panel 中进入 DNS zones 选项卡，使用 Add new zone 功能添加自己的域名或者自己的域名的子域，然后在 Zone list 中找到刚刚添加的域名，点击 Edit 查看 DNS 记录，把当中列出的全部记录添加到自己的域名的 DNS 记录中即可完成域名的绑定。</p>
<p>Serv00 本身对于绑定在其上的域名提供了许多的服务支持，这里所说的绑定在Serv00上的域名包括自己绑定的自己的域名，以及 Serv00 在注册账户时赠送的域名 <code>USERNAME.serv00.net</code> ，其服务包括免费的一键申请式的 SSL 证书、域名邮箱、 DNS 管理等多种功能。</p>
<h3 id="SSL证书申请"><a href="#SSL证书申请" class="headerlink" title="SSL证书申请"></a>SSL证书申请</h3><p>在 Panel 中进入 WWW websites 选项卡，点击 Manage SSL certificates ，在你需要申请 SSL 证书的域名的 A 记录指向的那个 IP 地址右侧点击 Manage ，再点击 Add certificate ， Type 选择 Generate Let’s Encrypt certificate ，Domain 选择要申请 SSL 证书的域名，再点击 Add 即可。</p>
<h3 id="域名邮箱"><a href="#域名邮箱" class="headerlink" title="域名邮箱"></a>域名邮箱</h3><p>Panel 中进入 E-mail 选项卡，注册账号后会自动注册一个域名邮箱，用户名是 <code>USERNAME@USERNAME.serv00.net</code> 是 Serv00 的账户密码。可以使用 Add new e-mail 功能新建邮箱账户。</p>
<p>也可以在 Add new alias 功能中新建别名邮箱，其别名邮箱功能也提供了和 Cloudflare 一样的 Catch-all 的 Advanced settings 选项，用来批量注册东西十分方便。</p>
<p>目前我的测试中，似乎没有在 Manage whitelist 中添加进白名单的域名邮箱发来的邮件全部都会被识别为垃圾邮件。所以有需要的话可以在 Manage whitlist 中添加你需要接受邮件的邮箱的域名，比如 <code>qq.com</code> 、 <code>gmail.com</code> 等等。</p>
<p>如果绑定了自己的域名，想要使用自己的域名配置域名邮箱的话，要在 Domain list 中找到自己的域名，点击最右边的 DKIM ， action 选择 Add DNS record automatically ，然后 Sign domain 以注册域名，使得新的域名邮箱能够通过一些邮件接收服务器的验证。</p>
<p>Open web client 功能就可以进入邮箱的登录页面了，其使用方法与大多数的邮箱相同，不再赘述。</p>
<h3 id="DNS管理"><a href="#DNS管理" class="headerlink" title="DNS管理"></a>DNS管理</h3><p>DNS zones 选项卡中在自己绑定的域名右侧点击 Edit ，即可查看当前域名的所有 DNS 记录，在 Add new record 中可以手动添加新的 DNS 记录，与大多数的域名服务商提供的 DNS 管理的功能类似。</p>
<h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>WWW websites 选项卡中可以根据语言不同添加多种网站，其中 PHP 的 <code>eval() function</code> 和 <code>exec() function</code> 都要在添加完网站后，在Manage &gt; Details 中打开。不同类型的网页其 Details 中的选项也都有差异，可以按需查看配置，这里重点讲一下 Proxy 类型指向自己的应用程序监听端口的配置。</p>
<p>Add new website 功能中， Domain 填写自己的域名或者 serv00 分配的域名，或者它们的子域，展开 Advanced settings， Website type 选择 Proxy ，Proxy target 选择 localhost ， Proxy port 选择自己的应用监听的端口，其他选项留空或者保持默认，点击 Add 即可。接下来就能使用刚刚填写的域名访问自己部署的对应端口的应用了。如果需要 https 访问，再按前文的步骤去申请 SSL 证书即可。</p>
<h2 id="运行自己的应用"><a href="#运行自己的应用" class="headerlink" title="运行自己的应用"></a>运行自己的应用</h2><p>Additional services 选项卡中找到 Run your own applications 项目，将其设置为 Enabled 即可。<strong>如果不开启这一项，自己的用户目录下的所有文件都无法添加可执行权限。</strong></p>
<h2 id="File-manager"><a href="#File-manager" class="headerlink" title="File manager"></a>File manager</h2><p>文件管理，有一定的在线编辑和预览的功能，兼具文件的上传下载，删除新建等各种管理功能，十分便利。</p>
<h2 id="Port-reservation"><a href="#Port-reservation" class="headerlink" title="Port reservation"></a>Port reservation</h2><p>需要使用端口都得在这申请。</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>Serv00 提供了 MySQL 、 PostgreSQL 、 MongoDB 三种数据库，可以按需新建数据库、数据库用户。同时， Serv00 还提供了三种数据库的 webui ，十分便利。</p>
<p>需要注意的是，所有数据库在新建时，其用户名和数据库名都有一个 <code>mxxx_</code> 的前缀，在使用时容易被忽视。</p>
<h2 id="Cron-jobs"><a href="#Cron-jobs" class="headerlink" title="Cron jobs"></a>Cron jobs</h2><p>Cron jobs 选项卡提供了一些计划性任务的设置功能，在这里可以设置开机自启任务，或者定时循环任务，当然常用的还是开机自启任务的设定， Specify time 选择 After reboot 即为开机自启。</p>
<h1 id="部署应用前的一些准备工作"><a href="#部署应用前的一些准备工作" class="headerlink" title="部署应用前的一些准备工作"></a>部署应用前的一些准备工作</h1><p>在部署自己的应用之前，我建议提前安装好 pm2 以及 Cloudflared （可选）。前者是进程管理工具，用来方便开机自启，以及程序崩溃后自启，查阅进程运行情况等等。后者是 Cloudflare 的 Argo 隧道客户端，用它也可以给自己部署的应用加域名。特别是 Uptime Kuma ，更加推荐使用 Cloudflared 加域名，而不建议使用面板自带的 Proxy 。</p>
<h2 id="Pm2"><a href="#Pm2" class="headerlink" title="Pm2"></a>Pm2</h2><p>这个是重中之重，如果不是成功安装了 pm2 ，我甚至不会尝试探索 Serv00 这个玩具有什么用，所以 pm2 的安装方法记录在开头。</p>
<p>在 SSH 连接 serv00 之后，直接使用一键脚本安装 pm2 ：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs awk">bash &lt;(curl -s https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/k0baya/</span>alist_repl<span class="hljs-regexp">/main/</span>serv00/install-pm2.sh)
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>AWK</div></td></tr></tbody></table>

<blockquote>
<p>如果安装完成后执行 <code>pm2</code> 提示命令未找到，你可以断开 SSH 连接，再重新连接，即可。</p>
</blockquote>
<h2 id="Cloudflared"><a href="#Cloudflared" class="headerlink" title="Cloudflared"></a>Cloudflared</h2><p>Cloudflared 官方仓库并没有构建 FreeBSD 系统上能够使用的二进制文件，但是同样的，我找到了<a href="https://cloudflared.bowring.uk/">第三方的构筑</a>。使用第三方构筑的二进制文件，就能愉快的使用隧道了。</p>
<p>关于 Cloudflared 是什么，有什么用，ARGO_TOKEN 如何获取等部分，这里不再赘述，详细可以查看我的关于 CodeSandbox 和 Hax 的文章。</p>
<p>创建并进入Cloudflared 的工作目录：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/domains/cloudflared &amp;&amp; <span class="hljs-built_in">cd</span> ~/domains/cloudflared
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>下载 Cloudflared：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash">wget https://cloudflared.bowring.uk/binaries/cloudflared-freebsd-latest.7z &amp;&amp; 7z x cloudflared-freebsd-latest.7z &amp;&amp; <span class="hljs-built_in">rm</span> cloudflared-freebsd-latest.7z &amp;&amp; <span class="hljs-built_in">mv</span> -f ./temp/* ./cloudflared &amp;&amp; <span class="hljs-built_in">rm</span> -rf temp
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>测试运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./cloudflared</span> tunnel <span class="hljs-params">--edge-ip-version</span> auto <span class="hljs-params">--protocol</span> http2 <span class="hljs-params">--heartbeat-interval</span> 10s run <span class="hljs-params">--token</span> ARGO_TOKEN
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>JBOSS-CLI</div></td></tr></tbody></table>

<blockquote>
<p>其中 ARGO_TOKEN 要替换成自己的。确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p>
</blockquote>
<p>使用 pm2 启动 Cloudflared：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start</span> <span class="hljs-string">.</span><span class="hljs-comment">/cloudflared</span> <span class="hljs-literal">--</span> <span class="hljs-comment">tunnel</span> <span class="hljs-literal">--</span><span class="hljs-comment">edge</span><span class="hljs-literal">-</span><span class="hljs-comment">ip</span><span class="hljs-literal">-</span><span class="hljs-comment">version auto</span> <span class="hljs-literal">--</span><span class="hljs-comment">protocol http2</span> <span class="hljs-literal">--</span><span class="hljs-comment">heartbeat</span><span class="hljs-literal">-</span><span class="hljs-comment">interval 10s run</span> <span class="hljs-literal">--</span><span class="hljs-comment">token ARGO_TOKEN</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BRAINFUCK</div></td></tr></tbody></table>

<blockquote>
<p>其中 ARGO_TOKEN 要替换成自己的。</p>
</blockquote>
<p>接着去 CLoudflare 的面板中设置域名对应端口，即可使用域名访问自己搭建的服务了。</p>
<h2 id="安装-go1-22"><a href="#安装-go1-22" class="headerlink" title="安装 go1.22"></a>安装 go1.22</h2><blockquote>
<p>如果你有安装自己使用 go build 构建的需求，你可以选择安装最新的 go1.22 ，这里记录其安装过程。</p>
</blockquote>
<p>由于 Serv00 服务器上并未提供 go1.22 ，只提供了 go1.20.3 ，无法正常进行构建工作，所以需要手动安装 go1.22 环境。</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建安装目录</span>
<span class="hljs-built_in">mkdir</span> -p ~/local/soft &amp;&amp; <span class="hljs-built_in">cd</span> ~/local/soft
<span class="hljs-comment"># 下载编译好的 go1.22 的程序包</span>
wget https://dl.google.com/go/go1.22.0.freebsd-amd64.tar.gz
<span class="hljs-comment"># 解压</span>
tar -xzvf go1.22.0.freebsd-amd64.tar.gz
<span class="hljs-comment"># 删除压缩文件</span>
<span class="hljs-built_in">rm</span> go1.22.0.freebsd-amd64.tar.gz
<span class="hljs-comment"># 修改 .profile 文件</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">'export PATH=~/local/soft/go/bin:$PATH'</span> &gt;&gt; ~/.profile
<span class="hljs-comment"># 使 .profile 的修改生效</span>
<span class="hljs-built_in">source</span> ~/.profile
<span class="hljs-comment"># 检查 go 版本</span>
go version
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<h1 id="部署自己的应用"><a href="#部署自己的应用" class="headerlink" title="部署自己的应用"></a>部署自己的应用</h1><blockquote>
<p>关于设定 PHP 版本、插件、参数等配置均可参考文档的 <a href="https://docs.serv00.com/htaccess/">.htaccess</a> 部分进行配置，由于 PHP 的应用部署实在是太简单，故本文不会过多介绍。</p>
</blockquote>
<h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p>实际上在 serv00 的<a href="https://docs.serv00.com/">文档</a>中有搭建网站的示例，没错，示例就有 WordPress ，实际上 WordPress 确实可以搭建，十分简单好用。这里不做过多介绍，按照文档一步步操作即可。</p>
<p>除了 WordPress 外，文档中还详细介绍了 Redis、Memcached、Imapsync、WP-CLI、Tomcat 等服务的搭建方法，有需求的都可以照着抄。</p>
<h2 id="KodBox"><a href="#KodBox" class="headerlink" title="KodBox"></a>KodBox</h2><p>虽然 Serv00 能够部署 KodBox，但是实在是不太好用。最直观的感受就是卡，因为 KodBox 运行期间需要调用多个 PHP 组件，而 Serv00 限制同时处理三个 PHP 进程，所以显得特别慢。其次， Serv00 没有 Root 权限，部分 PHP 插件没有安装，也无法安装，导致有一些 KodBox 的插件无法正常运行。</p>
<p>当然如果只是图新奇搭一个玩玩，也是可以的。下面是步骤：</p>
<p>首先在 Panel 中 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>PHP</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 安装KodBox</span>
bash &lt;(curl -s https:<span class="hljs-regexp">//</span>pan.rappit.site<span class="hljs-regexp">/d/</span>shell<span class="hljs-regexp">/kodbox1.49/</span>serv00-kodbox-install.sh)
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>AWK</div></td></tr></tbody></table>

<p>然后去 Panel 中的 MySQL 选项卡，新建数据库和用户，用以接入 KodBox 。再去 WWW Websites 选项卡中找到 用户名.serv00.net ，点击右侧的 Manage &gt; Details 进入设置，把 GZIP compression、Allow PHP eval() function、Allow PHP exec() function 三个功能打开。</p>
<p>然后使用浏览器访问你的 KodBxo 的域名，进行安装配置即可。初次启动需要较长的时间，请耐心等待。</p>
<h2 id="Lsky-Pro"><a href="#Lsky-Pro" class="headerlink" title="Lsky-Pro"></a><a href="https://github.com/lsky-org/lsky-pro">Lsky-Pro</a></h2><p>一开始看<a href="https://docs.lsky.pro/">兰空图床的文档</a>没看到 webdav 功能的相关介绍，只看到几个我都不用的存储介质，遂不感兴趣的搁置了，然而群友近日又提起，我打开 GitHub 才发现首页有个 Commit 的标题就是 webdav 相关，即兰空图床支持 webdav 。于是我便部署了一下，体验感觉还不错，简单易用。</p>
<p>本来无意在本篇文章再多写 PHP 相关的站点部署，因为过于简单。但是奈何群友有需求，遂做个简单的步骤记录：</p>
<p>首先在 Panel 中 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>PHP</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着SSH登入，并进入刚刚你新建的域名目录下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 下载图床应用</span>
release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/lsky<span class="hljs-literal">-org</span>/lsky<span class="hljs-literal">-pro</span>/releases/latest)
asset_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$release_info</span>"</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">'.assets[] | select(.name != "source code") | .browser_download_url'</span>)
<span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-literal">-o</span> temp.zip <span class="hljs-string">"<span class="hljs-variable">$asset_url</span>"</span> &amp;&amp; unzip <span class="hljs-literal">-q</span> temp.zip &amp;&amp; <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> temp.zip
<span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> public_html &amp;&amp; ln <span class="hljs-literal">-s</span> <span class="hljs-string">"<span class="hljs-variable">$PWD</span>/public"</span> <span class="hljs-string">"<span class="hljs-variable">$PWD</span>/public_html"</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>POWERSHELL</div></td></tr></tbody></table>

<p>接着在 Panel 中 WWW websites 选项卡内，点击自己刚刚创建的用于部署 Lsky-Pro 的域名的 Manage &gt; Details ，在 <strong>Open Basedir directories</strong> 的最末添加：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:/usr/home/</span>用户名/domains/xxx.<span class="hljs-title class_">USERNAME</span>.serv00.net
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ELIXIR</div></td></tr></tbody></table>

<blockquote>
<p>记得把用户名和最末的域名换成自己的。</p>
</blockquote>
<p>然后把 <strong>GZIP compression</strong> 、<strong>Allow PHP eval() function</strong> 、<strong>Allow PHP exec() function</strong> 都打开，点击 save changes 保存。</p>
<p>然后去 Panel 中的 MySQL 选项卡，新建数据库和用户，用以接入 Lsky-Pro 。</p>
<p>然后使用浏览器访问你的 Lsky-Pro 的域名，进行安装配置即可。</p>
<blockquote>
<p>上面的应用不需要占用端口。</p>
</blockquote>
<hr>
<blockquote>
<p>下面的应用每一个都能够 &#x2F; 需要占用端口。</p>
</blockquote>
<h2 id="Vless"><a href="#Vless" class="headerlink" title="Vless"></a>Vless</h2><p>这个肯定是第一时间部署的，每次遇到这样的平台，第一时间总是想着能不能搭建节点。</p>
<h3 id="①"><a href="#①" class="headerlink" title="①"></a>①</h3><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Vless 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着SSH登入，并进入刚刚你新建的域名目录下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆源仓库</span>
<span class="hljs-built_in">rm</span> -rf public_html &amp;&amp; git <span class="hljs-built_in">clone</span> https://github.com/qwer-search/serv00-vless public_html &amp;&amp; <span class="hljs-built_in">cd</span> public_html &amp;&amp; <span class="hljs-built_in">rm</span> -f README.md
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>使用vim编辑或者直接去 Panel 中的 File Manager 选项卡在线编辑 <code>app.js</code> 文件，修改端口为刚刚放行的端口。</p>
<p>安装依赖：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>CMAKE</div></td></tr></tbody></table>

<p>安装完毕后，使用pm2启动并守护vless进程：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> app.js <span class="hljs-comment">--name vless</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>LIVECODESERVER</div></td></tr></tbody></table>

<p>接着去你的代理客户端软件中手动添加 vless 配置即可：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>地址</td>
<td>Panel中WWW Websites 选项卡里的你的 Domain name</td>
</tr>
<tr>
<td>端口</td>
<td>你放行的端口</td>
</tr>
<tr>
<td>用户 id</td>
<td>37a0bd7c-8b9f-4693-8916-bd1e2da0a817</td>
</tr>
<tr>
<td>传输协议</td>
<td>ws</td>
</tr>
<tr>
<td>伪装域名</td>
<td>同地址</td>
</tr>
<tr>
<td>ws path</td>
<td>&#x2F;</td>
</tr>
</tbody></table>
<p>上表没有给出的可以不填。</p>
<h3 id="②"><a href="#②" class="headerlink" title="②"></a>②</h3><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Vless 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下，再使用 <code>npm</code> 命令安装 <code>@3Kmfi6HP/nodejs-proxy</code> ：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install @<span class="hljs-number">3</span>Kmfi6HP/nodejs-proxy
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>APACHE</div></td></tr></tbody></table>

<blockquote>
<p>被删库了可以自己换个源安装，比如：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs avrasm">npm --registry http://r.cnpmjs<span class="hljs-meta">.org</span> install <span class="hljs-subst">@3</span>Kmfi6HP/nodejs-proxy
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>AVRASM</div></td></tr></tbody></table>

<p>这个源如果也不行了请自己找其他源替换。</p>
</blockquote>
<p>再使用 pm2 启动：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 记得把 PORT 替换成自己放行的端口。</span>
pm2 <span class="hljs-built_in">start</span> npx <span class="hljs-comment">--name vless -- nodejs-proxy -p PORT</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>LIVECODESERVER</div></td></tr></tbody></table>

<p>接着访问这个刚刚添加的站点，即可在网页上直接获取配置。 <strong>哦对，有个小 <code>bug</code> ，端口需要改成 443 ，而网页中默认给的配置是 80 。</strong></p>
<blockquote>
<p>之所以说这个 <code>npm</code> 包不安全，是因为其配置在网页上都可以看到，而且网页设计不太合理，有一个不带 <code>uuid</code> 的中转页面，所以可以使用 <strong>fofa</strong> 、 <strong>shodan</strong> 等网络空间扫描工具批量扫出来，而且不止 Serv00 一个平台有人使用，如果你感兴趣，你可以去搜搜看，可以收获一大批 Vless 节点。</p>
<p>这里放一个 Serv00 上的，我在 fofa 上搜到的页面作为部署示例：<a href="https://pclwgdwv.serv00.net/">https://pclwgdwv.serv00.net/</a></p>
</blockquote>
<h2 id="Alist"><a href="#Alist" class="headerlink" title="Alist"></a>Alist</h2><p>Alist 官方仓库没有构筑 FreeBSD 系统下能够运行的 Alist 可执行文件，但是我在 Github 上发现了一个使用 Github Workflow 自动构筑 FreeBSD 适用的 Alist 的<a href="https://github.com/uubulb/alist-freebsd">仓库</a>，使用这个仓库就可以很便利的在Serv00上部署 Alist。</p>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Alist 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span></pre></td><td class="code"><pre><code class="hljs vim"># 使用一键命令安装 Alist
wget -O alist-freebsd.<span class="hljs-keyword">sh</span> https://raw.githubusercontent.<span class="hljs-keyword">com</span>/k0baya/alist_repl/main/serv00/alist-freebsd.<span class="hljs-keyword">sh</span> &amp;&amp; <span class="hljs-keyword">sh</span> alist-freebsd.<span class="hljs-keyword">sh</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>VIM</div></td></tr></tbody></table>

<p>在 Panel 中进入 MySQL 选项卡，使用 Add database 功能新建一个数据库。</p>
<blockquote>
<p>密码要求含有大写字母、小写字母和数字三种字符，且长度必须超过6个字符。</p>
</blockquote>
<p>接下来进入 File manager 选项卡，进入 <code>~/domains/xxx.USERNAME.serv00.net/public_html/data</code> 路径，可以看到一个名为 <code>config.json</code> 的文件，右键点击，选择 View&#x2F;Edit &gt; Source Editor ，进行编辑：</p>
<p>我主要修改了 CDN、database、scheme 三个部分，其中CDN可以在 <a href="https://link.zhihu.com/?target=https://alist.nn.ci/zh/config/configuration.html%23cdn">Alist 的官方文档</a>找到，请选择你本地网络连接速度最快的一个。</p>
<p>scheme 部分，我选择修改 adress 为 <code>127.0.0.1</code>本地回环，是为了避免被他人使用 <code>http://ip:port</code>的方式进行访问。至于自己怎么访问，我在本文后面的部分会进行介绍。port 要改成自己前面放行的端口。</p>
<p>database 部分，type 需要改成 <code>mysql</code> ，host 填写你在注册邮件中看到的 mysql 的地址， port 是默认的 3306，用户名、密码、数据库名则按照你创建的情况进行填写。</p>
<blockquote>
<p>最新版本的 Alist 如果不想开启 S3 Server，请把对应的配置文件中的端口配置为 0 。</p>
</blockquote>
<p>改完之后，点击 save 保存，接着回到 SSH 窗口中进行操作：</p>
<p>测试启动 Alist：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs axapta">./alist <span class="hljs-keyword">server</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>AXAPTA</div></td></tr></tbody></table>

<blockquote>
<p>确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p>
</blockquote>
<p>使用 pm2 启动并管理 alist：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./alist <span class="hljs-comment">-- server</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>LIVECODESERVER</div></td></tr></tbody></table>

<blockquote>
<p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p>
</blockquote>
<h2 id="Synctv"><a href="#Synctv" class="headerlink" title="Synctv"></a><a href="https://synctv.wiki/">Synctv</a></h2><p>群友仿照 alist-freebsd 的仓库的 workflow 进行构筑的。部署简单，与 alist 类似。首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Synctv 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 下载可执行文件</span>
release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/shangskr/synctv<span class="hljs-literal">-freebsd</span>/releases/latest)
asset_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$release_info</span>"</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">'.assets[] | select(.name != "source code") | .browser_download_url'</span>)
<span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-literal">-o</span> synctv <span class="hljs-string">"<span class="hljs-variable">$asset_url</span>"</span> &amp;&amp; chmod +x synctv
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>POWERSHELL</div></td></tr></tbody></table>

<p>新建启动脚本：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; start.sh &lt;&lt; EOF
<span class="hljs-comment">#!/bin/sh</span>
<span class="hljs-comment"># 如果不希望被使用 http://ip:port 的方式访问，取消注释下一行</span>
<span class="hljs-comment"># export SYNCTV_SERVER_LISTEN=127.0.0.1</span>
<span class="hljs-comment"># 把下一行的最末的PORT改成自己放行的端口</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNCTV_SERVER_PORT</span>=PORT
exec ./synctv<span class="hljs-built_in"> server </span>--data-dir ./
EOF
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ROUTEROS</div></td></tr></tbody></table>

<p>添加可执行权限：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x start.sh
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>测试运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash">./start.sh
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<blockquote>
<p>确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p>
</blockquote>
<p>使用pm2启动并管理：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./<span class="hljs-built_in">start</span>.sh <span class="hljs-comment">--name synctv</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>LIVECODESERVER</div></td></tr></tbody></table>

<blockquote>
<p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p>
</blockquote>
<h2 id="One-api"><a href="#One-api" class="headerlink" title="One-api"></a>One-api</h2><p>源仓库没有提供freebsd平台的二进制文件，需要自己构建，但是很简单 。我已经写了一个仓库用于自动化构建 freebsd 版本的 one-api 二进制文件，可以直接下载使用。</p>
<blockquote>
<p>如果你想使用 New-API ，可以使用这个仓库<a href="https://github.com/k0baya/new-api-freebsd">k0baya&#x2F;new-api-freebsd</a>，用法与本节介绍的 One-API 基本一致，对比One-API添加了一些更方便的功能。也许之后 One-API 也会加入这些功能。</p>
</blockquote>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 One-API 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载 one-api</span>
release_info=$(curl -s https://api.github.com/repos/k0baya/one-api-freebsd/releases/latest)
asset_url=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$release_info</span>"</span> | jq -r <span class="hljs-string">'.assets[] | select(.name != "source code") | .browser_download_url'</span>)
curl -L -o one-api <span class="hljs-string">"<span class="hljs-variable">$asset_url</span>"</span> &amp;&amp; <span class="hljs-built_in">chmod</span> +x one-api
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>新建启动脚本：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span></pre></td><td class="code"><pre><code class="hljs livecodeserver">cat &gt; <span class="hljs-built_in">start</span>.sh &lt;&lt; <span class="hljs-literal">EOF</span>
<span class="hljs-comment">#!/bin/sh</span>
<span class="hljs-comment"># 如果你有设置主题的需要，可以取消注释下一行，然后按照自己的需求设置。</span>
<span class="hljs-comment"># export THEME="berry"</span>
export TIKTOKEN_CACHE_DIR=<span class="hljs-string">"$PWD"</span>
<span class="hljs-comment"># 把下一行的 PORT 改为自己放行的端口</span>
exec ./<span class="hljs-literal">one</span>-api <span class="hljs-comment">--port PORT --log-dir ./logs</span>
<span class="hljs-literal">EOF</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>LIVECODESERVER</div></td></tr></tbody></table>

<p>添加可执行权限：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x start.sh
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>保存后回到 terminal 中，测试运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash">./start.sh
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<blockquote>
<p>确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p>
</blockquote>
<p>使用pm2启动并管理：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./<span class="hljs-built_in">start</span>.sh <span class="hljs-comment">--name one-api</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>LIVECODESERVER</div></td></tr></tbody></table>

<blockquote>
<p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p>
</blockquote>
<h2 id="Uptime-Kuma"><a href="#Uptime-Kuma" class="headerlink" title="Uptime-Kuma"></a>Uptime-Kuma</h2><p>受限于 FreeBSD 的平台限制，1.23版本内置了 PlayWright ，无法运行，所以只能安装 1.22 版本。切记先去 Panel 中放行 TCP 端口。</p>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Uptime-Kuma 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着 SSH 登入，并进入刚刚你新建的域名目录下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 下载 v1.22.1 版本的源代码</span>
<span class="hljs-attribute">cd</span> ~/domains &amp;&amp; wget https://github.com/louislam/uptime-kuma/archive/refs/tags/<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.zip &amp;&amp; unzip <span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.zip &amp;&amp; rm -rf public_html &amp;&amp; mv -f uptime-kuma-<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span> public_html &amp;&amp; rm -f <span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.zip &amp;&amp; cd public_html
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>APACHE</div></td></tr></tbody></table>

<p>设置生产模式：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs ada">npm ci <span class="hljs-comment">--production</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ADA</div></td></tr></tbody></table>

<p>下载dist文件：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/louislam/u</span>ptime-kuma<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.22.1/</span>dist.tar.gz &amp;&amp; tar -xzvf dist.tar.gz &amp;&amp; rm dist.tar.gz
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>AWK</div></td></tr></tbody></table>

<p>安装补充依赖：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>CMAKE</div></td></tr></tbody></table>

<p>安装过程中多少会有报错，无视就好，实际上最后可以正常运行。内置的Cloudflared反向代理在FreeBSD平台上无法使用，但是可以使用上述的外置的Cloudflared进行反代，使用自己的域名。</p>
<p>测试运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">server</span>/server.js --<span class="hljs-attr">port=</span>PORT
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>CRMSH</div></td></tr></tbody></table>

<blockquote>
<p>记得把PORT替换成你放行的端口。确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p>
</blockquote>
<p>使用pm2管理后台运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs pgsql">pm2 <span class="hljs-keyword">start</span> <span class="hljs-keyword">server</span>/<span class="hljs-keyword">server</span>.js <span class="hljs-comment">--name uptime-kuma -- --port=PORT</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>PGSQL</div></td></tr></tbody></table>

<blockquote>
<p>记得把PORT替换成你放行的端口。</p>
</blockquote>
<blockquote>
<p>如果你不希望自己的Uptime-Kuma被人使用 <code>http://IP:PORT</code>的方式访问，你可以在最后的执行命令添加 <code>--host=127.0.0.1</code>的尾缀，这样就只能通过反向代理的域名进行访问了:</p>
<table><tbody><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start server/server</span><span class="hljs-string">.</span><span class="hljs-comment">js</span> <span class="hljs-literal">--</span><span class="hljs-comment">name uptime</span><span class="hljs-literal">-</span><span class="hljs-comment">kuma</span> <span class="hljs-literal">--</span> <span class="hljs-literal">--</span><span class="hljs-comment">port=PORT</span> <span class="hljs-literal">--</span><span class="hljs-comment">host=127</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">1</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BRAINFUCK</div></td></tr></tbody></table>
</blockquote>
<blockquote>
<p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p>
</blockquote>
<h2 id="Bingo（暂时无法正常使用）"><a href="#Bingo（暂时无法正常使用）" class="headerlink" title="Bingo（暂时无法正常使用）"></a>Bingo（暂时无法正常使用）</h2><p>先放行一个端口。在 Panel 中进入 File manager 选项卡，点击左侧的 My Files 进入你的用户根目录，找到 <code>.profile</code>文件，右键选择 View&#x2F;Edit &gt; Choose other &gt;Source Editor 进行编辑，在最末加上以上两行并保存：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> node=<span class="hljs-string">'node20'</span>
<span class="hljs-built_in">alias</span> npm=<span class="hljs-string">'npm20'</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>应用更改：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.profile
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<blockquote>
<p>先新建一个目录用于存放 Bingo 的相关文件，进入目录后执行下述操作。</p>
</blockquote>
<p>下载源码：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/weaigc/bingo
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>CRMSH</div></td></tr></tbody></table>

<p>进入源码所在目录：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> bingo
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>安装依赖：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs cmake">npm20 <span class="hljs-keyword">install</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>CMAKE</div></td></tr></tbody></table>

<p>下载build好的 <code>.next</code>资源：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs awk">wget -O <span class="hljs-keyword">next</span>.tar.gz https:<span class="hljs-regexp">//</span>pan.saika.free.hr<span class="hljs-regexp">/d/</span>local/<span class="hljs-keyword">next</span>.tar.gz &amp;&amp; tar -xzvf <span class="hljs-keyword">next</span>.tar.gz &amp;&amp; rm <span class="hljs-keyword">next</span>.tar.gz
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>AWK</div></td></tr></tbody></table>

<p>添加环境变量文件：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> .env.example .<span class="hljs-built_in">env</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>接着在 Panel 中进入 File manager 选项卡，进入Bingo 源码所在的目录，找到 <code>server.js</code>文件，右键选择 View&#x2F;Edit &gt; Choose other &gt;Source Editor 进行编辑，修改第7行中的端口为你放行的端口。再编辑 <code>.env</code>文件，添加你的 <code>BING_HEADER</code>。</p>
<p>测试启动：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs routeros">npm20 <span class="hljs-built_in">run</span> start
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ROUTEROS</div></td></tr></tbody></table>

<blockquote>
<p>确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p>
</blockquote>
<p>使用pm2启动并管理：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start npm</span> <span class="hljs-literal">--</span><span class="hljs-comment">name bingo</span> <span class="hljs-literal">--</span> <span class="hljs-comment">run start</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BRAINFUCK</div></td></tr></tbody></table>

<h2 id="Refresh-gpt-chat"><a href="#Refresh-gpt-chat" class="headerlink" title="Refresh-gpt-chat"></a>Refresh-gpt-chat</h2><p>用来对接 ninja、warpgpt 等能够使用 access_Token 作为 API Key 请求 GPT 的工具，以使用永久有效期的 Refresh_token 来获取更好的体验。</p>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Refresh-gpt-chat 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 下载 refresh-gpt-chat</span>
<span class="hljs-attribute">wget</span> -O refresh-gpt-chat.jar https://github.com/Yanyutin753/refresh-gpt-chat/releases/download/v0.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>/refresh-gpt-chat-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>-SNAPSHOT.jar
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>APACHE</div></td></tr></tbody></table>

<p>使用 pm2 启动：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs jboss-cli">pm2 start java19 <span class="hljs-params">--name</span> refresh-gpt-chat -- -jar refresh-gpt-chat.jar <span class="hljs-params">--server</span>.port=端口 <span class="hljs-params">--server</span>.servlet.context-path=/ <span class="hljs-params">--getAccessTokenUrl=https</span>:<span class="hljs-string">//</span>你的ninja地址<span class="hljs-string">/auth/refresh_token</span> <span class="hljs-params">--chatUrl=https</span>:<span class="hljs-string">//</span>你的ninja地址<span class="hljs-string">/v1/chat/completions</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>JBOSS-CLI</div></td></tr></tbody></table>

<p>再套域名，接下来就可以直接使用 <code>https://你套的域名/v1/chat/completions/</code> 当作API端点，使用 <code>refresh_token</code> 做 API_Keys ，使用 ChatGPT 了。</p>
<p>然后在 one-api 中添加自定义渠道， <code>Base URL</code> 填写你 <code>https://你套的域名</code>，模型填入你的 refresh_token 对应的账号所支持的模型，如果和我一样手持大把 3.5 的账号想用来做 API 用，可以选择全部 GPT3.5 的相关模型，然后在 <code>模型重定向</code>中填入以下内容：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span></pre></td><td class="code"><pre><code class="hljs subunit">&#123;
  "gpt<span class="hljs-string">-3</span>.5-turbo<span class="hljs-string">-0301</span>": "gpt<span class="hljs-string">-3</span>.5-turbo",
  "gpt<span class="hljs-string">-3</span>.5-turbo<span class="hljs-string">-0613</span>": "gpt<span class="hljs-string">-3</span>.5-turbo",
  "gpt<span class="hljs-string">-3</span>.5-turbo<span class="hljs-string">-16</span>k": "gpt<span class="hljs-string">-3</span>.5-turbo",
  "gpt<span class="hljs-string">-3</span>.5-turbo<span class="hljs-string">-16</span>k<span class="hljs-string">-0613</span>": "gpt<span class="hljs-string">-3</span>.5-turbo",
  "gpt<span class="hljs-string">-3</span>.5-turbo<span class="hljs-string">-1106</span>": "gpt<span class="hljs-string">-3</span>.5-turbo",
  "gpt<span class="hljs-string">-3</span>.5-turbo-instruct": "gpt<span class="hljs-string">-3</span>.5-turbo"
&#125;
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>SUBUNIT</div></td></tr></tbody></table>

<p>密钥填写你的 <code>refresh_token</code>即可，如果你有多个账号，可以将批量勾选上，然后一行写一个 <code>refresh_token</code>。</p>
<blockquote>
<p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p>
</blockquote>
<h2 id="Gpt4-copilot-java"><a href="#Gpt4-copilot-java" class="headerlink" title="Gpt4-copilot-java"></a><a href="https://github.com/Yanyutin753/gpt4-copilot-java-sh">Gpt4-copilot-java</a></h2><p>支持 cocopilot 的 ccu 和 copilot 的 ghu 调用 copilot 转 GPT-4 的接口转换工具。 Java 写的，可以在 Serv00 运行。</p>
<blockquote>
<p>目前更推荐这个方法：<a href="https://blog.rappit.site/2024/02/07/copilot-to-api-free-temp/#lvguanjun-copilot-to-chatgpt4">lvguanjun&#x2F;copilot-to-chatgpt4</a> 比起 Gpt4-copilot-java 更轻量更强大。</p>
</blockquote>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Gpt4-copilot-java 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 下载 fat jar 包</span>
RELEASE_INFO=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-string">"https://api.github.com/repos/Yanyutin753/gpt4-copilot-java-sh/releases/latest"</span>)
JAR_DOWNLOAD_URL=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$RELEASE_INFO</span>"</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">'.assets[] | select(.name|test(".jar$")) | .browser_download_url'</span>)
<span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-literal">-o</span> gpt4<span class="hljs-literal">-copilot-java</span>.jar <span class="hljs-string">"<span class="hljs-variable">$JAR_DOWNLOAD_URL</span>"</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>POWERSHELL</div></td></tr></tbody></table>

<p>测试运行：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 把PORT改为自己放行的端口，最后的server.servlet.context-path参数可以改成自己喜欢的尾缀</span>
java19 -jar gpt4-copilot-java.jar --server.<span class="hljs-attribute">port</span>=PORT --server.servlet.<span class="hljs-attribute">context-path</span>=/
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ROUTEROS</div></td></tr></tbody></table>

<blockquote>
<p>测试没有问题之后，按 <code>Ctrl+c</code>即可停止运行。</p>
</blockquote>
<p>使用 pm2 启动并管理：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs stylus">pm2 start java19 <span class="hljs-attr">--name</span> gpt4-copilot-java -- -jar gpt4-copilot-java<span class="hljs-selector-class">.jar</span> <span class="hljs-attr">--server</span>.port=PORT <span class="hljs-attr">--server</span><span class="hljs-selector-class">.servlet</span>.context-path=/
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>STYLUS</div></td></tr></tbody></table>

<blockquote>
<p>始皇的公车：ghu_ThisIsARealFreeCopilotKeyByCoCopilot （已失效）</p>
<p>免费公车白嫖请求示例：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span></pre></td><td class="code"><pre><code class="hljs jboss-cli">curl <span class="hljs-params">--location</span> 'http<span class="hljs-params">(s)</span>:<span class="hljs-string">//ip</span><span class="hljs-function">:port_or_URL</span>/cocopilot/v1/chat/completions' 
<span class="hljs-params">--header</span> 'Content-Type: application/json' 
<span class="hljs-params">--header</span> 'Authorization: Bearer ghu_ThisIsARealFreeCopilotKeyByCoCopilot' 
<span class="hljs-params">--data</span> '&#123;
<span class="hljs-string">"model"</span>: <span class="hljs-string">"gpt-4"</span>,
<span class="hljs-string">"messages"</span>: [&#123;<span class="hljs-string">"role"</span>: <span class="hljs-string">"user"</span>, <span class="hljs-string">"content"</span>: <span class="hljs-string">"鲁迅打周树人"</span>&#125;]
&#125;'
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>JBOSS-CLI</div></td></tr></tbody></table>
</blockquote>
<blockquote>
<p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p>
</blockquote>
<h2 id="Zfile"><a href="#Zfile" class="headerlink" title="Zfile"></a><a href="https://zfile.vip/">Zfile</a></h2><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Zfile 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 下载 fat jar 包</span>
wget --no-check-certificate -O zfile.jar https:<span class="hljs-regexp">//</span>c.jun6.net<span class="hljs-regexp">/ZFILE/</span>zfile-release.jar
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>AWK</div></td></tr></tbody></table>

<p>测试运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs routeros">java19 -jar -Duser.<span class="hljs-attribute">timezone</span>=Asia/Shanghai zfile.jar --zfile.log.<span class="hljs-attribute">path</span>=<span class="hljs-variable">$PWD</span>/logs --zfile.db.<span class="hljs-attribute">path</span>=<span class="hljs-variable">$PWD</span>/zfile --server.<span class="hljs-attribute">port</span>=PORT
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ROUTEROS</div></td></tr></tbody></table>

<blockquote>
<p>记得把端口改成自己的。测试没有问题之后，按 <code>Ctrl+c</code>即可停止运行。</p>
</blockquote>
<p>使用pm2启动并管理：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs routeros">pm2 start java19 --name zfile -- -jar -Duser.<span class="hljs-attribute">timezone</span>=Asia/Shanghai zfile.jar --zfile.log.<span class="hljs-attribute">path</span>=<span class="hljs-variable">$PWD</span>/logs --zfile.db.<span class="hljs-attribute">path</span>=<span class="hljs-variable">$PWD</span>/zfile --server.<span class="hljs-attribute">port</span>=PORT
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ROUTEROS</div></td></tr></tbody></table>

<blockquote>
<p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p>
</blockquote>
<h2 id="Halo"><a href="#Halo" class="headerlink" title="Halo"></a>Halo</h2><blockquote>
<p><strong>慎重部署，内存会超100%，不知道会不会封号</strong></p>
</blockquote>
<p><a href="https://github.com/halo-dev/halo">halo</a> 自从升级 2.0 版本开始，很长时间内都没有提供构筑好的 jar 包，甚至于在GitHub上都出现了第三方的，使用 GitHub workflow 自动化构筑 jar 包的<a href="https://github.com/Lu7fer/Jar4Halo">仓库</a>。但是，自从<a href="https://github.com/halo-dev/halo/releases/tag/v2.12.0-alpha.1">2.12.0-alpha.1版本</a>开始，halo 的官方仓库又开始提供构筑好的 jar 包了，刚好这些天在玩 Serv00 ，遂尝试部署了一下，成功。现记录一下：</p>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Halo 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>并在 MySQL 选项卡中中新建 MySQL 数据库，用于填入接入 Halo 。</p>
<p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 下载jar包</span>
release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/halo<span class="hljs-literal">-dev</span>/halo/releases/latest)
jar_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$release_info</span>"</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">'.assets[] | select(.name | endswith(".jar")) | .browser_download_url'</span>)
<span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-string">"<span class="hljs-variable">$jar_url</span>"</span> <span class="hljs-literal">-o</span> halo.jar
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>POWERSHELL</div></td></tr></tbody></table>

<p>在 <code>halo.jar</code> 所在路径下新建 <code>.halo2</code> 文件夹，进入其中，新建文件 <code>application.yaml</code> 然后并配置其内容：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 新建文件夹</span>
<span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">.halo2</span>
<span class="hljs-comment"># 新建并填入配置</span>
<span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">.halo2/application.yaml</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span>
<span class="hljs-attr">server:</span>
  <span class="hljs-attr">port:</span> <span class="hljs-string">你在面板中放行的端口</span>
  <span class="hljs-comment"># Response data gzip.</span>
  <span class="hljs-attr">compression:</span>
    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span>
<span class="hljs-attr">spring:</span>
  <span class="hljs-comment">#sql:</span>
  <span class="hljs-comment">#  init.platform: mysql</span>
  <span class="hljs-attr">r2dbc:</span>
    <span class="hljs-attr">url:</span> <span class="hljs-string">r2dbc:pool:mysql://数据库地址:3306/数据库名</span>
    <span class="hljs-attr">username:</span> <span class="hljs-string">数据库用户名</span>
    <span class="hljs-attr">password:</span> <span class="hljs-string">数据库密码</span>
<span class="hljs-attr">halo:</span>
  <span class="hljs-comment"># Your admin client path is https://your-domain/&#123;admin-path&#125;</span>
  <span class="hljs-attr">admin-path:</span> <span class="hljs-string">admin</span>
  <span class="hljs-comment"># memory or level</span>
  <span class="hljs-attr">cache:</span> <span class="hljs-string">level</span>
<span class="hljs-string">EOF</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>YAML</div></td></tr></tbody></table>

<p>在 <code>halo.jar</code> 所在路径下新建 <code>run.sh</code> 运行脚本：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; run.sh &lt;&lt; EOF
<span class="hljs-comment">#!/bin/bash</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">HALO_WORK_DIR</span>=<span class="hljs-string">"<span class="hljs-variable">$PWD</span>/.halo2"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">HALO_EXTERNAL_URL</span>=<span class="hljs-string">"https://你的域名"</span>
exec java17 -server -Xms128m -Xmx256m -jar -Duser.<span class="hljs-attribute">timezone</span>=Asia/Shanghai <span class="hljs-variable">$PWD</span>/halo.jar --spring.config.<span class="hljs-attribute">additional-location</span>=<span class="hljs-variable">$PWD</span>/.halo2/application.yaml
EOF
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ROUTEROS</div></td></tr></tbody></table>

<p>测试运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs stata">chmod +x <span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> &amp;&amp; ./<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>STATA</div></td></tr></tbody></table>

<blockquote>
<p>确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p>
</blockquote>
<p>使用pm2管理运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs stata">chmod +x <span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> &amp;&amp; pm2 start ./<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> --name halo
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>STATA</div></td></tr></tbody></table>

<blockquote>
<p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p>
</blockquote>
<h2 id="Go-proxy-bingai"><a href="#Go-proxy-bingai" class="headerlink" title="Go-proxy-bingai"></a>Go-proxy-bingai</h2><p><a href="https://github.com/adams549659584/go-proxy-bingai">这个仓库</a>是 Bingo 的前身，当初玩 Replit 时我便有在使用，只可惜作者早已弃坑，所以当初我才找到了当时还能用的 Bingo 使用。</p>
<p>在 Bingo 也长期未更新，无法正常使用的如今，我的目光转向了另一个<a href="https://github.com/Harry-zklcdc/go-proxy-bingai">二改仓库</a>。Harry-zklcdc 维护的 Go-proxy-bingai 的分支仓库目前还能够正常使用。而且在与开发者反馈了几个 bug 之后，开发者都会花时间认真复现，并快速修复，其体验实在是不错。</p>
<p>虽然原仓库的 Release 中并未提供 FreeBSD 系统适用的二进制文件，但是我们能够自己构建。我已经构建了一份放在这篇博客底部的QQ群的群文件中 。我写了一个仓库用于自动化构建 FreeBSD 版本的 go-proxy-bingai ，可以从我的仓库下载使用。 作者已经开始提供 FreeBSD 的构建，故我的仓库已经存档。</p>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Go-proxy-bingai 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载可执行文件</span>
release_info=$(curl -s https://api.github.com/repos/Harry-zklcdc/go-proxy-bingai/releases | jq -r <span class="hljs-string">'[.[] | select(.prerelease==false)][0]'</span>)
download_url=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$release_info</span>"</span> | jq -r <span class="hljs-string">'.assets[] | select(.name=="go-proxy-bingai-freebsd-amd64.tar.gz") | .browser_download_url'</span>)
curl -L <span class="hljs-string">"<span class="hljs-variable">$download_url</span>"</span> -o go-proxy-bingai-freebsd-amd64.tar.gz&amp;&amp; tar -xzf go-proxy-bingai-freebsd-amd64.tar.gz &amp;&amp; <span class="hljs-built_in">rm</span> go-proxy-bingai-freebsd-amd64.tar.gz &amp;&amp; <span class="hljs-built_in">chmod</span> +x go-proxy-bingai
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>新建启动脚本：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; entrypoint.sh &lt;&lt; EOF
<span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>
<span class="hljs-meta prompt_"># </span><span class="language-bash">被注释的环境变量请根据自己的需求，按照原仓库的 wiki 中的介绍进行填入。</span>
export BYPASS_SERVER="https://bypass.zklcdc.xyz"  # 作者本人的公共bypass服务，可用性未知。
<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> Go_Proxy_BingAI_USER_TOKEN_1=<span class="hljs-string">"xxx"</span></span>
<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> Go_Proxy_BingAI_USER_TOKEN_2=<span class="hljs-string">"xxx"</span></span>
<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> USER_KievRPSSecAuth=<span class="hljs-string">"xxx"</span></span>
<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> USER_RwBf=<span class="hljs-string">"xxx"</span></span>
<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> USER_MUID=<span class="hljs-string">"xxx"</span></span>
<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> APIKEY=<span class="hljs-string">"sk-xxx"</span></span>
<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> BING_BASE_URL=<span class="hljs-string">"https://www.bing.com"</span></span>
<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> SYDNEY_BASE_URL=<span class="hljs-string">"https://sydney.bing.com"</span></span>
<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> HTTP_PROXY=<span class="hljs-string">"http://172.17.0.1:18080"</span></span>
<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> HTTPS_PROXY=<span class="hljs-string">"http://172.17.0.1:18080"</span></span>
<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> Go_Proxy_BingAI_AUTH_KEY=<span class="hljs-string">"xxx"</span></span>
<span class="hljs-meta prompt_"># </span><span class="language-bash">请把下一行双引号中的内容替换成你放行的端口。</span>
export PORT="xxx"
chmod +x go-proxy-bingai &amp;&amp; exec ./go-proxy-bingai
EOF
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>SHELL</div></td></tr></tbody></table>

<p>运行：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 测试运行</span>
<span class="hljs-built_in">chmod</span> +x entrypoint.sh &amp;&amp; ./entrypoint.sh
<span class="hljs-comment"># 使用 pm2 管理运行</span>
pm2 start ./entrypoint.sh --name go-proxy-bingai
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<blockquote>
<p><strong>请注意，如果你需要使用其 web 功能，而不仅仅是 api 功能，请务必使用 https 访问，不然无法打开。你可以选择使用面板自带的 proxy 添加域名并申请 ssl 证书，亦或者直接使用 cloudflared 隧道。</strong></p>
</blockquote>
<blockquote>
<p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p>
</blockquote>
<h2 id="Pentaract"><a href="#Pentaract" class="headerlink" title="Pentaract"></a><a href="https://github.com/Dominux/Pentaract">Pentaract</a></h2><blockquote>
<p>不建议使用，目前 Bug 众多，而且对 Telegram 账号有一定要求，目前暂不清楚 Telegram 限制账号的评定标准。</p>
</blockquote>
<p>可以自行构建或者使用使用我构建的成品。由于该应用需要使用具有超级管理员权限的 PostgreSQL ，故不可使用 Serv00 自带的 PostgreSQL ，需要远程连接。</p>
<p>编译成品下载地址：<a href="https://pan.rappit.site/download/%E6%8D%AF%E9%A5%AC/pentaract-freebsd_X64.tar.gz">pentaract-freebsd_X64.tar.gz</a></p>
<p>前端构建简单，这里不再赘述，而且由于其 <code>Dockerfile</code> 内构建前端使用的是 Node.js 21 而目前 FreeBSD Port 最高只有 Node.js 20 ，故不推荐在 FreeBSD 上直接构建，可以使用 GItHub Actions 进行构建，或是自己在 Node.js 21 的环境下构建再复制，甚至干脆直接从作者预构建的 Docker 镜像内打包出来使用。（经过测试，使用 Nodejs20 构建也可以正常使用。）</p>
<p>Serv00 上的构建法：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换 Node.js 版本为 Nodejs20</span>
<span class="hljs-built_in">alias</span> node=node20
<span class="hljs-built_in">alias</span> npm=npm20
<span class="hljs-comment"># 全局安装 pnpm</span>
npm install -g pnpm
<span class="hljs-built_in">source</span> ~/.bashrc
<span class="hljs-comment"># 构建前端</span>
pnpm install
VITE_API_BASE=<span class="hljs-string">'/api'</span> pnpm run build
<span class="hljs-comment"># 移动构建产物到工作目录</span>
<span class="hljs-built_in">mkdir</span> -p ~/pentaract/ui &amp;&amp; <span class="hljs-built_in">cp</span> -R ./dist/* ~/pentaract/ui
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>后端的构建，可以使用 GItHub Actions ，或者本地 FreeBSD 虚拟机，甚至直接在 Serv00 上构建。这里记录一下在 Serv00 上构建的方法：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆仓库到 Serv00 上</span>
git <span class="hljs-built_in">clone</span> https://github.com/Dominux/Pentaract &amp;&amp; <span class="hljs-built_in">cd</span> Pentaract/pentaract
<span class="hljs-comment"># 构建</span>
LIBCLANG_PATH=/usr/local/llvm16/lib cpuset -l 0 cargo build --release
<span class="hljs-comment"># 移动构建产物到工作目录</span>
<span class="hljs-built_in">mkdir</span> -p ~/pentaract &amp;&amp; <span class="hljs-built_in">cp</span> ./target/release/pentaract ~/pentaract/pentaract
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>然后去 <a href="https://supabase.com/">supabase</a> 注册一个免费的PostgreSQL ，记录下数据库的用户名、密码、数据库名、地址，用于后续填入环境变量。</p>
<p>接着在 <code>~/pentaract</code> 路径下新建一个启动脚本，按照要求填入所有的环境变量：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; start.sh &lt;&lt; EOF
<span class="hljs-comment">#!/bin/bash</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">PORT</span>=xxxx
<span class="hljs-built_in">export</span> <span class="hljs-attribute">WORKERS</span>=4
<span class="hljs-built_in">export</span> <span class="hljs-attribute">CHANNEL_CAPACITY</span>=32
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SUPERUSER_EMAIL</span>=xxxx@xxxx.com
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SUPERUSER_PASS</span>=xxxx
<span class="hljs-built_in">export</span> <span class="hljs-attribute">ACCESS_TOKEN_EXPIRE_IN_SECS</span>=1800
<span class="hljs-built_in">export</span> <span class="hljs-attribute">REFRESH_TOKEN_EXPIRE_IN_DAYS</span>=14
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SECRET_KEY</span>=xxx
<span class="hljs-built_in">export</span> <span class="hljs-attribute">TELEGRAM_API_BASE_URL</span>=https://api.telegram.org
<span class="hljs-built_in">export</span> <span class="hljs-attribute">DATABASE_USER</span>=xxxx
<span class="hljs-built_in">export</span> <span class="hljs-attribute">DATABASE_PASSWORD</span>=xxxx
<span class="hljs-built_in">export</span> <span class="hljs-attribute">DATABASE_NAME</span>=xxxx
<span class="hljs-built_in">export</span> <span class="hljs-attribute">DATABASE_HOST</span>=xxxx
<span class="hljs-built_in">export</span> <span class="hljs-attribute">DATABASE_PORT</span>=5432
chmod +x pentaract &amp;&amp; exec ./pentaract
EOF
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ROUTEROS</div></td></tr></tbody></table>

<p>给启动脚本赋权：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x start.sh
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>前端的 <code>index-22eec6d1.js</code> 文件内的 <code>http://localhost:8000</code> 需要更改为 serv00 的 url 或者 ip:port 。你可以去文件管理中编辑，查找替换即可，也可以使用sed命令简单更改一下： 已经重新构建前端并替换，现无需此步。</p>
<p>测试运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash">./start.sh
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>使用 pm2 管理：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./<span class="hljs-built_in">start</span>.sh <span class="hljs-comment">--name pentaract</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>LIVECODESERVER</div></td></tr></tbody></table>

<h2 id="OneList"><a href="#OneList" class="headerlink" title="OneList"></a><a href="https://github.com/msterzhang/onelist">OneList</a></h2><p>原作者似乎已经弃坑，故我的仓库没有做自动检测构建。但是体验还不错，有 Emby 既视感了，配合小雅的 Alist 岂不美哉。</p>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 OneList 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载 OneList</span>
wget https://github.com/k0baya/onelist-freebsd/releases/download/v2.0.5/onelist
<span class="hljs-comment"># 初始化配置</span>
<span class="hljs-built_in">chmod</span> +x onelist &amp;&amp; ./onelist -run config
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>接着回到 Panel 中，进入File manager选项卡，进入 OneList 所在路径，可以看到一个名为 <code>config.env</code> 的文件，右键点击，选择View&#x2F;Edit &gt; Source Editor，进行编辑：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 服务设置</span>
<span class="hljs-comment"># 注意要改为未被占用的端口</span>
<span class="hljs-attr">API_PORT</span>=<span class="hljs-number">5245</span>
<span class="hljs-attr">FaviconicoUrl</span>=https://wework.qpic.cn/wwpic/<span class="hljs-number">818353</span>_fizV30xbQCGPQRP_1677394564/<span class="hljs-number">0</span>
<span class="hljs-attr">API_SECRET</span>=fRVvjcNd11gYGI85StVaeCtPVSmJTRRE
<div></div>
<span class="hljs-comment"># Env有两种模式，Debug及Release，主要用在数据库为mysql时候，需要注意修改Env环境和mysql密码对应</span>
<span class="hljs-attr">Env</span>=Debug
<div></div>
<span class="hljs-comment"># 管理员账户设置，用于初始化管理员账户</span>
<span class="hljs-attr">UserEmail</span>=xxxx.@qq.com
<span class="hljs-attr">UserPassword</span>=xxxxx
<div></div>
<span class="hljs-comment"># 数据库设置</span>
<span class="hljs-attr">DB_DRIVER</span>=sqlite
<span class="hljs-attr">DB_USER</span>=root
<span class="hljs-attr">DbName</span>=<span class="hljs-literal">on</span>elist
<div></div>
<span class="hljs-comment"># 如果上面DB_DRIVER类型为mysql，就需要正确填下以下参数</span>
<span class="hljs-attr">DB_PASSWORD_Debug</span>=<span class="hljs-number">123456</span>
<span class="hljs-attr">DB_PASSWORD_Release</span>=<span class="hljs-number">123456</span>
<div></div>
<span class="hljs-comment"># TheMovieDb Key</span>
<span class="hljs-comment"># 在https://www.themoviedb.org网站申请</span>
<span class="hljs-attr">KeyDb</span>=<span class="hljs-number">22</span>f10ca52f109158ac7fe064ebbcf697
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>INI</div></td></tr></tbody></table>

<p>你可以按照自己的需求配置端口、管理员账户、数据库。 MySQL 性能更好哦~</p>
<p>测试运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs routeros">./onelist -<span class="hljs-built_in">run</span> server
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ROUTEROS</div></td></tr></tbody></table>

<p>使用 pm2 管理：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./onelist <span class="hljs-comment">-- -run server</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>LIVECODESERVER</div></td></tr></tbody></table>

<h2 id="WarpGPT"><a href="#WarpGPT" class="headerlink" title="WarpGPT"></a><a href="https://github.com/oliverkirk-sudo/WarpGPT">WarpGPT</a></h2><p>这个没什么多说的，可以使用 access_Token 作为 API Key 请求 ChatGPT 接口，也就是所谓的 chat2api 。配合前文的 Refresh-gpt-chat 就可以把永久有效期的 Refresh_token 作为 API Key 来使用，十分的好用。</p>
<p>源仓库没有 Release ，故<a href="https://github.com/k0baya/warpgpt-freebsd">我的仓库</a>没有做自动检测构建。如果有更新需求需要手动触发 workflow 。你有需要也可以自己fork一份然后手动触发 workflow 。</p>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 WarpGPT 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 下载二进制文件</span>
wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/k0baya/</span>warpgpt-freebsd<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/latest/</span>warpgpt &amp;&amp; chmod +x warpgpt
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>AWK</div></td></tr></tbody></table>

<p>添加启动脚本：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span></pre></td><td class="code"><pre><code class="hljs d">cat &gt; start.sh &lt;&lt; EOF
<span class="hljs-meta">#!/bin/bash</span>
<span class="hljs-keyword">export</span> TMPDIR=<span class="hljs-string">"$PWD"</span>
chmod +x warpgpt &amp;&amp; exec ./warpgpt
EOF
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>D</div></td></tr></tbody></table>

<p>给启动脚本赋权：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x start.sh
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>配置环境变量：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span></pre></td><td class="code"><pre><code class="hljs makefile">cat &gt; .env &lt;&lt; EOF
proxy = <span class="hljs-string">"http://127.0.0.1:10809"</span>   <span class="hljs-comment">#代理地址 （选填）</span>
port = 5000                        <span class="hljs-comment">#程序运行端口</span>
host = '127.0.0.1'                 <span class="hljs-comment">#可访问ip，0.0.0.0允许所有ip</span>
verify = false                     <span class="hljs-comment">#是否对访问进行验证</span>
auth_key = <span class="hljs-string">""</span>                      <span class="hljs-comment">#若开启访问验证，则需要在Header中添加AuthKey字段，且值为auth_key的值才能访问 （选填）</span>
arkose_must = false                <span class="hljs-comment">#是否强行gpt3.5进行验证</span>
OpenAI_HOST = <span class="hljs-string">"chat.openai.com"</span>    <span class="hljs-comment">#openai网页api接口地址 （选填）</span>
openai_api_host = <span class="hljs-string">"api.openai.com"</span> <span class="hljs-comment">#openai官方api接口 （选填）</span>
proxy_pool_url=<span class="hljs-string">""</span>                  <span class="hljs-comment">#ipidea代理池链接 （选填）</span>
<span class="hljs-comment">#示例http://api.proxy.ipidea.io/getProxyIp?num=10&amp;return_type=json&amp;lb=1&amp;sb=0&amp;flow=1&amp;regions=us&amp;protocol=http，根据访问频次设置num值</span>
log_level = <span class="hljs-string">"debug"</span>                <span class="hljs-comment">#日志等级</span>
<div></div>
redis_address = <span class="hljs-string">"127.0.0.1:6379"</span>   <span class="hljs-comment">#redis地址（若不开启代理池可选填）</span>
redis_passwd = <span class="hljs-string">""</span>                  <span class="hljs-comment">#redis密码</span>
redis_db = 0                       <span class="hljs-comment">#选择的redis数据库</span>
EOF
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>MAKEFILE</div></td></tr></tbody></table>

<blockquote>
<p>如果有 redis 需求，可以查阅官方文档：<a href="https://docs.serv00.com/Redis/">Redis</a></p>
</blockquote>
<p>使用 pm2 管理运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start bash</span> <span class="hljs-literal">--</span><span class="hljs-comment">name warpgpt</span> <span class="hljs-literal">--</span> <span class="hljs-comment">start</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BRAINFUCK</div></td></tr></tbody></table>

<h2 id="Coze-discord-proxy"><a href="#Coze-discord-proxy" class="headerlink" title="Coze-discord-proxy"></a><a href="https://github.com/deanxv/coze-discord-proxy">Coze-discord-proxy</a></h2><p>代理 Discord 对话 Coze-Bot ，实现以 API 形式请求 GPT4 模型，提供对话、文生图、图生文、知识库检索等功能。功能不多赘述，详细去源仓库查看。</p>
<p>同样的，我写了一个用于构建 FreeBSD 版本的<a href="https://github.com/k0baya/coze-discord-proxy-freebsd">仓库</a>。在这里感谢论坛用户 <a href="https://linux.do/u/reno/summary">Reno</a> 的测试，没有测试人员的测试，也不会有部署的过程记录了。</p>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Coze-discord-proxy 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载二进制文件</span>
release_info=$(curl -s https://api.github.com/repos/k0baya/coze-discord-proxy-freebsd/releases/latest)
asset_url=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$release_info</span>"</span> | jq -r <span class="hljs-string">'.assets[] | select(.name != "source code") | .browser_download_url'</span>)
curl -L -o coze-discord-proxy <span class="hljs-string">"<span class="hljs-variable">$asset_url</span>"</span> &amp;&amp; <span class="hljs-built_in">chmod</span> +x coze-discord-proxy
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>添加启动脚本：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; start.sh &lt;&lt; EOF
<span class="hljs-comment">#!/bin/bash</span>
<span class="hljs-comment"># 根据你的需求自行填入环境变量</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">PORT</span>=<span class="hljs-string">"PORT"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">USER_AUTHORIZATION</span>=<span class="hljs-string">"XXXXXX"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">BOT_TOKEN</span>=<span class="hljs-string">"XXXXXX"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">GUILD_ID</span>=<span class="hljs-string">"XXXXXX"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">COZE_BOT_ID</span>=<span class="hljs-string">"XXXXXX"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">PROXY_SECRET</span>=<span class="hljs-string">"XXXXXX"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">CHANNEL_ID</span>=<span class="hljs-string">"XXXXXX"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">TZ</span>=<span class="hljs-string">"Asia/Shanghai"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">DATA_GYM_CACHE_DIR</span>=<span class="hljs-string">"<span class="hljs-variable">$PWD</span>"</span>
chmod +x coze-discord-proxy &amp;&amp; exec ./coze-discord-proxy
EOF
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ROUTEROS</div></td></tr></tbody></table>

<p>给启动脚本赋权：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x coze-discord-proxy
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>添加多机器人配置文件：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p app/coze-discord-proxy/data/config
<span class="hljs-built_in">touch</span> app/coze-discord-proxy/data/config/bot_config.json
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>然后回到 Panel 中，进入File manager选项卡，进入 <code>bot_config.json</code> 所在路径，右键点击它，选择View&#x2F;Edit &gt; Source Editor，进行编辑：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span></pre></td><td class="code"><pre><code class="hljs scheme">[
  &#123;
    <span class="hljs-string">"proxySecret"</span>: <span class="hljs-string">"123"</span>, // 接口请求密钥(<span class="hljs-name">PROXY_SECRET</span>)(<span class="hljs-name">注意:此密钥在环境变量PROXY_SECRET中存在时该Bot才可以被匹配到!</span>)
    <span class="hljs-string">"cozeBotId"</span>: <span class="hljs-string">"12***************31"</span>, // coze托管的机器人ID
    <span class="hljs-string">"model"</span>: [<span class="hljs-string">"gpt-3.5"</span>,<span class="hljs-string">"gpt-3.5-16k"</span>], // 模型名称(<span class="hljs-name">数组格式</span>)(<span class="hljs-name">与请求参数中的model对应</span>,如请求中的model在该json中未匹配到则会抛出异常)
    <span class="hljs-string">"channelId"</span>: <span class="hljs-string">"12***************56"</span>  // [<span class="hljs-name">可选</span>]discord频道ID(<span class="hljs-name">机器人必须在此频道所在的服务器</span>)(<span class="hljs-name">目前版本下该参数仅用来活跃机器人</span>)
  &#125;,
  &#123;
    <span class="hljs-string">"proxySecret"</span>: <span class="hljs-string">"456"</span>,
    <span class="hljs-string">"cozeBotId"</span>: <span class="hljs-string">"12***************64"</span>,
    <span class="hljs-string">"model"</span>: [<span class="hljs-string">"gpt-4"</span>,<span class="hljs-string">"gpt-4-16k"</span>],
    <span class="hljs-string">"channelId"</span>: <span class="hljs-string">"12***************78"</span>
  &#125;,
  &#123;
    <span class="hljs-string">"proxySecret"</span>: <span class="hljs-string">"789"</span>,
    <span class="hljs-string">"cozeBotId"</span>: <span class="hljs-string">"12***************12"</span>,
    <span class="hljs-string">"model"</span>: [<span class="hljs-string">"dall-e-3"</span>],
    <span class="hljs-string">"channelId"</span>: <span class="hljs-string">"12***************24"</span>
  &#125;
]
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>SCHEME</div></td></tr></tbody></table>

<p>使用 pm2 管理运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start bash</span> <span class="hljs-literal">--</span><span class="hljs-comment">name coze</span><span class="hljs-literal">-</span><span class="hljs-comment">discord</span><span class="hljs-literal">-</span><span class="hljs-comment">proxy</span> <span class="hljs-literal">--</span> <span class="hljs-comment">start</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BRAINFUCK</div></td></tr></tbody></table>

<h2 id="Memos"><a href="#Memos" class="headerlink" title="Memos"></a><a href="https://github.com/usememos/memos">Memos</a></h2><p>一款开源、轻量级的笔记服务。轻松捕捉并分享您的精彩想法。</p>
<p>这个仓库比较难受的是，其在源码的<a href="https://github.com/usememos/memos/blob/edc7645086d285f50e484861705ffee3a626f97a/server/server.go#L85">这个位置</a>强制要求其 gRPC 服务的端口为 Memos 监听端口+1，故这个应用需要占用两个端口，而且必须是两个连续的端口。</p>
<p>同样的，我写了一个用于构建 FreeBSD 版本的<a href="https://github.com/k0baya/memos-binary">仓库</a>。</p>
<p>首先在 Panel 中放行 <strong>两个相邻的端口</strong> ，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>刚刚放行的<strong>两个相邻的端口中小的那一个</strong></td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span></pre></td><td class="code"><pre><code class="hljs powershell">API_URL=<span class="hljs-string">"https://api.github.com/repos/k0baya/memos-binary/releases/latest"</span>
DOWNLOAD_URL=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-variable">$API_URL</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">".assets[] | select(.name == "</span>memos<span class="hljs-literal">-freebsd-amd64</span>.tar.gz<span class="hljs-string">") | .browser_download_url"</span>)
<span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-variable">$DOWNLOAD_URL</span> <span class="hljs-literal">-o</span> memos<span class="hljs-literal">-freebsd-amd64</span>.tar.gz
tar <span class="hljs-literal">-xzvf</span> memos<span class="hljs-literal">-freebsd-amd64</span>.tar.gz &amp;&amp; <span class="hljs-built_in">rm</span> memos<span class="hljs-literal">-freebsd-amd64</span>.tar.gz &amp;&amp; chmod +x memos
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>POWERSHELL</div></td></tr></tbody></table>

<p>关于运行，有两种方式进行：</p>
<p>① SQLite</p>
<p>如果选择使用 SQLite 作为数据库运行，则可以直接运行：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 假定你的数据文件打算存储在 /home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span>
<span class="hljs-comment"># 新建数据文件夹</span>
mkdir -p <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span>
<span class="hljs-comment"># 测试运行</span>
<span class="hljs-string">./memos</span> <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span>
<span class="hljs-comment"># 使用 pm2 管理</span>
pm2 start <span class="hljs-string">./memos</span> <span class="hljs-params">--name</span> memos -- <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>JBOSS-CLI</div></td></tr></tbody></table>

<p>② 外接 MySQL &#x2F; PostgreSQL</p>
<p>你可以使用面板自带的 MySQL &#x2F; PostgreSQL 新建数据库，或者使用其他平台提供的远程数据库：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 假定你的数据文件打算存储在 /home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span>
<span class="hljs-comment"># 新建数据文件夹</span>
mkdir -p <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span>
<span class="hljs-comment"># 测试运行（MySQL）（MySQL需要管理员权限，你可以选择远程连接）</span>
<span class="hljs-string">./memos</span> <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span> <span class="hljs-params">--driver</span> mysql <span class="hljs-params">--dsn</span> mysql:<span class="hljs-string">//root</span><span class="hljs-function">:password123</span>@localhost<span class="hljs-function">:3306</span>/mydb
<span class="hljs-comment"># 测试运行（PostgreSQL）</span>
<span class="hljs-string">./memos</span> <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span> <span class="hljs-params">--driver</span> postgres <span class="hljs-params">--dsn</span> postgresql:<span class="hljs-string">//user</span><span class="hljs-function">:password123</span>@localhost<span class="hljs-function">:5432</span>/mydb?sslmode=disable
<span class="hljs-comment"># 使用 pm2 管理（MySQL）（MySQL需要管理员权限，你可以选择远程连接）</span>
pm2 start <span class="hljs-string">./memos</span> <span class="hljs-params">--name</span> memos -- <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span> <span class="hljs-params">--driver</span> mysql <span class="hljs-params">--dsn</span> mysql:<span class="hljs-string">//root</span><span class="hljs-function">:password123</span>@localhost<span class="hljs-function">:3306</span>/mydb
<span class="hljs-comment"># 使用 pm2 管理（PostgreSQL）</span>
pm2 start <span class="hljs-string">./memos</span> <span class="hljs-params">--name</span> memos -- <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span> <span class="hljs-params">--driver</span> postgres <span class="hljs-params">--dsn</span> postgresql:<span class="hljs-string">//user</span><span class="hljs-function">:password123</span>@localhost<span class="hljs-function">:5432</span>/mydb?sslmode=disable
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>JBOSS-CLI</div></td></tr></tbody></table>

<h2 id="Frps"><a href="#Frps" class="headerlink" title="Frps"></a>Frps</h2><p>内网穿透嘛，懂的都懂，这里只做服务端的部署记录，客户端可以查看 <a href="https://gofrp.org/zh-cn/">Frp 的官方文档</a>自行配置。感谢群友的率先测试：<a href="https://blog.theyouyi.site/archives/serv00-frps">youyi</a></p>
<p>首先在 Panel 中放行两个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来映射转发内网服务的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<blockquote>
<p>同样的，你可以设置多个域名使用 Proxy 指向同一个端口，在 Frpc 客户端配置中使用域名分发不同的服务。具体可以查阅官方文档。</p>
</blockquote>
<p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span></pre></td><td class="code"><pre><code class="hljs powershell">release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/fatedier/frp/releases/latest)
download_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$release_info</span>"</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">'.assets[] | select(.name | contains("freebsd_amd64.tar.gz")) | .browser_download_url'</span>)
<span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-string">"<span class="hljs-variable">$download_url</span>"</span> <span class="hljs-literal">-o</span> frp_freebsd_amd64.tar.gz 
tar <span class="hljs-literal">-xzvf</span> frp_freebsd_amd64.tar.gz <span class="hljs-literal">--strip-components</span>=<span class="hljs-number">1</span>
<span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> frp_freebsd_amd64.tar.gz
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>POWERSHELL</div></td></tr></tbody></table>

<p>接着编辑配置文件：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 按照自己的实际情况和需求进行配置，这里只做最简单的http转发配置示例</span>
<span class="hljs-built_in">cat</span> &gt; frps.toml &lt;&lt; <span class="hljs-string">EOF</span>
<span class="hljs-string">bindPort = 监听端口</span>
<span class="hljs-string">vhostHTTPPort = 映射转发端口</span>
<span class="hljs-string">auth.token = "密码"</span>
<span class="hljs-string">EOF</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./frps <span class="hljs-comment">-- -c frps.toml</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>LIVECODESERVER</div></td></tr></tbody></table>

<blockquote>
<p>客户端配置示例：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">serverAddr</span> = <span class="hljs-string">"x.x.x.x"</span>
<span class="hljs-attr">serverPort</span> = Frps 的监听端口
<span class="hljs-attr">auth.token</span> = <span class="hljs-string">"密码"</span>
<div></div>
<span class="hljs-section">[[proxies]]</span>
<span class="hljs-attr">name</span> = <span class="hljs-string">"web"</span>
<span class="hljs-attr">type</span> = <span class="hljs-string">"http"</span>
<span class="hljs-attr">localPort</span> = <span class="hljs-number">80</span>
<span class="hljs-attr">customDomains</span> = [<span class="hljs-string">"www.yourdomain.com"</span>]
<div></div>
<span class="hljs-section">[[proxies]]</span>
<span class="hljs-attr">name</span> = <span class="hljs-string">"web2"</span>
<span class="hljs-attr">type</span> = <span class="hljs-string">"http"</span>
<span class="hljs-attr">localPort</span> = <span class="hljs-number">8080</span>
<span class="hljs-attr">customDomains</span> = [<span class="hljs-string">"www.yourdomain2.com"</span>]
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>INI</div></td></tr></tbody></table>
</blockquote>
<h2 id="Rclone"><a href="#Rclone" class="headerlink" title="Rclone"></a><a href="https://rclone.org/">Rclone</a></h2><p>Rclone 是一款管理云存储文件的命令行程序。它功能丰富，可替代云供应商的网络存储界面。超过 70 种云存储产品支持 Rclone，包括 S3 对象存储、企业和消费者文件存储服务以及标准传输协议。</p>
<p>具体用法与配置请查阅其<a href="https://rclone.org/docs/">官方文档</a>。</p>
<p>如果你需要使用 Rclone 的 web ui ，你可以按照前文所述的大多数应用一样，先放行端口，添加域名，申请好 SSL 证书，并进入其目录下的 <code>public_html</code> 路径下再进行程序本体的下载部署。</p>
<p>下载最新版 Rclone：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span></pre></td><td class="code"><pre><code class="hljs powershell">release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/rclone/rclone/releases/latest)
download_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$release_info</span>"</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">'.assets[] | select(.name | contains("-freebsd-amd64.zip")) | .browser_download_url'</span>)
<span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-string">"<span class="hljs-variable">$download_url</span>"</span> <span class="hljs-literal">-o</span> rclone<span class="hljs-literal">-freebsd-amd64</span>.zip
outer_folder=<span class="hljs-variable">$</span>(unzip <span class="hljs-literal">-l</span> rclone<span class="hljs-literal">-freebsd-amd64</span>.zip | grep <span class="hljs-string">'/'</span> | sed <span class="hljs-literal">-n</span> <span class="hljs-string">'1p'</span> | sed <span class="hljs-string">'s#^.* ([^/]*)/.*$#1#'</span>)
unzip rclone<span class="hljs-literal">-freebsd-amd64</span>.zip
<span class="hljs-built_in">mv</span> <span class="hljs-string">"<span class="hljs-variable">$outer_folder</span>"</span>/* . &amp;&amp; <span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> <span class="hljs-string">"<span class="hljs-variable">$outer_folder</span>"</span> rclone<span class="hljs-literal">-freebsd-amd64</span>.zip
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>POWERSHELL</div></td></tr></tbody></table>

<p>经我测试，目前 v1.63.1 之后的版本的 FreeBSD 版的构建都有无法识别 <code>mount</code> 命令的问题，在我查阅其 issue —— <a href="https://github.com/rclone/rclone/issues/7432">#7432</a> 、 <a href="https://github.com/rclone/rclone/issues/5843#issuecomment-1784149722">#5843</a> 后，确定这个 bug 已经好几个月没有修复了。所以我建议在此 bug 修复前，使用 v1.63.1 版本。</p>
<p>下载 v1.63.1 版本 Rclone ：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span></pre></td><td class="code"><pre><code class="hljs bash">curl -L https://github.com/rclone/rclone/releases/download/v1.63.1/rclone-v1.63.1-freebsd-amd64.zip -o rclone-freebsd-amd64.zip
outer_folder=$(unzip -l rclone-freebsd-amd64.zip | grep <span class="hljs-string">'/'</span> | sed -n <span class="hljs-string">'1p'</span> | sed <span class="hljs-string">'s#^.* ([^/]*)/.*$#1#'</span>)
unzip rclone-freebsd-amd64.zip
<span class="hljs-built_in">mv</span> <span class="hljs-string">"<span class="hljs-variable">$outer_folder</span>"</span>/* . &amp;&amp; <span class="hljs-built_in">rm</span> -rf <span class="hljs-string">"<span class="hljs-variable">$outer_folder</span>"</span> rclone-freebsd-amd64.zip
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>配置 Rclone 的存储：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs arduino">./rclone config
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ARDUINO</div></td></tr></tbody></table>

<blockquote>
<p>启动 web ui：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./rclone</span> rcd <span class="hljs-params">--rc-web-gui</span> <span class="hljs-params">--rc-user</span> 用户名 <span class="hljs-params">--rc-pass</span> 密码 <span class="hljs-params">--rc-addr</span> :端口
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>JBOSS-CLI</div></td></tr></tbody></table>

<p>pm2 管理 web ui：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start</span> <span class="hljs-string">.</span><span class="hljs-comment">/rclone</span> <span class="hljs-literal">--</span> <span class="hljs-comment">rcd</span> <span class="hljs-literal">--</span><span class="hljs-comment">rc</span><span class="hljs-literal">-</span><span class="hljs-comment">web</span><span class="hljs-literal">-</span><span class="hljs-comment">gui</span> <span class="hljs-literal">--</span><span class="hljs-comment">rc</span><span class="hljs-literal">-</span><span class="hljs-comment">user 用户名</span> <span class="hljs-literal">--</span><span class="hljs-comment">rc</span><span class="hljs-literal">-</span><span class="hljs-comment">pass 密码</span> <span class="hljs-literal">--</span><span class="hljs-comment">rc</span><span class="hljs-literal">-</span><span class="hljs-comment">addr :端口</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BRAINFUCK</div></td></tr></tbody></table>
</blockquote>
<h2 id="Cloudreve"><a href="#Cloudreve" class="headerlink" title="Cloudreve"></a><a href="https://cloudreve.org/">Cloudreve</a></h2><p>Cloudreve 可助你即刻构建出兼备自用或公用的网盘服务，通过多种存储策略的支持、虚拟文件系统等特性实现灵活的文件管理体验。</p>
<p>同样的，我编写了一个用于自动化构建 FreeBSD 版本的 Cloudreve 的仓库：<a href="https://github.com/k0baya/cloudreve-freebsd">k0baya&#x2F;cloudreve-freebsd</a> 前后端分离构建，前端静态文件在 Cloudreve 本体同路径下的 <code>static</code> 文件夹内。</p>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 Cloudreve 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span></pre></td><td class="code"><pre><code class="hljs powershell">release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/k0baya/cloudreve<span class="hljs-literal">-freebsd</span>/releases/latest)
download_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$release_info</span>"</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">'.assets[] | select(.name | contains("freebsd-amd64.tar.gz")) | .browser_download_url'</span>)
<span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-string">"<span class="hljs-variable">$download_url</span>"</span> <span class="hljs-literal">-o</span> cloudreve<span class="hljs-literal">-freebsd-amd64</span>.tar.gz 
tar <span class="hljs-literal">-xzvf</span> cloudreve<span class="hljs-literal">-freebsd-amd64</span>.tar.gz
<span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> cloudreve<span class="hljs-literal">-freebsd-amd64</span>.tar.gz
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>POWERSHELL</div></td></tr></tbody></table>

<p>Cloudreve 在首次启动时，会创建初始管理员账号，请注意保管管理员密码，此密码只会在首次启动时出现。如果您忘记初始管理员密码，需要删除同级目录下的 <code>cloudreve.db</code> ，重新启动主程序以初始化新的管理员账户。</p>
<p>Cloudreve 默认会监听 <code>5212</code> 端口。首次启动时，Cloudreve 会在同级目录下创建名为 <code>conf.ini</code> 的配置文件，你可以修改此文件进行一些参数的配置（比如端口），保存后需要重新启动 Cloudreve 生效。</p>
<p>一个完整的配置文件示例如下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[System]</span>
<span class="hljs-comment">; 运行模式</span>
<span class="hljs-attr">Mode</span> = master
<span class="hljs-comment">; 监听端口</span>
<span class="hljs-attr">Listen</span> = :<span class="hljs-number">5212</span>
<span class="hljs-comment">; 是否开启 Debug</span>
<span class="hljs-attr">Debug</span> = <span class="hljs-literal">false</span>
<span class="hljs-comment">; Session 密钥, 一般在首次启动时自动生成</span>
<span class="hljs-attr">SessionSecret</span> = <span class="hljs-number">23333</span>
<span class="hljs-comment">; Hash 加盐, 一般在首次启动时自动生成</span>
<span class="hljs-attr">HashIDSalt</span> = something really hard to guss
<span class="hljs-comment">; 呈递客户端 IP 时使用的 Header</span>
<span class="hljs-attr">ProxyHeader</span> = X-Forwarded-For
<div></div>
<span class="hljs-comment">; SSL 相关</span>
<span class="hljs-section">[SSL]</span>
<span class="hljs-comment">; SSL 监听端口</span>
<span class="hljs-attr">Listen</span> = :<span class="hljs-number">443</span>
<span class="hljs-comment">; 证书路径</span>
<span class="hljs-attr">CertPath</span> = C:UsersiDocumentsfullchain.pem
<span class="hljs-comment">; 私钥路径</span>
<span class="hljs-attr">KeyPath</span> = C:UsersiDocumentsprivkey.pem
<div></div>
<span class="hljs-comment">; 启用 Unix Socket 监听</span>
<span class="hljs-section">[UnixSocket]</span>
<span class="hljs-attr">Listen</span> = /run/cloudreve/cloudreve.sock
<span class="hljs-comment">; 设置产生的 socket 文件的权限</span>
<span class="hljs-attr">Perm</span> = <span class="hljs-number">0666</span>
<div></div>
<span class="hljs-comment">; 数据库相关，如果你只想使用内置的 SQLite 数据库，这一部分直接删去即可</span>
<span class="hljs-section">[Database]</span>
<span class="hljs-comment">; 数据库类型，目前支持 sqlite/mysql/mssql/postgres</span>
<span class="hljs-attr">Type</span> = mysql
<span class="hljs-comment">; MySQL 端口</span>
<span class="hljs-attr">Port</span> = <span class="hljs-number">3306</span>
<span class="hljs-comment">; 用户名</span>
<span class="hljs-attr">User</span> = root
<span class="hljs-comment">; 密码</span>
<span class="hljs-attr">Password</span> = root
<span class="hljs-comment">; 数据库地址</span>
<span class="hljs-attr">Host</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>
<span class="hljs-comment">; 数据库名称</span>
<span class="hljs-attr">Name</span> = v3
<span class="hljs-comment">; 数据表前缀</span>
<span class="hljs-attr">TablePrefix</span> = cd_
<span class="hljs-comment">; 字符集</span>
<span class="hljs-attr">Charset</span> = utf8mb4
<span class="hljs-comment">; SQLite 数据库文件路径</span>
<span class="hljs-attr">DBFile</span> = cloudreve.db
<span class="hljs-comment">; 进程退出前安全关闭数据库连接的缓冲时间</span>
<span class="hljs-attr">GracePeriod</span> = <span class="hljs-number">30</span>
<span class="hljs-comment">; 使用 Unix Socket 连接到数据库</span>
<span class="hljs-attr">UnixSocket</span> = <span class="hljs-literal">false</span>
<div></div>
<span class="hljs-comment">; 从机模式下的配置</span>
<span class="hljs-section">[Slave]</span>
<span class="hljs-comment">; 通信密钥</span>
<span class="hljs-attr">Secret</span> = <span class="hljs-number">1234567891234567123456789123456712345678912345671234567891234567</span>
<span class="hljs-comment">; 回调请求超时时间 (s)</span>
<span class="hljs-attr">CallbackTimeout</span> = <span class="hljs-number">20</span>
<span class="hljs-comment">; 签名有效期</span>
<span class="hljs-attr">SignatureTTL</span> = <span class="hljs-number">60</span>
<div></div>
<span class="hljs-comment">; 跨域配置</span>
<span class="hljs-section">[CORS]</span>
<span class="hljs-attr">AllowOrigins</span> = *
<span class="hljs-attr">AllowMethods</span> = OPTIONS,GET,POST
<span class="hljs-attr">AllowHeaders</span> = *
<span class="hljs-attr">AllowCredentials</span> = <span class="hljs-literal">false</span>
<span class="hljs-attr">SameSite</span> = Default
<span class="hljs-attr">Secure</span> = lse
<div></div>
<span class="hljs-comment">; Redis 相关</span>
<span class="hljs-section">[Redis]</span>
<span class="hljs-attr">Server</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>
<span class="hljs-attr">Password</span> =
<span class="hljs-attr">DB</span> = <span class="hljs-number">0</span>
<div></div>
<span class="hljs-comment">; 从机配置覆盖</span>
<span class="hljs-section">[OptionOverwrite]</span>
<span class="hljs-comment">; 可直接使用 `设置名称 = 值` 的格式覆盖</span>
<span class="hljs-attr">max_worker_num</span> = <span class="hljs-number">50</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>INI</div></td></tr></tbody></table>

<p>你可以使用 <code>vim</code> 或者 Panel 中的 File manager 选项卡，进入 <code>conf.ini</code> 所在路径路径，右键点击，选择 View&#x2F;Edit &gt; Source Editor ，进行编辑。</p>
<p>修改完配置文件后，测试启动：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash">./cloudreve
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>使用 pm2 管理：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs bash">pm2 start ./cloudreve
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<h2 id="PanIndex"><a href="#PanIndex" class="headerlink" title="PanIndex"></a><a href="https://github.com/px-org/PanIndex">PanIndex</a></h2><p>一个简易的网盘目录列表。</p>
<p>同样的，我编写了一个用于自动化构建 FreeBSD 版本的 PanIndex 的仓库：<a href="https://github.com/k0baya/panindex-freebsd">k0baya&#x2F;panindex-freebsd</a>。</p>
<blockquote>
<p>后台地址（默认）：<code>http://ip:port/admin</code> 默认账号：<code>admin</code> 默认密码：<code>PanIndex</code></p>
</blockquote>
<p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Domain</td>
<td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td>
</tr>
<tr>
<td>Website Type</td>
<td>proxy</td>
</tr>
<tr>
<td>Proxy Target</td>
<td>localhost</td>
</tr>
<tr>
<td>Proxy URL</td>
<td>留空</td>
</tr>
<tr>
<td>Proxy port</td>
<td>你准备用来部署 PanIndex 的端口</td>
</tr>
<tr>
<td>Use HTPPS</td>
<td>False</td>
</tr>
<tr>
<td>DNS support</td>
<td>True</td>
</tr>
</tbody></table>
<p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Domain</th>
</tr>
</thead>
<tbody><tr>
<td>Generate Let’s Encrypted certificate</td>
<td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td>
</tr>
</tbody></table>
<p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span></pre></td><td class="code"><pre><code class="hljs bash">release_info=$(curl -s https://api.github.com/repos/k0baya/panindex-freebsd/releases/latest)
asset_url=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$release_info</span>"</span> | jq -r <span class="hljs-string">'.assets[] | select(.name != "source code") | .browser_download_url'</span>)
curl -L -o panindex <span class="hljs-string">"<span class="hljs-variable">$asset_url</span>"</span> &amp;&amp; <span class="hljs-built_in">chmod</span> +x panindex
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>BASH</div></td></tr></tbody></table>

<p>创建配置文件：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span></pre></td><td class="code"><pre><code class="hljs mipsasm">cat &gt; <span class="hljs-built_in">config</span>.<span class="hljs-keyword">json </span>&lt;&lt; EOF
&#123;
  <span class="hljs-string">"host"</span>: <span class="hljs-string">"0.0.0.0"</span>,
  <span class="hljs-string">"port"</span>: <span class="hljs-number">5238</span>,
  <span class="hljs-string">"log_level"</span>: <span class="hljs-string">"info"</span>,
  <span class="hljs-string">"data_path"</span>: <span class="hljs-string">""</span>,
  <span class="hljs-string">"cert_file"</span>: <span class="hljs-string">""</span>,
  <span class="hljs-string">"key_file"</span>: <span class="hljs-string">""</span>,
  <span class="hljs-string">"config_query"</span>: <span class="hljs-string">""</span>,
  <span class="hljs-string">"db_type"</span>: <span class="hljs-string">""</span>,
  <span class="hljs-string">"dsn"</span>: <span class="hljs-string">""</span>,
  <span class="hljs-string">"ui"</span>: <span class="hljs-string">""</span>
&#125;
EOF
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>MIPSASM</div></td></tr></tbody></table>

<blockquote>
<p>数据库支持 sqlite (默认)、mysql、postgres ，如果需要接入 MySQL 或者 PostgreSQL ，请写成数据库链接的方式填入 dsn 。注意，如果是 Serv00 自带的 PostgreSQL ，请在数据库链接最末加上 <code>?sslmode=disable</code> 以禁用 SSL 连接。</p>
</blockquote>
<p>编写好配置文件后，测试运行：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs routeros">./panindex <span class="hljs-attribute">-c</span>=config.json
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ROUTEROS</div></td></tr></tbody></table>

<p>使用 pm2 管理：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./panindex <span class="hljs-comment">-- -c=config.json</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>LIVECODESERVER</div></td></tr></tbody></table>

<h2 id="Artalk"><a href="#Artalk" class="headerlink" title="Artalk"></a><a href="https://github.com/ArtalkJS/Artalk">Artalk</a></h2><p>似乎有几个群友在用这个，为方便查阅统一收录在本文，具体内容可以去群友的博客查看： <a href="https://blog.sinzmise.top/posts/13624/"><img src="/images/f5805f273c85b1bc62fd4f052d2400f0.png" alt="Serv00搭建各种服务"></a></p>
<blockquote>
<p>点击图片进入</p>
</blockquote>
<h1 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h1><p>听说 Serv00 会不定时重启机器，所以我们把 pm2 添加开机自启，可以保证每次重启都能由 pm2 调动 Alist 和 Cloudflared 。而且 Serv00 每三个月内必须要有一次登录面板或者 SSH 连接，不然会删号，也可以通过一个脚本解决问题，接下来我会详细说明。</p>
<h2 id="自动续期"><a href="#自动续期" class="headerlink" title="自动续期"></a>自动续期</h2><p>可以用青龙面板的自动任务定期登录SSH解决。在青龙面板中添加Linux依赖 <code>sshpass</code>，然后添加定时任务：名称随意，命令&#x2F;脚本 <code>sshpass -p &#39;密码&#39; ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt 用户名@地址 &quot;exit&quot;</code>，定时规则 <code>1 1 1 * *</code>。这样就会每个月自动ssh连接一次，实现续期。</p>
<blockquote>
<p>你还可以使用自身 SSH 自身的方式进行自动续期，操作如下：</p>
<p>进入一个自己喜欢的路径，使用 <code>cat</code> 命令新建 <code>auto-renew.sh</code> 脚本：</p>
<table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; auto-renew.sh &lt;&lt; EOF
<span class="hljs-comment">#!/bin/bash</span>
<div></div>
<span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span>
  sshpass -p <span class="hljs-string">'密码'</span> ssh -o <span class="hljs-attribute">StrictHostKeyChecking</span>=<span class="hljs-literal">no</span> -o <span class="hljs-attribute">UserKnownHostsFile</span>=/dev/null -tt 用户名@地址 <span class="hljs-string">"exit"</span> &amp;
  sleep 259200  #30天为259200秒
done
EOF
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ROUTEROS</div></td></tr></tbody></table>

<p>记得把其中的密码、用户名、ssh的地址修改为你自己的。</p>
<p>给 <code>auto-renew.sh</code>添加可执行权限：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs scss">chmod +<span class="hljs-attribute">x</span> auto-renew<span class="hljs-selector-class">.sh</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>SCSS</div></td></tr></tbody></table>

<p>使用pm2启动：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs angelscript">pm2 start ./<span class="hljs-built_in">auto</span>-renew.sh
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>ANGELSCRIPT</div></td></tr></tbody></table>

<p>这样就会每隔一个月自动执行一次SSH连接，自己SSH自己进行续期。</p>
</blockquote>
<h2 id="自动启动"><a href="#自动启动" class="headerlink" title="自动启动"></a>自动启动</h2><p>听说 Serv00 的主机会不定时重启，所以需要添加自启任务。</p>
<p>在 Panel 中找到 Cron jobs 选项卡，使用 Add cron job 功能添加任务，Specify time 选择 After reboot，即为重启后运行。Form type 选择 Advanced，Command 写：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>你的用户名<span class="hljs-regexp">/.npm-global/</span>bin/pm2 resurrect
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>AWK</div></td></tr></tbody></table>

<blockquote>
<p>记得把你的用户名改为你的用户名</p>
</blockquote>
<p>添加完之后，在 SSH 窗口保存 pm2 的当前任务列表快照：</p>
<table><tbody><tr><td class="code"><pre><code class="hljs fortran">pm2 <span class="hljs-keyword">save</span>
</code></pre><div class="code-widget-dark code-widget copy-btn" data-clipboard-snippet=""><i class="iconfont icon-copy"></i>FORTRAN</div></td></tr></tbody></table>

<p>这样每次 serv00 不定时重启任务时，都能自动调用 pm2 读取保存的任务列表快照，恢复任务列表。<strong>如果在保存了任务列表快照后又改变了任务 pm2 的任务列表，需要重新执行 <code>pm2 save</code> 以更新任务列表。</strong></p>
<p><strong>欢迎进群讨论，一起学习探讨：<a href="https://jq.qq.com/?_wv=1027&k=qssjFvAs">受虐滑稽</a></strong></p>
<p>摘自 <a href="https://blog.rappit.site/2024/01/27/serv00_logs/">https://blog.rappit.site/2024/01/27/serv00_logs&#x2F;</a></p>
]]></content>
  </entry>
  <entry>
    <title>serv00部署alist详细记录</title>
    <url>/2024-11-17-2024/11/2024-11-17-serv00%E9%83%A8%E7%BD%B2alist%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/index.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言<a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E5%89%8D%E8%A8%80"></a></h3><p>最近在serv00薅了个服务器，经过一系列的折腾，发现还是有一点可玩性的，本文将记录在<code>serv00</code>服务器上部署<code>alist</code>应用的详细过程</p>
<h3 id="绑定端口"><a href="#绑定端口" class="headerlink" title="绑定端口"></a><a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E7%BB%91%E5%AE%9A%E7%AB%AF%E5%8F%A3"></a>绑定端口<a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E7%BB%91%E5%AE%9A%E7%AB%AF%E5%8F%A3"></a></h3><p>在后台管理面板新建一个端口，比如新建的端口号是<code>45476</code>，点击<code>WWW Websites</code>-点击<code>Add website</code>，新建一个自定义网站，类型选择proxy，端口就是刚刚新建的那个端口<code>45476</code>。</p>
<p>也可用系统分配的二级域名，比如<code>bin001.serv00.net</code>，用系统分配的域名的话需要先删除掉，然后重新添加上，类型选proxy，端口就是刚刚新建的那个端口<code>45476</code>,系统分配的域名不用申请证书，如果是自定义域名的话就到<code>SSL</code>菜单，给自定义域名申请一下证书</p>
<h3 id="登录SSH"><a href="#登录SSH" class="headerlink" title="登录SSH"></a><a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E7%99%BB%E5%BD%95SSH"></a>登录SSH<a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E7%99%BB%E5%BD%95SSH"></a></h3><p>执行操作，<code>cd</code>到你的网站名字的文件夹，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd domains/ztest.serv00.net/</span><br></pre></td></tr></table></figure>

<p>bashCopy收起</p>
<p>新建一个文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir alist</span><br></pre></td></tr></table></figure>

<p>bashCopy收起</p>
<p>然后输入<code>ls</code>，可以看到刚刚新建的<code>alist</code>文件夹，然后<code>cd</code>到<code>alist</code>文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd alist</span><br></pre></td></tr></table></figure>

<p>bashCopy收起</p>
<h3 id="一键安装alist脚本"><a href="#一键安装alist脚本" class="headerlink" title="一键安装alist脚本"></a><a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85alist%E8%84%9A%E6%9C%AC"></a>一键安装alist脚本<a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85alist%E8%84%9A%E6%9C%AC"></a></h3><p>复制下面的代码执行操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O alist-freebsd.sh https://raw.githubusercontent.com/bin862324915/serv00-app/main/alist/alist-freebsd.sh &amp;&amp; sh alist-freebsd.sh</span><br></pre></td></tr></table></figure>

<p>bashCopy收起</p>
<p>执行完成后会弹出对应的提示</p>
<h3 id="修改配置信息"><a href="#修改配置信息" class="headerlink" title="修改配置信息"></a><a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF"></a>修改配置信息<a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF"></a></h3><p>先进入网页管理面板<code>MySQL</code>菜单，点击<code>Add database</code>新建数据库，填写好信息，保存备用，下面是数据库创建的示例信息，实际操作中填写为自己的即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Database name：m5022_alist</span><br><span class="line">Username：m5022_alist</span><br><span class="line">Password：Test240706</span><br></pre></td></tr></table></figure>

<p>Plain textCopy收起</p>
<p>从网页管理面板进入文件管理器<code>file_manager</code>，然后进入到刚刚部署的网站文件夹下的<code>alist</code>目录，比如<code>/home/ztest/domains/ztest.serv00.net/alist/data/</code></p>
<p>修改<code>config.json</code>文件的配置，只需要找到对应字段，修改对应字段的信息即可，其他配置信息不要删除或修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &quot;database&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;sqlite3&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;&quot;,</span><br><span class="line">    &quot;port&quot;: 0,</span><br><span class="line">    &quot;user&quot;: &quot;&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;&quot;,</span><br><span class="line">    &quot;db_file&quot;: &quot;data/data.db&quot;,</span><br><span class="line">    &quot;table_prefix&quot;: &quot;x_&quot;,</span><br><span class="line">    &quot;ssl_mode&quot;: &quot;&quot;,</span><br><span class="line">    &quot;dsn&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">#将上面的这段配置的数据库信息修改成你自己的，比如修改成↓</span><br><span class="line">  &quot;database&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;mysql&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;mysql6.serv00.com&quot;,</span><br><span class="line">    &quot;port&quot;: 3306,</span><br><span class="line">    &quot;user&quot;: &quot;m5022_alist&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;Test240706&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;m5022_alist&quot;,</span><br><span class="line">    &quot;db_file&quot;: &quot;data/data.db&quot;,</span><br><span class="line">    &quot;table_prefix&quot;: &quot;x_&quot;,</span><br><span class="line">    &quot;ssl_mode&quot;: &quot;&quot;,</span><br><span class="line">    &quot;dsn&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line"></span><br><span class="line">&quot;scheme&quot;: &#123;</span><br><span class="line">    &quot;address&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;http_port&quot;: 5244,</span><br><span class="line">    &quot;https_port&quot;: -1,</span><br><span class="line">    &quot;force_https&quot;: false,</span><br><span class="line">    &quot;cert_file&quot;: &quot;&quot;,</span><br><span class="line">    &quot;key_file&quot;: &quot;&quot;,</span><br><span class="line">    &quot;unix_file&quot;: &quot;&quot;,</span><br><span class="line">    &quot;unix_file_perm&quot;: &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">#将上面的这段配置的端口号修改成你自己的，比如修改成↓</span><br><span class="line">  &quot;scheme&quot;: &#123;</span><br><span class="line">    &quot;address&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;http_port&quot;: 45476,</span><br><span class="line">    &quot;https_port&quot;: -1,</span><br><span class="line">    &quot;force_https&quot;: false,</span><br><span class="line">    &quot;cert_file&quot;: &quot;&quot;,</span><br><span class="line">    &quot;key_file&quot;: &quot;&quot;,</span><br><span class="line">    &quot;unix_file&quot;: &quot;&quot;,</span><br><span class="line">    &quot;unix_file_perm&quot;: &quot;&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>jsonCopy收起</p>
<p>修改好后点击<code>Save</code>保存。</p>
<h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a><a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95"></a>运行测试<a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95"></a></h3><p>回到SSH客户端，执行操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./alist server</span><br></pre></td></tr></table></figure>

<p>bashCopy收起</p>
<p>首次运行后会生成一个默认的密码，找到<code>password</code>后面的字符串就是默认密码，保存备用</p>
<p>如果忘记密码可以使用以下指令重置密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 随机生成一个密码</span><br><span class="line">./alist admin random</span><br><span class="line"># 手动设置一个密码,`NEW_PASSWORD`是指你需要设置的密码</span><br><span class="line">./alist admin set NEW_PASSWORD</span><br></pre></td></tr></table></figure>

<p>bashCopy收起</p>
<p>进入浏览器，打开你刚刚部署的网站，比如<a href="https://bin001.serv00.net/">https://bin001.serv00.net/</a>，输入用户名<code>admin</code>，密码是刚刚生成的那个，至此，整个<code>alist</code>的安装部署就到此结束了,在SSH客户端 按<code>Ctrl + C</code>，结束<code>alist</code>的运行</p>
<h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a><a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C"></a>后台运行<a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C"></a></h3><p>可以通过<code>screen</code>新建会话让<code>alist</code>保持在后台运行，执行操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -S alist /home/ztest/domains/ztest.serv00.net/alist/alist server</span><br></pre></td></tr></table></figure>

<p>bashCopy收起</p>
<p>执行后会新建一个<code>screen</code>会话运行<code>alist</code></p>
<p>可以在当前会话按下 <code>Ctrl + A</code>，然后按<code>D</code>，这会让你从当前 <code>screen</code> 会话中脱离，但 <code>alist</code> 程序仍会在后台运行。</p>
<p>如果你需要重新连接到这个 <code>screen</code> 会话，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -r alist</span><br></pre></td></tr></table></figure>

<p>bashCopy收起</p>
<p>在网页管理面板进入<code>Cron jobs</code>菜单，点击<code>Add cron job</code>，新建一个脚本，然后在<code>Command</code>框中输入<code>screen -S alist /home/ztest/domains/ztest.serv00.net/alist/alist server</code>，然后点击<code>Add</code>，这样，当服务器重启的时候就会执行操作自动启动<code>alist</code>应用了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -S alist /home/ztest/domains/ztest.serv00.net/alist/alist server</span><br></pre></td></tr></table></figure>

<p>bashCopy收起</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html#%E5%8F%82%E8%80%83"></a>参考</h3><p>-————————————————————————<br>from: Wenbin’s blog<br>文章作者: Wenbin<br>文章链接: <a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html">https://www.zzzwb.com/2024/07-06-serv00-alist.html</a><br>本文章著作权归作者所有，任何形式的转载都请注明出处。</p>
<p><strong>怎么更新？</strong></p>
<p> <strong>killall -u $(whoami)</strong></p>
<p><strong>运行一下这个命令（.&#x2F;web.js admin random），会生成一个随机密码，登录就可以了</strong></p>
]]></content>
  </entry>
  <entry>
    <title>linux 查看文件或文件夹所占磁盘空间大小</title>
    <url>/2024-11-17-2024/11/2024-11-17-linux-%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9%E6%89%80%E5%8D%A0%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F/index.html</url>
    <content><![CDATA[<p>文件</p>
<p>ls -lht</p>
<p>文件夹</p>
<p>du -sh 整个目录的大小</p>
<p>du -sh * 目录里的每个字目录的大小</p>
<p>du -ah 子目录以及子目录里的文件的大小</p>
<p>查看大于多少的文件</p>
<p>find &#x2F;opt -type f -size +500M -print0 | xargs -0 ls -lh | sort -nr</p>
<p>磁盘使用情况</p>
<p>df -lh<br>————————————————</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://blog.csdn.net/lijun169/article/details/81611936">https://blog.csdn.net/lijun169/article/details/81611936</a></p>
]]></content>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2024-11-17-2024/11/2024-11-17-%E6%B5%8B%E8%AF%95-2/index.html</url>
    <content><![CDATA[<p>32</p>
]]></content>
  </entry>
  <entry>
    <title>CloudFlare SAAS(cname) 接入网站域名</title>
    <url>/2024-11-18-2024/11/2024-11-18-cloudflare-saascname-%E6%8E%A5%E5%85%A5%E7%BD%91%E7%AB%99%E5%9F%9F%E5%90%8D/index.html</url>
    <content><![CDATA[<h5 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h5><p>CloudFlare SAAS，简单来说是为了给自助建站类似的网站，而提供的用户自定义域名接入的功能。<br>比如您做一个系统，可以给用户开通分站等功能，您希望通过api的方式将您的用户自己的域名解析到CloudFlare当中，而不是直接解析到源站。<br>考虑到本文章是为了让大家使用自选IP,因此在思路上将不会以上述分站的逻辑来解释说明。</p>
<h5 id="准备事项"><a href="#准备事项" class="headerlink" title="准备事项"></a>准备事项</h5><p>CloudFlare账户</p>
<p><img src="/images/1702653114.png" alt="cfsaas.png" title="cfsaas.png"></p>
<p>描述</p>
<p>注册不难就不说了。不过需要贝宝以及海外银行卡认证来开通CloudFlare SAAS（自定义主机名）功能。</p>
<p>网站域名</p>
<p>描述</p>
<p>用于建站并使用自选IP的域名，并且该域名的DNS解析服务器不能使用CloudFlare，因为严格来讲CloudFlare是支持DNS解析的CDN服务，您使用该DNS解析会造成CDN配置冲突。<br>请注意如果你使用www或者@主机名做站，您应该理解为这是两个网站域名，如<a href="http://www.youname.com、youname.com./">www.youname.com、youname.com。</a><br>文章示例中会使用web.baota.me，域名在华为云解析。</p>
<p>回源域名</p>
<p>描述</p>
<p>该域名NS将被CloudFlare接管，因此无法用于自选IP等用途。<br>如果您要接入的网站域名较多，请尽可能的选择长久使用的域名，而不是年抛域名。<br>不然年抛域名到期后需要耗费很多时间用来迁移域名。<br>可以使用 6位数字.xyz，价格便宜可以续费10年。<br>需要注意不是所有二级域名都支持ns接入到CloudFlare的。可以在下面文章中查看并获取其他后缀的域名。<br><a href="https://www.baota.me/post-410.html">CloudFlare可NS方式接入的免费、低价域名</a><br>本文章将使用在dash.gacjie.cn注册的baota.free.hr域名。（目前该项目已经停止注册free.hr域名，请勿注册账号。）</p>
<h5 id="回源域名NS接入到CloudFlare"><a href="#回源域名NS接入到CloudFlare" class="headerlink" title="回源域名NS接入到CloudFlare"></a>回源域名NS接入到CloudFlare</h5><p>如果您的回源域名已经NS添加到CloudFlare，此步可以跳过。</p>
<p>1.将回源域名(baota.free.hr)添加到CloudFlare,应该不难就不一步一步的写了。</p>
<p>2.复制ns服务器信息</p>
<p><img src="/images/1102210375.png" alt="getns.png" title="getns.png"></p>
<p>3.1.将CF提供的ns服务器信息更新到域名那边</p>
<p><img src="/images/191983650.png" alt="upnsinfo.png" title="upnsinfo.png"></p>
<p>3.2.如果你没有域名也可以直接注册</p>
<p>描述</p>
<p>该域名NS将被CloudFlare接管，因此无法用于自选IP等用途。<br><a href="https://www.baota.me/post-410.html">CloudFlare可NS方式接入的免费、低价域名</a></p>
<h5 id="网站域名的顶级域名解析到非CF的DNS域名解析系统"><a href="#网站域名的顶级域名解析到非CF的DNS域名解析系统" class="headerlink" title="网站域名的顶级域名解析到非CF的DNS域名解析系统"></a>网站域名的顶级域名解析到非CF的DNS域名解析系统</h5><p>这里就不详细说明了，更换ns服务器跟回源域名NS接入到CloudFlare差不多。</p>
<h5 id="回源域名创建回退源地址"><a href="#回源域名创建回退源地址" class="headerlink" title="回源域名创建回退源地址"></a>回源域名创建回退源地址</h5><p><img src="/images/2844064453.png" alt="source.png" title="source.png"></p>
<p>描述</p>
<p>source可以是@也可以是任意的子域名前缀，但我比较建议使用子域名创建。<br>111.111.111.111是你的网站源服务器，您可以改为您的源站IP地址。<br>代理状态(小云朵),请务必开启，如果关闭您后续添加在自定义主机名里面的网站域名将全部回源。</p>
<h5 id="自定义主机名添加回退源地址"><a href="#自定义主机名添加回退源地址" class="headerlink" title="自定义主机名添加回退源地址"></a>自定义主机名添加回退源地址</h5><p><img src="/images/1521704290.png" alt="addsource.png" title="addsource.png"></p>
<p>描述</p>
<p>source.baota.free.hr是上一步创建的回退源地址，请改为您创建的域名。</p>
<h5 id="自定义主机名添加网站域名"><a href="#自定义主机名添加网站域名" class="headerlink" title="自定义主机名添加网站域名"></a>自定义主机名添加网站域名</h5><p>1.确保回退源已经生效，然后点击右上角的添加自定义主机名。</p>
<p><img src="/images/1120721735.png" alt="addsite.png" title="addsite.png"></p>
<p>2.填写您的网站域名，这里的web.baota.me是示例域名，您可能要添加<a href="http://www.youname.com、youname.com或者其他的二级域名./">www.youname.com、youname.com或者其他的二级域名。</a></p>
<p><img src="/images/3025004807.png" alt="addsite2.png" title="addsite2.png"></p>
<p>3.复制自定义主机名的 DCV 委派提供的信息用来下一步的域名验证。</p>
<p><img src="/images/2037506274.png" alt="addsite3.png" title="addsite3.png"></p>
<p>4.到您的网站域名NS解析服务商，添加DCV 委派验证记录。</p>
<p><img src="/images/2909431396.png" alt="adddnsr.png" title="adddnsr.png"></p>
<p>描述</p>
<p>演示截图配置的网站为web.baota.me。<br>主机名为_acme-challenge.web值为web.baota.me.9cf4d41f99889e0c.dcv.cloudflare.com<br>如果配置的网站为baota.me。<br>主机名为_acme-challenge值为baota.me.9cf4d41f99889e0c.dcv.cloudflare.com<br>如果配置的网站为<a href="http://www.baota.me./">www.baota.me。</a><br>主机名为_acme-challenge.www值为<a href="http://www.baota.me.9cf4d41f99889e0c.dcv.cloudflare.com/">www.baota.me.9cf4d41f99889e0c.dcv.cloudflare.com</a><br>上述仅用于演示，请自行替换为自己的dcv信息。</p>
<p>5.添加网站域名的解析记录指向回退源</p>
<p><img src="/images/3767576559.png" alt="addsourcename.png" title="addsourcename.png"></p>
<p>6.使用ITDOG访问一次网站域名</p>
<p><img src="/images/2249217061.png" alt="itdog-web.png" title="itdog-web.png"></p>
<p>描述</p>
<p>主机名一共有两种验证方式<br>预验证：即txt或者http验证方式，但需要等待一段时间的Cloudflare官方扫描。<br>实时验证：即将主机名正确的cname到回退源地址。<br>本教程使用实时验证方式。为了加快验证，因此用测速工具来完成正常解析请求。</p>
<p>7.正常情况下，刷新一下CloudFlare自定义主机名页面，应该已经完成验证了，如果没有可能要等待一段时间，或者需要检查上述配置是否出错。</p>
<p><img src="/images/2241544505.png" alt="web.baota.me.png" title="web.baota.me.png"></p>
<p>8.补一张图用于解析配置检查</p>
<p><img src="/images/3414879881.png" alt="sitenss.png" title="sitenss.png"></p>
<p>描述</p>
<p>解析配置检查图片里面主机名带baota.me是华为云解析系统自动添加的，使用其他解析的时候需要注意。</p>
]]></content>
  </entry>
  <entry>
    <title>网站使用 CloudFlare 优选域名的方法</title>
    <url>/2024-11-18-2024/11/2024-11-18-%E7%BD%91%E7%AB%99%E4%BD%BF%E7%94%A8-cloudflare-%E4%BC%98%E9%80%89%E5%9F%9F%E5%90%8D%E7%9A%84%E6%96%B9%E6%B3%95/index.html</url>
    <content><![CDATA[<h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><p>由于CloudFlare官方IP是泛播路由，意味着同一个IP在不同地区不同运营商所链接的机房是不同的。<br>因此公共优选域名并不适合非网站用途，如果需要建议使用CloudflareSpeedTest项目自行测试本地最优的IP地址。</p>
<h4 id="准备事项"><a href="#准备事项" class="headerlink" title="准备事项"></a>准备事项</h4><p>使用本教程前请先查看文章 <a href="https://www.baota.me/post-413.html">CloudFlare SAAS(cname) 接入网站域名</a> 使用SAAS功能接入后再查看本教程操作。</p>
<h4 id="优选域名"><a href="#优选域名" class="headerlink" title="优选域名"></a>优选域名</h4><p>由于CNAME地址会有被污染、域名所有者不维护等情况，为了方便更新，该列表会单独一个页面展示。<br><a href="https://www.wetest.vip/page/cloudflare/cname.html">CloudFlare公共优选Cname域名地址列表</a><br>本文章将使用cloudflare.182682.xyz域名来做示例优选域名。</p>
<h4 id="测速工具"><a href="#测速工具" class="headerlink" title="测速工具"></a>测速工具</h4><p>由于公共优选域名有很多，质量也参差不齐。<br>因此我们需要使用在线测速工具来测试优选效果。<br>以下是我收集的支持指定cname的在线测速工具。<br><a href="https://zhale.me/http/">炸了吗-HTTP网站测速工具</a><br><a href="https://www.itdog.cn/http/">IT狗-HTTP网站测速工具</a><br><a href="https://www.cesu.net/http/">测速网-HTTP网站测速工具</a><br><a href="https://tcping8.com/http/">tcping8-HTTP网站测速工具</a><br><a href="https://www.17ce.com/">17测-HTTP网站测速工具</a><br>本文章将使用 炸了吗-HTTP网站测速工具 来做示例测速。</p>
<h4 id="挑选域名"><a href="#挑选域名" class="headerlink" title="挑选域名"></a>挑选域名</h4><p><img src="/images/2389097122.png" alt="zhalema.png"><br>1.挑选时不要只看小地图，应该根据平均访问速度，最大访问速度，失败节点数等综合判断。<br>2.因为有些非官方的优选IP不支持80或者443端口。<br>因此测试时建议对http、https链接单独测试。<br>3.如果您的网站并发过低建议使用慢速监测。<br>快速测试：模拟用户同时访问指定网站<br>慢速监测：模拟用户依次访问指定网站</p>
<h4 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h4><p>通过SAAS验证后，可直接替换回退源为优选域名，但出于风险考虑我比较建议分线路解析。<br>1.国外线路解析到回退源域名是为了避免CF增加监测系统，自动删除已添加的网站域名。<br>2.优选域名一般都会只优选国内线路，因此国外线路大概率没有进行优选。<br>3.默认回退源域名一般情况下，国外访问最近策略，会比自定义IP效果要好。<br><strong>【可选】将优选域名解析到国内线路上</strong><br><img src="/images/607071051.png" alt="cn.png"><br><strong>补充截图用于校验设置-华为云可能跟其他DNS不一样</strong><br><img src="/images/3526151628.png" alt="xysz.png"><br><strong>【可选】将搜索引擎线路设置为源站或者其他IP</strong><br>在loc有用户反馈，公共cname可能会将搜索引擎蜘蛛线路解析到其他服务器来劫持蜘蛛。<br>因此我们可以自定义搜索引擎线路来避免这种情况的发生，需要说明不是所有DNS支持设置搜索引擎线路。</p>
]]></content>
  </entry>
  <entry>
    <title>CloudFlare 回源协议以及回源端口的设置</title>
    <url>/2024-11-19-2024/11/2024-11-19-cloudflare-%E5%9B%9E%E6%BA%90%E5%8D%8F%E8%AE%AE%E4%BB%A5%E5%8F%8A%E5%9B%9E%E6%BA%90%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%AE%BE%E7%BD%AE/index.html</url>
    <content><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>Cloudflare提供了一些回源相关的设置并且设置个人感觉不是很友好。</p>
<h3 id="SSL-TLS加密协议"><a href="#SSL-TLS加密协议" class="headerlink" title="SSL&#x2F;TLS加密协议"></a>SSL&#x2F;TLS加密协议</h3><p><img src="/images/1704707397.png" alt="QQ截图20241108101955.png" title="QQ截图20241108101955.png"></p>
<p>关闭（不安全）：即关闭HTTPS<br>灵活：回源走http80端口 如果您开启这个并开启源站强制https则会无限301<br>完全：回源走https443端口 但是不校验证书 你可以在源站使用任意证书哪怕自签、过期证书<br>完全（严格）：回源走https443端口 校验源站证书是否合规 可以使用CF签发的源服务器证书<br>严格（仅 SSL 源服务器拉取）：与完全（严格）似乎是一样的，可能不支持CF源服务器证书</p>
<h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>自定义配置可以单独为域名或者其他一些规则单独设置上述SSL&#x2F;TLS加密协议。<br><img src="/images/3567398905.png" alt="cr1.png"><br><img src="/images/3812052073.png" alt="cr2.png"></p>
<h3 id="回源规则"><a href="#回源规则" class="headerlink" title="回源规则"></a>回源规则</h3><p>目前只能设置回源端口，设置将会回源到指定端口。<br><img src="/images/214685266.png" alt="o.png"></p>
<p>10</p>
]]></content>
  </entry>
  <entry>
    <title>CloudFlare 非标准端口转发映射</title>
    <url>/2024-11-19-2024/11/2024-11-19-cloudflare-%E9%9D%9E%E6%A0%87%E5%87%86%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%98%A0%E5%B0%84/index.html</url>
    <content><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>Cloudflare除了支持80&#x2F;443端口外，还支持一些其他的端口转发HTTP&#x2F;HTTPS的流量。<br>不过需要注意的是，需要开启CDN小黄云才能使用，如果您仅仅用于DNS，那么你的访问都是直接访问源站的。</p>
<h3 id="映射转发方式"><a href="#映射转发方式" class="headerlink" title="映射转发方式"></a>映射转发方式</h3><p>默认情况下Cloudflare的映射为全端口映射，即如果你源站使用的是8443非标准端口，使用Cloudflare服务后，访问的网址后面还需要带8443。<br>示例：<br>Cloudflare节点8080端口 映射到源站8080端口 只支持HTTP协议<br>Cloudflare节点8443端口 映射到源站8443端口 只支持HTTPS协议</p>
<h3 id="HTTP-端口"><a href="#HTTP-端口" class="headerlink" title="HTTP 端口"></a>HTTP 端口</h3><p>80<br>8080<br>8880<br>2052<br>2082<br>2086<br>2095</p>
<h3 id="HTTPS-端口"><a href="#HTTPS-端口" class="headerlink" title="HTTPS 端口"></a>HTTPS 端口</h3><p>443<br>2053<br>2083<br>2087<br>2096<br>8443</p>
<h3 id="例外情况"><a href="#例外情况" class="headerlink" title="例外情况"></a>例外情况</h3><p>对于启用了中国网络的域名的中国境内 HTTP&#x2F;HTTPS 流量<br>Cloudflare Apps<br>进行 Cloudflare 缓存<br>以上服务仅可以使用端口 80 和 443</p>
<h3 id="阻止转发"><a href="#阻止转发" class="headerlink" title="阻止转发"></a>阻止转发</h3><p>对于 Pro 及更高级别的计划，您可以使用 WAF 规则 ID 100015 阻止非 80 和 443 端口上的流量：”Block requests to all ports except 80 and 443”.</p>
]]></content>
  </entry>
  <entry>
    <title>WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法</title>
    <url>/2024-11-19-2024/11/2024-11-19-wordpress%E4%BD%BF%E7%94%A8litespeed-cache%E6%8F%92%E4%BB%B6%E4%BC%98%E5%8C%96%E5%90%8Ecss-js%E6%98%BE%E7%A4%BA%E4%B8%8D%E6%AD%A3%E5%B8%B8%E6%9C%80%E5%85%A8%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/index.html</url>
    <content><![CDATA[<p><img src="/images/20210627134928125.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图"></p>
<p>不少小伙伴在使用<a href="https://www.banzhuti.com/tag/15">WordPress</a>的<a href="https://www.banzhuti.com/tag/119">LiteSpeed Cache</a>插件进行网站优化的时候，会发现网站无法正常显示，一般是缺少CSS或者JS等问题，这如何解决呢？其实这是一个常见的问题，严格来说这有可能不是LSCache插件的问题。相反，它更可能是一个单一的CSS或JavaScript文件的问题，它与最小化或合并过程冲突导致。接下来搬主题就分享一下<a href="https://www.banzhuti.com/tag/15">WordPress</a>使用<a href="https://www.banzhuti.com/tag/119">LiteSpeed Cache</a>插件优化后CSS&#x2F;JS显示不正常最全解决办法。</p>
<p>试试下面的步骤来确定CSS和JavaScript的错误：</p>
<ol>
<li><p>关闭优化：从WordPress仪表板，导航到LiteSpeed Cache &gt; Page Optimization。点击CSS设置标签，将所有的CSS优化功能设置为关闭。单击JS设置标签，将所有JS优化功能设置为关闭。</p>
</li>
<li><p>清除缓存：导航至LiteSpeed Cache &gt; Toolbox &gt; Purge并按下Purge All按钮。</p>
</li>
<li><p>检查你的网站：重新加载页面。它仍然看起来显示不正常吗？</p>
</li>
</ol>
<p>如果看起来还是显示不正常，那么你的问题就不在LSCache插件上。</p>
<p>如果有一些变化或者显示又好一点了，那就是您的网站上有JavaScript或CSS与LSCache的某些优化功能不兼容。本篇文章搬主题将帮助您找到有问题的文件，并将其排除在优化之外。</p>
<h2 id="一、查找显示不正常及冲突原因"><a href="#一、查找显示不正常及冲突原因" class="headerlink" title="一、查找显示不正常及冲突原因"></a>一、查找显示不正常及冲突原因</h2><h3 id="1、验证它是否是一个优化问题"><a href="#1、验证它是否是一个优化问题" class="headerlink" title="1、验证它是否是一个优化问题"></a>1、验证它是否是一个优化问题</h3><p><img src="/images/20210627134937851.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图1" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图1"></p>
<p>在我们费尽心思找问题之前，让我们确定这确实是一个优化问题。</p>
<p>首先在没有启用任何JS或CSS优化的情况下查看你的网站，在链接的末尾加上<code>/?LSCWP_CTRL=before_optm</code>。</p>
<p>举例</p>
<blockquote>
<p>对于<code>www.banzhuti.com</code>，使用<code>www.banzhuti.com/?LSCWP_CTRL=before_optm</code>，查看没有优化的页面。</p>
</blockquote>
<p>在没有优化的情况下，网站看起来如何？</p>
<h4 id="a、它看起来仍然很糟糕"><a href="#a、它看起来仍然很糟糕" class="headerlink" title="a、它看起来仍然很糟糕"></a>a、它看起来仍然很糟糕</h4><p>如果您的网站仍然不能正常显示，那么问题就不在LSCache的优化功能上。</p>
<p>如果您完全关闭LSCache会怎样？网站看起来是否正常？如果是的话，那就是LSCache的其他功能干扰了您的网站。</p>
<p>如果关闭了LSCache，网站还是一团糟，那么这个问题就与您网站的其他功能有关，那么有可能是你的主机问题或者主题问题。</p>
<h4 id="b、现在看起来正常"><a href="#b、现在看起来正常" class="headerlink" title="b、现在看起来正常"></a>b、现在看起来正常</h4><p>这证实了问题出在优化功能的某个地方。现在你有两个选择。</p>
<ol>
<li><p>永远关闭CSS和JS的优化功能，并清除缓存。这是一个简单的解决方案，如果你选择这样做，即使不启用优化功能，你的网站仍然可以从缓存中大大受益。记住，你不必使用Combine或Minify优化来使用LSCache!</p>
</li>
<li><p>把这些选项重新打开，做一些故障诊断，找到有问题的文件，并把该文件排除在优化之外。如果你想走这条路，请继续进行下一个步骤。</p>
</li>
</ol>
<h3 id="2、识别是CSS还是JavaScript问题"><a href="#2、识别是CSS还是JavaScript问题" class="headerlink" title="2、识别是CSS还是JavaScript问题"></a>2、识别是CSS还是JavaScript问题</h3><p>找到问题文件的第一步是确定我们所看到的是一个JavaScript问题还是一个CSS问题。</p>
<p>让我们先检查一下JavaScript：</p>
<ol>
<li><p>检查与JS相关的优化功能是否被启用，CSS功能是否被禁用。</p>
</li>
<li><p>清除缓存，如果你在第一步中启用&#x2F;禁用了任何东西。</p>
</li>
<li><p>查看页面。它看起来如何？</p>
</li>
<li><p>如果很乱，那么你的某个JS文件就有问题。跳到查找和排除。</p>
</li>
<li><p>如果它很好，那么你的JS文件也很好，你可以继续检查CSS。</p>
</li>
</ol>
<p>如果不是JavaScript导致的问题，那么可能是CSS。让我们来验证一下。</p>
<ol>
<li><p>禁用与JS相关的优化功能，并重新启用CSS功能。</p>
</li>
<li><p>再次清除缓存。</p>
</li>
<li><p>查看该页面。它看起来怎么样？</p>
</li>
<li><p>如果很乱，证明你的一个CSS文件有问题。</p>
</li>
</ol>
<p>现在你知道是CSS还是JS的问题了，你需要找到导致问题的具体文件。</p>
<h3 id="3、找到并排除有问题的文件"><a href="#3、找到并排除有问题的文件" class="headerlink" title="3、找到并排除有问题的文件"></a>3、找到并排除有问题的文件</h3><blockquote>
<p>提示在这些说明中，我们将假设你有一个CSS文件造成了麻烦。如果你的问题实际上是与JavaScript有关，你仍然可以遵循这些相同的步骤。只要想象一下，说明中说 “JS “的地方都是 “CSS”。</p>
</blockquote>
<p>为了找到出错的文件，首先我们需要得到一个所有可能的CSS（或JS）文件的列表。一旦完成，我们将从优化中排除整个文件列表，然后逐一重新引入这些文件，直到我们找到罪魁祸首。</p>
<h4 id="获取列表"><a href="#获取列表" class="headerlink" title="获取列表"></a>获取列表</h4><p><img src="/images/20210627134943460.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图2" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图2"></p>
<ol>
<li><p>在您的URL末尾加上<code>/?LSCWP_CTRL=before_optm</code>，在禁用优化的情况下访问您的网站。这可以确保你得到的是原始CSS文件的列表，而不是LiteSpeed生成的版本。</p>
</li>
<li><p>使用浏览器的 “开发工具”，访问 “网络 “选项卡，并点击 “CSS”，只查看CSS文件。</p>
</li>
<li><p>重新加载该页面。你应该看到该页面使用的所有CSS文件的列表，列在名称栏中。</p>
</li>
<li><p>把这些文件列成一个清单。你将不得不把它们全部排除在优化之外，如下一步所述。</p>
</li>
</ol>
<p>如果你需要查看任何一个CSS文件的完整路径，点击该文件的名称，然后点击头文件。你会发现所选文件的完整位置被列为请求URL。</p>
<h4 id="测试列表"><a href="#测试列表" class="headerlink" title="测试列表"></a>测试列表</h4><p><img src="/images/20210627134951950.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图3" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图3"></p>
<ol>
<li><p>启用所有你想使用的优化功能。</p>
</li>
<li><p>将所有的CSS文件排除在优化之外。导航至LiteSpeed Cache &gt; 页面优化 &gt; 调整，并从您的列表中输入文件，每行一个，在CSS排除框中。</p>
</li>
<li><p>清除缓存并检查网站。它应该能够正确显示。</p>
</li>
<li><p>从排除列表中删除其中一个CSS文件，并清除缓存。</p>
</li>
<li><p>检查该网站。</p>
<ul>
<li><p>如果它看起来仍然正常，那么你刚刚删除的那个文件就不是有问题的文件。</p>
</li>
<li><p>如果网站看起来坏了，那么你就知道你已经找到了一个有问题的CSS文件。把它放回盒子里，让它留在那里。</p>
</li>
<li><p>如果还有更多未被选中的文件，请重复步骤4。</p>
</li>
</ul>
</li>
</ol>
<p>在这个过程结束时，你的网站应该看起来应该会正常显示，所有你想使用的优化功能都应该被启用，而且你应该有一个或多个有问题的CSS或JS文件被放在CSS排除或JS排除框中，并被排除在未来的优化之外。</p>
<h2 id="二、其他问题处理"><a href="#二、其他问题处理" class="headerlink" title="二、其他问题处理"></a>二、其他问题处理</h2><h3 id="1、硬盘空间被快速填满"><a href="#1、硬盘空间被快速填满" class="headerlink" title="1、硬盘空间被快速填满"></a>1、硬盘空间被快速填满</h3><p>一些插件可能会生成带有随机字符串的CSS或JavaScript。如果启用了CSS合并或JS合并，这种随机字符串的存在将导致为网站的每个页面创建一个新的组合文件。如果网站有一个单独的移动视图，那么将为网站的每个页面创建两个合并文件。对于每一个额外的缓冲区，将创建另一组合并文件。你可以想象，这并不理想，而且有可能会填满你的服务器空间。</p>
<p>要停止这种行为，你必须排除随机的CSS或JS被合并。</p>
<h4 id="a、查找和排除随机字符串"><a href="#a、查找和排除随机字符串" class="headerlink" title="a、查找和排除随机字符串"></a>a、查找和排除随机字符串</h4><ol>
<li><p>在两个独立的浏览器或隐身窗口中访问你的网站，在域名的后面加上<code>/?LSCWP_CTRL=before_optm</code>（如<code>example.com/?LSCWP_CTRL=before_optm</code>）。</p>
</li>
<li><p>在每个窗口中查看页面源代码</p>
</li>
<li><p>将每个源代码复制并粘贴到一个差异检查器网站（如<a href="https://www.diffchecker.com/%EF%BC%89%E5%B9%B6%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83">https://www.diffchecker.com/）并进行比较</a></p>
</li>
<li><p>你应该看到有几行CSS或JS突出显示。这就是两个页面加载的不同之处，并表明随机字符串的位置。</p>
</li>
<li><p>据推测，该字符串将有一个共同部分（例如，<code>abc_12345</code>和<code>abc_67890</code>，共同部分是<code>abc_</code>）。弄清楚你的页面是什么。</p>
</li>
<li><p>根据情况在CSS排除或JS排除中输入随机字符串的共同部分。</p>
</li>
<li><p>清除所有的CSS&#x2F;JS</p>
</li>
</ol>
<p><strong>举例</strong></p>
<p>在下图中，突出显示的区域都包括一个以.tdi_开头、以随机字符组结尾的CSS id（一个窗口为<code>2_35c</code>，另一个为<code>2_5f5</code>）。</p>
<p><img src="/images/20210627134958395.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图4" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图4"></p>
<p>你会在CSS优化中排除<code>.tdi_</code>这个字符串。找到随机字符串的另一种方法是使用相同的分离窗口差异检查方法，比较一个页面的组合CSS或JS文件。如果你关闭了minification，这是最简单的。</p>
<p><strong>举例</strong></p>
<p>继续上一个例子中的同一个网站，下面的图片显示了在不同的窗口中加载组合CSS文件时的差异。在这个例子中，你看到了更多关于tdi_的变化：<code>tdi_49_013</code>和<code>tdi_49_5d0</code>。</p>
<p><img src="/images/20210627135004610.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图5" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图5"></p>
<p>这表明排除<code>.tdi_</code>的决定是正确的。</p>
<h3 id="2、更新后的CSS没有正确地重新加载"><a href="#2、更新后的CSS没有正确地重新加载" class="headerlink" title="2、更新后的CSS没有正确地重新加载"></a>2、更新后的CSS没有正确地重新加载</h3><p>其实最有可能的是，这不是LSCache的问题，因为LSCWP不对静态文件进行缓存。</p>
<p>如果你的主题的CSS在更新后没有被正确加载，请检查你的浏览器缓存。重新加载是否有效？或者说你的网站服务器前有CDN或反向代理吗，比如Cloudflare？这些缓存机制可能需要被清除。</p>
<h3 id="3、关键CSS未加载"><a href="#3、关键CSS未加载" class="headerlink" title="3、关键CSS未加载"></a>3、关键CSS未加载</h3><p>首先，请确保我们所有的IP在你的服务器、你的<a href="https://www.banzhuti.com/tag/15">WordPress</a>安全防护插件（如果有的话）、或你网站上的其他安全设备（如CDN&#x2F;应用层防火墙）上都被列入白名单。你可以在这里找到需要白名单的IP。如果在这之后仍然不能工作，看看下面的情况。</p>
<ol>
<li><p>检查<code>wp-content/litespeed/ccss/</code>目录中是否有任何CSS文件，并检查是否有任何CSS文件被生成。该目录中应该为你的<a href="https://www.banzhuti.com/tag/15">WordPress</a>网站上的每一个文章类型生成文件。</p>
</li>
<li><p>如果CSS文件不存在或者CCSS文件夹不存在，请等待cron的执行。cron会从我们的云服务器上生成CCSS。</p>
</li>
<li><p>如果CSS文件存在并且是有效的，请在管理栏的LSCache菜单中做一个Purge All – LScache选项。新的CSS不会被包含在旧的缓存页面中。</p>
</li>
<li><p>如果CSS文件包含ccss-timeout，这意味着当我们试图生成关键CSS时，与你的服务器的通信超时了。在这种情况下，请手动删除该CSS文件，并清除所有-LScache，这样就可以重新生成。</p>
</li>
<li><p>如果CSS文件包含语法错误，那么你的某个CSS文件就包含了一个错误。你可以像这样缩小实际有错误的CSS文件的范围。</p>
<ul>
<li><p>关闭CSS合并和最小化功能</p>
</li>
<li><p>清除所有和清除关键的CSS</p>
</li>
<li><p>尝试重新生成CCSS。在<code>wp-content/litespeed/ccss/</code>中生成的下一个CSS文件应该显示出有语法错误的真正CSS文件。</p>
</li>
<li><p>修复所指的CSS文件中的语法错误，并清除关键CSS。</p>
</li>
<li><p>现在再重新启用CSS Minify和CSS Combine。</p>
</li>
</ul>
</li>
</ol>
<h3 id="4、仍然看到启用了关键CSS的FOUC"><a href="#4、仍然看到启用了关键CSS的FOUC" class="headerlink" title="4、仍然看到启用了关键CSS的FOUC"></a>4、仍然看到启用了关键CSS的FOUC</h3><p>启用 “生成关键CSS”（CCSS）功能应该是为了消除 “网站加载时无样式内容的闪烁”（FOUC），那么为什么有时你仍然会看到它，即使该设置被配置为ON？</p>
<p><img src="/images/20210627135010362.jpg" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图6" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图6"></p>
<p>因为当启用异步加载CSS时，你网站的CSS将与HTML同时加载。因此，任何在相关的CSS之前加载的内容都会被渲染成没有样式的，就像这张截图一样。</p>
<p><img src="/images/20210627135015255.jpg" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图7" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图7"></p>
<p>生成关键CSS功能的目的是阻止这种行为。它将重要的CSS样式规则内嵌到页面的HTML中，以便这些规则在内容加载之前被执行。</p>
<p>但有时，你可能会注意到没有样式的内容，即使启用了生成关键CSS。</p>
<p>原因是：</p>
<p>当CCSS没有被内嵌到页面的HTML中时，就会发生FOUC。</p>
<p>当一个页面显示为无样式时，检查源代码。你会看到与此类似的东西：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style id=&quot;litespeed-optm-css-rules&quot;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>在下图中，它是第4行红色标记的区域。</p>
<p><img src="/images/20210627135021499.jpg" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图8" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图8"></p>
<p><code>&lt;style&gt;</code>标签在那里，但它们是空的，这意味着CCSS已经启用，但规则还没有生成&#x2F;插入到页面中。</p>
<p><strong>可能的解释</strong></p>
<p>那么，为什么CCSS还没有被插入到页面中呢？</p>
<p>生成Critical CSS需要几秒钟，如果你把Generate Critical CSS in the Background设置为ON，LSCache就会把页面添加到一个基于cron的队列中，这样CCSS就会在稍后被计算。因此，可能会出现在CCSS可用之前加载页面的情况，这就导致了FOUC。</p>
<p><strong>请注意，相同类型的页面共享相同的CCSS。例如，如果你有post1、post2和post3，当你访问post1时，将产生CCSS。然后，当访问post2和post3时，该CCSS将存在并准备使用。</strong></p>
<p><strong>解决方案</strong></p>
<p>最简单的解决方案是将 “在后台生成关键性CSS “设置为 “关闭”。在前台生成CCSS确实需要第一个访问者等待几秒钟，但它消除了FOUC问题。</p>
<p>否则，可以尝试在生成CCSS规则后清除所有 – LSCache。这将允许LSCache将CCSS插入到生成CCSS之前已经被缓存的页面。</p>
<p><img src="/images/20210627135026230.jpg" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图9" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图9"></p>
<p><strong>验证</strong></p>
<p>当CCSS被正确插入时，你会看到规则被插入<code>&lt;style&gt;</code>标签之间，如下图中的红线所示。</p>
<p><img src="/images/20210627135032510.jpg" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图10" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图10"></p>
<h3 id="5、调试关键CSS生成"><a href="#5、调试关键CSS生成" class="headerlink" title="5、调试关键CSS生成"></a>5、调试关键CSS生成</h3><p>如果你已经验证了CCSS未能生成，这可能是由于语法错误造成的。有几种方法可以在你的CSS中寻找这种错误。</p>
<h4 id="方法1：QUIC-Cloud仪表板"><a href="#方法1：QUIC-Cloud仪表板" class="headerlink" title="方法1：QUIC.Cloud仪表板"></a>方法1：<a href="https://www.banzhuti.com/tag/116">QUIC.Cloud</a>仪表板</h4><p>如果你已经将你的网站使用<a href="https://www.banzhuti.com/tag/116">QUIC.Cloud</a>，你可以在<a href="https://www.banzhuti.com/tag/116">QUIC.Cloud</a>仪表板上检查。导航到CCSS选项卡，并在最近请求区域寻找任何警告，像这样：</p>
<p><img src="/images/20210627135036218.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图11" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图11"></p>
<p>在这个例子中，明确列出了一个CSS语法错误，以及出现错误的CSS文件的路径和错误的描述（Unclosed block）。修正这个错误，CCSS就可以正常工作了。</p>
<h4 id="方法2：你的文件系统"><a href="#方法2：你的文件系统" class="headerlink" title="方法2：你的文件系统"></a>方法2：你的文件系统</h4><p>如果你没有将你的网站使用<a href="https://www.banzhuti.com/tag/116">QUIC.Cloud</a>，你可以直接检查你的文件系统。通过FTP或控制面板的文件管理器导航到<code>/wp-content/litespeed/ccss</code>目录。查看该目录中的CSS文件。其中一个文件应该包含一个语法错误。</p>
<p><img src="/images/20210627135041785.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图12" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图12"></p>
<p>在这个例子中，home.CSS给出了Unclosed block语法错误，并告诉我们在哪里可以找到要修复的文件。</p>
<h4 id="方法3：HTML源代码"><a href="#方法3：HTML源代码" class="headerlink" title="方法3：HTML源代码"></a>方法3：HTML源代码</h4><p>最后，你可以检查HTML源代码，尽管这种方法不像前两种方法那样可靠，也不那么受欢迎。</p>
<p><img src="/images/20210627135046351.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图13" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图13"></p>
<p>在这个例子中，你可以看到在你的 关键CSS 应该被插入的地方显示了<code>Unclosed block</code>的错误。</p>
<h4 id="寻找原始CSS文件"><a href="#寻找原始CSS文件" class="headerlink" title="寻找原始CSS文件"></a>寻找原始CSS文件</h4><p>不管使用什么方法，你可能发现了这样的情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*CssSyntaxError: /wp-content/litespeed/cssjs/5aaa0.css:1:1: Unclosed block*/</span><br></pre></td></tr></table></figure>

<p><code>/wp-content/litespeed/cssjs/5aaa0.css</code>是导致问题的文件，但这并不是原始的CSS文件。你在<code>/wp-content/litespeed/</code>目录中发现的任何文件都是由LiteSpeed Cache插件生成的文件。</p>
<p>在这种情况下，它是通过CSS Combine和&#x2F;或CSS Minify功能生成的优化CSS文件。我们无法修复生成文件中的语法错误。我们需要从源头上修复它。</p>
<p>因此要找到原始的源CSS，你需要关闭优化并再次检查。</p>
<p>接下来导航到 “页面优化”&gt;”CSS”，将 “CSS合并”设置为 “关闭”，”CSS最小化 “设置为 “关闭”。保存你的修改。</p>
<p><img src="/images/20210627135051478.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图14" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图14"></p>
<p>导航至工具箱&gt;清理，执行全部清理和全部清理–CCSS，或从管理栏中进行，如图所示。<a href="javascript:;"></a></p>
<p><img src="/images/20210627135056814.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图15" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图15"></p>
<p>访问该网页，以便重新生成CCSS。使用你第一次使用的任何方法来重新检查CCSS，并寻找语法错误。<a href="javascript:;"></a></p>
<p><img src="/images/20210627135101378.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图16" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图16"></p>
<blockquote>
<p>小提示CCSS的生成是有时间限制的，以避免服务器过载。如果你不能马上让你的CCSS重新生成，请等待几分钟后再试。</p>
</blockquote>
<p>一旦CCSS重新生成，你的错误检查应该显示类似以下内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*CssSyntaxError: /wp-includes/css/dist/block-library/style.min.css:1:1: Unclosed block*/</span><br></pre></td></tr></table></figure>

<p>这对你更有用，因为它是原始的CSS文件，你应该能够自己修复。或者，至少，你应该能够联系到向你提供该文件的主题作者或插件作者。</p>
<p>如果你不确定这个CSS来自哪里，文件名应该会给你一个提示。如果它是来自一个插件，其路径应该是<code>/wp-content/plugins/plugin-name/path/file.css</code>。主题的CSS应该看起来像<code>/wp-content/themes/theme-name/path/file.css</code>。</p>
<p><strong>注意：</strong></p>
<p>为了说明这个问题，我们故意破坏了一个<a href="https://www.banzhuti.com/tag/15">WordPress</a>的默认CSS文件来触发一个语法错误。通常情况下，<code>/wp-includes/css/dist/block-library/style.min.css</code>不会是一个有问题的文件。</p>
<h3 id="6、绕过AJAX的优化"><a href="#6、绕过AJAX的优化" class="headerlink" title="6、绕过AJAX的优化"></a>6、绕过AJAX的优化</h3><p>如果网站存在冲突，需要在AJAX中绕过优化功能，你可以在主题的functions.php中添加一些代码，或者在使用AJAX时调用相应的过滤器。</p>
<p>在主题的<code>functions.php</code> 文件加入</p>
<p>将以下内容添加到你的主题的 <code>functions.php</code> 文件中: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defined( &#x27;DOING_AJAX&#x27; ) &amp;&amp; add_filter( &#x27;litespeed_can_optm&#x27;, &#x27;__return_false&#x27; );</span><br></pre></td></tr></table></figure>

<h4 id="调用筛选器"><a href="#调用筛选器" class="headerlink" title="调用筛选器"></a>调用筛选器</h4><p>当使用AJAX时，你可以调用上述筛选器，并设置返回false。</p>
<h3 id="7、DevTools加载SourceMap失败"><a href="#7、DevTools加载SourceMap失败" class="headerlink" title="7、DevTools加载SourceMap失败"></a>7、DevTools加载SourceMap失败</h3><p>有的时候经过优化后，Chrome浏览器有时可能会在其开发者工具中显示类似以下的信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DevTools failed to load SourceMap: Could not load content for https://domain.com/wp-content/litespeed/cssjs/xxxx.js.map: HTTP error: status code 404 , net :: ERR_HTTP_RESPONSE_CODE_FAILURE</span><br></pre></td></tr></table></figure>

<p>不要担心，这绝对是正常的。该工具正试图为一个已被粉碎的JS或CSS文件加载资源图，以便它可以不被粉碎。当然，这个文件并不存在，所以它返回一个404错误。</p>
<p><img src="/images/20210627135108107.png" alt="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图17" title="WordPress使用LiteSpeed Cache插件优化后CSS/JS显示不正常最全解决办法插图17"></p>
<p>你可以忽略这个错误。它不会以任何方式影响你的网站。</p>
<p><a href="https://www.banzhuti.com/wordpress-litespeed-cache-css-js-display-error.html">WordPress使用LiteSpeed Cache插件优化后CSS&#x2F;JS显示不正常最全解决办法 - 搬主题</a></p>
]]></content>
  </entry>
  <entry>
    <title>提升WordPress的网站的速度性能优化的终极指南</title>
    <url>/2024-11-19-2024/11/2024-11-19-%E6%8F%90%E5%8D%87wordpress%E7%9A%84%E7%BD%91%E7%AB%99%E7%9A%84%E9%80%9F%E5%BA%A6%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/index.html</url>
    <content><![CDATA[<p>众所周知，很多初学者站长对于Wordpress网站的优化是摸不着头脑的， 并不知道从何下手，那么本篇文章就将教您如何正确的优化您的网站达到一个可观的访问速度， 从而达到提高网站SEO评分和提高网站访客的效果。</p>
<p>本文将会针对在中国内地的服务器以及全球服务器两大优化方法进行阐述，略微有一些不同。 首先我们要了解网站的受众是哪些国家地区，我们针对这些群体进行相应的优化。</p>
<p>当顾客坐在餐厅吃饭时，服务员的上菜速度慢，服务不积极通常会导致有一个较差的用餐体验，未来的顾客也就更少了。同样，缓慢的网站速度可能导致搜索引擎SEO排名不佳、网站总体流量降低以及负面的用户体验。</p>
<p>网站速度，或网站性能，是指浏览器能够从给定站点加载网页全部功能的速度。在浏览器中呈现缓慢加载的低性能网站可能会失去用户。相反，快速加载的网站通常会收到更多流量，并具有更高的转换率。这里有一个<a href="https://www.thinkwithgoogle.com/consumer-insights/consumer-trends/mobile-site-load-time-statistics/">来自Google官方的数据调查</a>，是的，您没看错，如果加载时间超过 3 秒，53% 的访问者会放弃您的网站。</p>
<figure>

<p><img src="/images/image-1.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<figcaption>

<p>不同速度下客户转换率对比</p>
</figcaption>

</figure>

<h2 id="速度真的很重要吗？"><a href="#速度真的很重要吗？" class="headerlink" title="速度真的很重要吗？"></a>速度真的很重要吗？</h2><p>多项研究表明，网站速度会影响转化率（即用户完成目标操作的比率）。与速度较慢的网站相比，不仅更多用户停留在快速加载的网站上，而且他们的转化率也更高。许多公司发现页面加载时间减少几毫秒都会增加转化率。</p>
<p>试问你自己，如果遇到一个要很久时间才能打开的网站，你是否会放弃访问这个网站寻找其他类似的网站？</p>
<p>速度的快慢会影响以下：</p>
<ul>
<li><p>转换率</p>
</li>
<li><p>跳出率</p>
</li>
<li><p>SEO搜索引擎排名效果</p>
</li>
<li><p>用户体验</p>
</li>
</ul>
<figure>

<p><img src="/images/image-47.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<figcaption>

<p>网站访问速度对网站跳出率的影响</p>
</figcaption>

</figure>

<p><strong>所以我们接下来一步一步讲解，网站到底该如何进行优化？</strong></p>
<h2 id="服务器的配置如何选择？"><a href="#服务器的配置如何选择？" class="headerlink" title="服务器的配置如何选择？"></a>服务器的配置如何选择？</h2><ul>
<li><p>如果您是为了使用网站进行<strong>博客文章类</strong>创作， 那么我们推荐您购买配置在2-4h&#x2F;2-4g 基本上足够了。</p>
</li>
<li><p>如果您需要搭建一个<strong>电子商城&#x2F;独立站</strong>， 那我推荐您选择 专为电子商务优化的虚拟主机， 这将不需要让您花费时间在维护服务器上。 或者选择配置为4h4g或更高配置的服务器，带宽大于等于5M。</p>
</li>
</ul>
<p>选择一个良好的服务器， 在优化性能和速度中发挥的重要的作用，也是取决于你的网站能否承受大量的流量， 所以优先选择大厂的服务器进行建站， 通常情况下，大厂的服务器更加有品质保障。</p>
<p>通过这两种典型的案例，我将为您在下文阐述在动态化的网站和静态化的网站的优化中有所不同的地方。</p>
<h2 id="优化总共分为哪些方面？"><a href="#优化总共分为哪些方面？" class="headerlink" title="优化总共分为哪些方面？"></a>优化总共分为哪些方面？</h2><p>很多初学者根据网站上的教程一步一步的搭建好自己的网站，看了许多的插件和配置教程， 根据步骤进行优化后，并没有达到一个良好的效果，因为他们并不知道网站优化分为哪几个层面，要从哪些地方下手。</p>
<p>首先，Wordpress是动态的，并不是纯静态的页面，每一次访问网站，都会动态的加载网站架构。 所以，每当一个人进行访问，都需要消耗一定的服务器资源。 那么当访问的人越来越多之后网站就会造成拥堵的状况。</p>
<p>所以我们需要拥有缓存插件，将动态化的内容提前进行缓存。 这也是为什么安装了缓存插件之后，我们的网站能够提高访问速度。</p>
<p>简单的说一个网站打开的流程：wordpress使用PHP为后端服务，由PHP进行html内容渲染，然后传入用户浏览器。</p>
<p>所以我们需要从三个方面进行优化， <strong>数据库优化</strong>、 <strong>页面缓存优化</strong>、 <strong>静态资源优化</strong>。</p>
<figure>

<p><img src="/images/image-27.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<figcaption>

<p>图中解释了Wordpress的工作原理</p>
</figcaption>

</figure>

<p>每当客户访问了我们的网站，PHP首先会配合数据库进行整理，输出一个HTML的文件， 可供网站浏览器访客进行阅览。 所以这会消耗服务器巨大的资源。 为什么中国很多人不喜欢使用这款CMS， 因为他确实非常的臃肿，如果不进行优化会非常的吃力。</p>
<h3 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h3><p>通常我们会使用宝塔或者一些服务器面板，可视化管理工具进行安装Wordpress，一般会选择基于NGINX进行配置， 如果你的服务器只运行Wordpress， 那么我们推荐您使用国际版的宝塔<a href="https://www.aapanel.com/">aapanel</a>，并安装**<a href="https://www.litespeedtech.com/">OpenLiteSpeed Web</a>**来代替NGINX。</p>
<p><img src="/images/image-28-1024x256.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<p>他提供了高性能，并且非常轻量化的占用， 并且专门为Wordpress进行优化。 通过服务器端与Wordpress的LiteSpeed插件深度融合， 你只需要这么一个插件就能提升你的网络性能和速度。</p>
<p><img src="/images/image-29.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<figure>

<p><img src="/images/image-30-1024x597.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<figcaption>

<p>各个缓存插件对比的数据-webspeedtools</p>
</figcaption>

</figure>

<p>LiteSpeed Cache 为您的网站提供各种速度优化功能。从缩小化HTML、CSS 和 JS 文件，到优化图像、生成关键 CSS、优化数据库以及 LiteSpeed Cache 插件中内置的许多其他功能。简而言之，您将获得优化网站所需的一切内容。</p>
<h3 id="快速优化检查清单"><a href="#快速优化检查清单" class="headerlink" title="快速优化检查清单"></a>快速优化检查清单</h3><p>熟练网站操作的站长们，我们提供了一个快速优化清单，省去了下面复杂的内容讲解。</p>
<ul>
<li><p>-初阶优化清单</p>
<ul>
<li><p>使用CDN加速网站，可根据<strong>网站和主主题性质</strong>考虑是否全站静态优化</p>
</li>
<li><p>图片&#x2F;视频等静态内容通过OSS&#x2F;COS等第三方存储桶储存，减缓服务器带宽压力（带宽小可考虑）</p>
</li>
<li><p>使用opcache和Redis&#x2F;Memcached扩展</p>
</li>
<li><p>优化网站图片大小、视频等</p>
</li>
<li><p>减少不必要或功能重复的插件使用</p>
</li>
<li><p>安装Wordpress缓存插件并合理配置，并优化CSS、JS、懒加载、预加载等</p>
</li>
<li><p>安装Wordpress轻量化插件，可选<a href="https://wordpress.org/plugins/wpjam-basic/">WPJAM Basic</a>、<a href="https://www.freewplugin.com/wordpress-paid-plugins/perfmatters.html">Perfmatters</a>等减法插件</p>
</li>
<li><p>使用最新版的 PHP</p>
</li>
</ul>
</li>
<li><p>-高阶优化清单</p>
<ul>
<li><p>使用系统自带字体，不加载字体包。将Google字体替换或本地托管</p>
</li>
<li><p>尽可能减少外部HTTP请求，禁用或整合成一个请求文件</p>
</li>
<li><p>减少数据库调用（需要PHP和数据库技术能力），尽可能做到首页 0 SQL</p>
</li>
<li><p>单独分析可延缓加载Javascript进行优化</p>
</li>
<li><p>推迟或删除未使用的CSS</p>
</li>
<li><p>将长帖子文章拆分成多个页面</p>
</li>
<li><p>单独Debug每个页面，可使用Debug Bar插件来调试数据库查询</p>
</li>
</ul>
</li>
</ul>
<h2 id="优化数据库以提高响应性能"><a href="#优化数据库以提高响应性能" class="headerlink" title="优化数据库以提高响应性能"></a>优化数据库以提高响应性能</h2><p>我们需要在服务器端的PHP中安装相应的扩展，通常在服务器面板中能够找到，这里我们以aapanel为例，我们需要安装<strong>memcached</strong>或者<strong>redis</strong>(二选一）如果访问量大并且涉及到动态内容多，那么建议选择redis作为持久对象缓存后端</p>
<p><img src="/images/image-31.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<p>当扩展安装完毕之后，我们需要来到Wordpress后台进行安装相应的插件，</p>
<ul>
<li><p>如果你选择的是<strong>memcached</strong>，需安装<a href="https://wordpress.org/plugins/memcached-redux/">Memcached Redux</a>或类似的插件</p>
</li>
<li><p>如果你选择的是<strong>redis</strong>，需安装<a href="https://wordpress.org/plugins/redis-cache/">Redis Object Cache</a>或类似的插件</p>
</li>
</ul>
<p>安装并成功配置完插件后，数据库对象缓存部分我们就大功告成了。如果您还想提升您数据库的性能，可以安装一些数据库的清理插件（<a href="https://www.freewplugin.com/wordpress-paid-plugins/wp-optimize-premium.html">WP-Optimize Premium</a>），在我们的高级插件中均有收录。</p>
<h2 id="安装Wordpress页面缓存插件"><a href="#安装Wordpress页面缓存插件" class="headerlink" title="安装Wordpress页面缓存插件"></a>安装Wordpress页面缓存插件</h2><p>在前面提到Wordpress的网站是动态化加载的，所以这也是为什么我们需要安装缓存插件的目的，通常能够提升数倍的访问速度。</p>
<p>如果您的网站为纯静态博客文章类，没有任何在线动态功能的网站，您可以选择使用CDN强制缓存所有的内容，那么缓存插件就是一个可选的需求，不一定要安装页面缓存插件，这并不会带来多大的提升。</p>
<p>根据缓存测评专家网站**<a href="https://webspeedtools.com/">webspeedtools.com</a>**提供的数据表明，WP Rocket是除LiteSpeed外首选的页面缓存插件。接下来我们会根据缓存性能进行排名推荐可靠的缓存插件集合。</p>
<h3 id="第一名-WP-Rocket"><a href="#第一名-WP-Rocket" class="headerlink" title="第一名-WP Rocket"></a>第一名-WP Rocket</h3><p><img src="/images/image-32.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<p>WP Rocket拥有所有缓存插件中最简单的用户界面之一。除了缓存外，它还提供了网站所需的各种优化功能，以实现适当的速度优化。此外，即使不更改任何默认设置，它也能很好地与各种网站配合使用。这三点结合起来，使WP Rocket成为大多数人的理想选择。</p>
<p>它是这个列表中唯一一个只有高级版本而没有免费或免费增值版本的插件。但是，对WP Rocket的将使您能够轻松启用缓存，并利用所有必要的WordPress网站速度优化。</p>
<p><a href="https://www.freewplugin.com/wordpress-paid-plugins/wp-rocket.html">下载WP Rocket</a></p>
<h3 id="第二名-WP-Super-Cache"><a href="#第二名-WP-Super-Cache" class="headerlink" title="第二名-WP Super Cache"></a>第二名-WP Super Cache</h3><p><img src="/images/image-33.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<p>WP Super Cache由创建WordPress的同一家公司开发。因此，它通常与各种网站具有非常高的兼容性。WordPress没有内置的缓存系统，但WP Super Cache可以很轻松地填补这个空白。事实上，它只提供缓存，而没有许多其他缓存插件提供的其他优化功能。</p>
<p>它有一个简易模式，只提供两个选项，即启用或禁用缓存。因此，它不需要对缓存中涉及的复杂设置有任何先前的知识，这使得它非常适合初学者。但它也有一个高级模式，可以为您提供大量选项，以根据您的需求精确配置站点上的缓存。</p>
<p>如果您希望使用一个没有其他内置优化功能的缓存插件，这可能会使您的网站变得臃肿，那么WP Super Cache可能正是您的正确选择。</p>
<p><a href="https://wordpress.org/plugins/wp-super-cache/">下载WP Super Cache</a></p>
<h3 id="第三名-WP-Fastest-Cache-Premium"><a href="#第三名-WP-Fastest-Cache-Premium" class="headerlink" title="第三名-WP Fastest Cache Premium"></a>第三名-WP Fastest Cache Premium</h3><p><img src="/images/image-34.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<p>WP Fastest Cache在所有缓存插件中拥有最简单的用户界面之一。但是，这种简单并不意味着它缺乏关键的定制选项。事实上，它的简单性与足够的定制选项相结合，使得大多数仅具有有限缓存知识的初学者可以轻松配置WP Fastest Cache。</p>
<p>除了缓存之外，WP Fastest Cache还提供了WordPress网站所需的其他定制功能。当您将简约界面、额外优化功能、最小定制选项结合在一起时，WP Fastest Cache很容易成为许多人的值得选择的插件。</p>
<p><a href="https://www.freewplugin.com/wordpress-paid-plugins/wp-fastest-cache-premium.html">下载WP Fastest Cache Premium</a></p>
<h3 id="第四名-W3-Total-Cache-Pro"><a href="#第四名-W3-Total-Cache-Pro" class="headerlink" title="第四名-W3 Total Cache Pro"></a>第四名-W3 Total Cache Pro</h3><p><img src="/images/image-35.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<p>W3 Total Cache充满了定制选项，可以让您对网站上的缓存工作进行广泛的控制。事实上，除了一般设置外，您还会发现针对不同类型缓存的单独设置页面。然而，这也意味着您需要对缓存有很深入的理解，才能充分利用这些定制功能。</p>
<p>W3 Total Cache还提供了一些其他优化功能，如CSS和JS文件的缩小、组合和内联。对其功能的广泛控制使W3 Total Cache成为一个很好的选择，如果您想要精确地配置所有内容。</p>
<p><a href="https://www.freewplugin.com/wordpress-paid-plugins/w3-total-cache-pro.html">下载W3 Total Cache Pro</a></p>
<blockquote>
<p>请注意：并非将全部功能开启则为最佳优化状态，请结合网站实际情况，对于JS CSS这些优化设置是否开启需要进行实际测试，如果开启影响了网站的功能或是样式，请将其关闭，不能盲目的追求甚微的速度而影响了客户的正常访问，这样得不偿失。</p>
</blockquote>
<h2 id="优化静态资源以缩减网站大小"><a href="#优化静态资源以缩减网站大小" class="headerlink" title="优化静态资源以缩减网站大小"></a>优化静态资源以缩减网站大小</h2><p>我们的网站除了需要动态加载的内容外，我们还有很多静态的资源需要我们进行优化，才能达到最完美的速度，比如网站里面的图片、视频、字体…….</p>
<h3 id="优化图像以提高速度"><a href="#优化图像以提高速度" class="headerlink" title="优化图像以提高速度"></a>优化图像以提高速度</h3><p><img src="/images/image-36.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<p>我们在网站上放置的图片通常情况都非常大，所以如果您的服务器带宽并不是很高，那么多个访客进行访问就会消耗大量的带宽，从而造成<strong>网络堵车</strong>。这通常发生在中国内地的服务器，因为中国的服务器带宽都非常的小，高带宽服务器需要非常昂贵的价格。</p>
<p>在全球其他地区多为G口带宽，应对大型图片视频基本上没有什么压力。但考虑到客户访问我们的网站并不是都是拥有很快的网络，可能他正在使用4G&#x2F;3G的移动手机进行访问，过大的图片会让手机压力倍增，完整加载出一个页面可能需要花费很久的时间。</p>
<p>为了保证尽可能让所有人都能顺畅的访问我们的网站，我们需要对图片进行<strong>缩小</strong>和<strong>动静态分离</strong>。</p>
<h4 id="缩小网站图片"><a href="#缩小网站图片" class="headerlink" title="缩小网站图片"></a>缩小网站图片</h4><p>一般通过两种模式进行缩小，下载Wordpress图片缩小插件，或是将图片拷贝到本地通过PS等软件批量进行压缩再回传到网站。但考虑到方便的问题，这里我们推荐通过插件的模式进行缩小。</p>
<p>我们网站采用了付费的<strong>Imagify</strong>插件（WP Rocket同款开发者），这个插件采用了在线的优化工作方式，所以并没有办法进行GPL，通过安装并注册可以获得免费的API 如果您的网站并没有太多的图片，那么免费方案足够使用。还有一些其他的图片优化插件<a href="https://www.freewplugin.com/wordpress-paid-plugins/wp-smush-pro.html">WP Smush Pro</a>。</p>
<h4 id="动静态分离"><a href="#动静态分离" class="headerlink" title="动静态分离"></a>动静态分离</h4><p><img src="/images/image-37.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<p>WordPress动静态分离是一种优化WordPress网站性能的方法。在传统的WordPress网站中，每当用户请求页面时，WordPress会动态生成HTML页面，这意味着每次访问时都需要执行PHP代码和查询数据库。这种方法对于小型网站来说可能没有太大问题，但对于高流量的网站来说可能会导致性能下降和服务器负载增加。</p>
<p>动静态分离通过将动态生成的内容与静态内容分离开来，以提高网站的性能和速度。具体来说，动态内容通常包括WordPress主题的外观和布局，以及文章、页面内容等动态生成的内容。而静态内容则是指不经常变化的元素，如图片、CSS文件、JavaScript文件等。</p>
<p><img src="/images/image-38.png" alt="提升WordPress的网站的速度性能优化的终极指南-2024" title="FreeWPlugin资源网"></p>
<ol>
<li><p><strong>图床（Image Hosting）</strong>：</p>
<ul>
<li><p>图床是指将网站中的图片等静态资源上传到第三方托管服务上，例如Imgur、Flickr、或者专门的图片托管服务。上传后，你会获得每个资源的唯一URL。</p>
</li>
<li><p>在WordPress中，你可以使用图片URL替代上传图片到WordPress服务器的做法。这意味着当用户访问网站时，图片会从外部图床服务器上加载，而不是从WordPress服务器上加载，从而减少WordPress服务器的负载。</p>
</li>
<li><p>图床的主要优点是它可以帮助减轻WordPress服务器的负担，并且通常提供了良好的图片加载速度。但是，需要确保所选图床服务是可靠的，可用性高且加载速度快。</p>
</li>
</ul>
</li>
<li><p><strong>CDN（Content Delivery Network）</strong>：</p>
<ul>
<li><p>CDN是一种将网站的静态资源缓存到全球各地的服务器上，并通过最近的服务器提供这些资源给用户的服务。一旦用户请求静态资源，CDN会从离用户最近的服务器上提供资源，这样可以减少网络延迟和提高网站加载速度。</p>
</li>
<li><p>在WordPress中使用CDN通常需要安装相应的CDN插件，例如Cloudflare、Amazon CloudFront、或者MaxCDN。这些插件可以自动将网站的静态资源上传到CDN，并重写网站页面中的资源链接，以便从CDN提供静态资源。</p>
</li>
<li><p>CDN的主要优点是它可以显著提高网站的加载速度，并减轻WordPress服务器的负载。此外，它还提供了一些额外的安全功能，例如DDoS防护和SSL加密。</p>
</li>
</ul>
</li>
</ol>
<p>关于CDN选择的问题，我们以中国和中国外其他地区进行相应的方案推荐，如果你是在中国的服务器，那么我们推荐选择大厂的CDN（腾讯云、阿里云…)。</p>
<p>如果你的服务器不在中国，我首先推荐Cloudflare，它提供免费的计划，让初学者也可以轻松配置和测试，如果你是博客网站那么我推荐使用Super Page Cache for Cloudflare一个插件，即可搞定网站的速度，它将会帮你配置将网页加载到CDN，这样内容都在CDN上加载并不会在本地服务器加载，从而达到最快的速度。</p>
<p>如果你是电子商务或者一些需要在线类业务的网站，推荐使用Cloudflare的付费计划，来针对性的进行配置，让全球任意地方极速访问你的站点。</p>
<h2 id="如何测试我的网站速度？"><a href="#如何测试我的网站速度？" class="headerlink" title="如何测试我的网站速度？"></a>如何测试我的网站速度？</h2><p>为了测试您的网站在桌面和移动设备上的速度，您可以使用网页速度测试网站，请考虑您网站的访问地区，来选择合适的测试网站。</p>
<ul>
<li><p><a href="https://pagespeed.web.dev/">https://pagespeed.web.dev/</a>-Google自家测速平台</p>
</li>
<li><p><a href="https://tools.pingdom.com/">https://tools.pingdom.com/</a>-海外测速平台</p>
</li>
<li><p><a href="https://gtmetrix.com/">https://gtmetrix.com/</a>-海外测速平台，提供详细站点速度报告</p>
</li>
<li><p><a href="https://www.webpagetest.org/">https://www.webpagetest.org/</a>-海外测速平台，可选电脑手机各个地球测速</p>
</li>
<li><p><a href="https://www.itdog.cn/http/">https://www.itdog.cn/http/</a>-中国内地测速平台</p>
</li>
<li><p><a href="https://boce.aliyun.com/detect/http">https://boce.aliyun.com/detect/http</a>-阿里云全国网络拨测</p>
</li>
</ul>
<p>通过输入网页地址进行测试后，它会告诉您该网页从所选位置加载需要多少秒。事实上，它会为您提供所有这些位置的首次访问和重复访问的加载时间以及两次访问的平均加载时间。现在，根据结果，您将能够查看您的网站加载速度是否足够快或者是否需要任何改进。</p>
<p>就是这样！我们希望本文能帮助您了解如何提高 WordPress 的速度和性能。通过合适的服务器配置、数据库优化、页面缓存优化、静态资源优化以及选择适当的CDN服务，可以有效提高WordPress网站的访问速度和性能。优化网站速度不仅可以提升用户体验，还有助于提高SEO评分和吸引更多的访客。</p>
<p>继续尝试这些技术。不要忘记在实施这些最佳实践之前和之后测试您的网站速度。您会惊讶地发现这些更改将提高您的 WordPress 性能。</p>
<p><a href="https://www.facebook.com/sharer/sharer.php?u=https://www.freewplugin.com/best-collection/wordpress-performance-speed.html"></a><a href="https://twitter.com/intent/tweet?url=https://www.freewplugin.com/best-collection/wordpress-performance-speed.html&text=%E6%8F%90%E5%8D%87WordPress%E7%9A%84%E7%BD%91%E7%AB%99%E7%9A%84%E9%80%9F%E5%BA%A6%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97-2024"></a><a href="https://www.freewplugin.com/best-collection/wordpress-performance-speed.html#"></a><a href="https://www.linkedin.com/shareArticle?url=https://www.freewplugin.com/best-collection/wordpress-performance-speed.html&title=%E6%8F%90%E5%8D%87WordPress%E7%9A%84%E7%BD%91%E7%AB%99%E7%9A%84%E9%80%9F%E5%BA%A6%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97-2024"></a><a href="https://t.me/share/url?url=https://www.freewplugin.com/best-collection/wordpress-performance-speed.html&text=%E6%8F%90%E5%8D%87WordPress%E7%9A%84%E7%BD%91%E7%AB%99%E7%9A%84%E9%80%9F%E5%BA%A6%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97-2024"></a><a href="whatsapp://send?text=https%3A%2F%2Fwww.freewplugin.com%2Fbest-collection%2Fwordpress-performance-speed.html"></a><a href="mailto:?subject=%E6%8F%90%E5%8D%87WordPress%E7%9A%84%E7%BD%91%E7%AB%99%E7%9A%84%E9%80%9F%E5%BA%A6%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97-2024&body=https%3A%2F%2Fwww.freewplugin.com%2Fbest-collection%2Fwordpress-performance-speed.html"></a></p>
]]></content>
  </entry>
  <entry>
    <title>LiteSpeed Cache CDN 設定</title>
    <url>/2024-11-20-2024/11/2024-11-20-litespeed-cache-cdn-%E8%A8%AD%E5%AE%9A/index.html</url>
    <content><![CDATA[<h2 id="CDN-Settings"><a href="#CDN-Settings" class="headerlink" title="CDN Settings"></a><strong>CDN Settings</strong></h2><h3 id="QUIC-cloud-CDN"><a href="#QUIC-cloud-CDN" class="headerlink" title="QUIC.cloud CDN"></a><strong>QUIC.cloud CDN</strong></h3><p>我們可通過使用 QUIC.cloud 服務來開啟 QUIC.cloud CDN，以下為教學步驟。</p>
<p>Step1. 請先設定 QUIC.cloud CDN 為開啟，並儲存設定。</p>
<p><img src="/images/QUIC.cloud_CDN_litespeed_%E8%A8%AD%E5%AE%9A.jpg" alt="Amazon Web Services 雲端管理 – 台灣 AWS 雲端託管、AWS MSP 雲端託管供應商｜遠振資訊"></p>
<p>Step2. 接下來到您的 QUIC.cloud 儀表板，點擊您的網域。</p>
<p><img src="/images/litespeed_Cache_CDN_%E8%A8%AD%E5%AE%9A.jpg" alt="Amazon Web Services 雲端管理 – 台灣 AWS 雲端託管、AWS MSP 雲端託管供應商｜遠振資訊"></p>
<p>Step3. 接著點擊 CDN。</p>
<p><img src="/images/WordPress_CDN_%E8%A8%AD%E5%AE%9A.jpg" alt="Amazon Web Services 雲端管理 – 台灣 AWS 雲端託管、AWS MSP 雲端託管供應商｜遠振資訊"></p>
<p>Step4. 點擊 CDN 後就會看見啟用 CDN，請點擊「Enable CDN」。</p>
<p><img src="/images/%E7%B6%B2%E5%9F%9F_CDN_%E8%A8%AD%E5%AE%9A.jpg" alt="Amazon Web Services 雲端管理 – 台灣 AWS 雲端託管、AWS MSP 雲端託管供應商｜遠振資訊"></p>
<p>Step5. 接下來可以選擇網域連接到 QUIC.cloud CDN 的方式，並點擊 Confirm Choice。</p>
<p><img src="/images/CNAME_CDN_%E8%A8%AD%E5%AE%9A.jpg" alt="Amazon Web Services 雲端管理 – 台灣 AWS 雲端託管、AWS MSP 雲端託管供應商｜遠振資訊"></p>
<p>Step6. 接下來您需至網域管理後台 (cPanel 的 Zone Editor) 添加這串訊息，完成 CNAME 更新後，請回到 QUIC.cloud 點擊 Continue。</p>
<p><img src="/images/CDN_Settings_litespeed_%E8%A8%AD%E5%AE%9A.jpg" alt="Amazon Web Services 雲端管理 – 台灣 AWS 雲端託管、AWS MSP 雲端託管供應商｜遠振資訊"></p>
<p>Step7. 接著回到 CDN，並點選 CDN Config 下的 Cache，設定上視您的快取需求，這邊我們建議採用預設即可。</p>
<p><img src="/images/WordPress_litespeed_CDN_%E8%A8%AD%E5%AE%9A.jpg" alt="Amazon Web Services 雲端管理 – 台灣 AWS 雲端託管、AWS MSP 雲端託管供應商｜遠振資訊"></p>
<p><img src="/images/CDN_Cache_%E8%A8%AD%E5%AE%9A.jpg" alt="Amazon Web Services 雲端管理 – 台灣 AWS 雲端託管、AWS MSP 雲端託管供應商｜遠振資訊"></p>
<p>Step8. 接下來需等待 DNS 約 24 小時左右才會顯示 CDN 正常運作。</p>
<p><img src="/images/litespeed_CDN_DNS%E8%A8%AD%E5%AE%9A.jpg" alt="Amazon Web Services 雲端管理 – 台灣 AWS 雲端託管、AWS MSP 雲端託管供應商｜遠振資訊"></p>
<h3 id="Cloudflare-API"><a href="#Cloudflare-API" class="headerlink" title="Cloudflare API"></a><strong>Cloudflare API</strong></h3><p>Cloudflare API 預設為關閉，若您有 Cloudflare 帳號可開啟該選項。</p>
<p><img src="/images/litespeed_Cache_Cloudflare_API%E8%A8%AD%E5%AE%9A.jpg" alt="Amazon Web Services 雲端管理 – 台灣 AWS 雲端託管、AWS MSP 雲端託管供應商｜遠振資訊"></p>
<p>以上 LiteSpeed Cache 的 CDN Settings 基本上就設置完成了，其它設定維持預設即可，最後請記得儲存設定。</p>
<p><img src="/images/litespeed_Cache_CDN_%E8%A8%AD%E5%AE%9A%E6%95%99%E5%AD%B8.jpg" alt="Amazon Web Services 雲端管理 – 台灣 AWS 雲端託管、AWS MSP 雲端託管供應商｜遠振資訊"></p>
]]></content>
  </entry>
  <entry>
    <title>QUIC.cloud CDN加速完整使用教程</title>
    <url>/2024-11-20-2024/11/2024-11-20-quic-cloud-cdn%E5%8A%A0%E9%80%9F%E5%AE%8C%E6%95%B4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/index.html</url>
    <content><![CDATA[<p>QUIC.cloud是一个免费的CDN加速服务，也是唯一完整的WordPress速度优化解决方案，它运行在 LiteSpeed Cache 插件之上，可以降低 TTFB 第一字节，实现网站全球秒开。</p>
<p>在本中，我会教你如何在WordPress网站设置QUIC.cloud CDN，下面是完整使用教程。</p>
<ol>
<li>注册 QUIC.cloud 账号<br> 第一步，免费注册 QUIC.cloud 账号。首先打开 QUIC.cloud 官网注册页面，然后填写邮箱名、设置密码，勾选我同意 QUIC.cloud 的使用条款，并点击 Register 按钮。</li>
</ol>
<p>QUIC.cloud注册</p>
<p>之后，你的邮箱会收到一封 QUIC.cloud 官方发来的账号确认邮件，请按照邮件中的提示，点击 Activate Account 按钮，完成账号验证。</p>
<ol start="2">
<li>连接 WordPress 和 QUIC.cloud<br> 由于 QUIC.Cloud 是基于 LiteSpeed 的功能，因此需要先安装 LiteSpeed Cache 缓存插件，安装方法是登陆WordPress网站，转到仪表盘 &gt; 插件，安装启用此插件。</li>
</ol>
<p>插件装好后，转到 LiteSpeed Cache &gt; 常规，点击“请求域密钥”密钥。</p>
<p>请求域密钥</p>
<p>之后，你会看到一个消息：请求已提交。请稍候，然后刷新页面以查看审批通知。</p>
<p>等待域密钥生成</p>
<p>接下来，稍微等待一到两分钟，再刷新此页面，域密钥就自动生成了。同时，你会在右边看到一个“链接到 QUIC.cloud”的按钮，请点击它。</p>
<p>连接QUIC.cloud</p>
<p>点击按钮后，页面会自动跳转到 QUIC.cloud，输入你之前注册好的账号名和密码并登陆。</p>
<p>quic.cloud登陆</p>
<p>之后，页面会跳转回WordPress仪表盘并显示：在 QUIC.cloud 上访问我的仪表盘。</p>
<p>访问quic.cloud仪表盘</p>
<p>到这，你的WordPress网站就成功与 QUIC.cloud 连接上了。</p>
<ol start="3">
<li>配置 QUIC.cloud CDN<br> 首先，转到 LiteSpeed Cache &gt; CDN 设定，点击启用 QUIC.cloud 并保存修改。</li>
</ol>
<p>wordpress启用QUIC.cloud CDN</p>
<p>然后，访问 QUIC.cloud 仪表盘，点击 Enable CDN 按钮。</p>
<p>enable cdn</p>
<p>之后，你会看到两个选项，在这我选择的是第一个：使用 QUIC.cloud DNS。</p>
<p>使用 QUIC.cloud DNS</p>
<p>再之后，你会看到一个 DNS 记录列表，请点击最下方的 Enable and Add Records。</p>
<p>启用并添加记录</p>
<p>接下来，QUIC.Cloud 会要求你替换域名的 NS 服务器地址，在下一步中我会介绍怎么操作。</p>
<p>quic.cloud ns</p>
<ol start="4">
<li>更新 DNS 域名服务器<br> 为了能正常使用 QUIC.Cloud CDN，我们需要更改域名的 NS 服务器地址，这是一个很简单的操作，在这我们以 NameSilo 域名商为例向你演示。</li>
</ol>
<p>首先，登陆你的 NameSilo 域名账号，点击 Mange 链接。</p>
<p>namesilo manage</p>
<p>然后，勾选你的域名，点击 Change Nameservers。</p>
<p>Change Nameservers</p>
<p>接下来，把 NS 服务器地址替换成上一步 QUIC.cloud 自动分配的，并点击 SUBMIT 按钮。</p>
<p>替换NS地址</p>
<p>最后，等待几分钟返回 QUIC.cloud 仪表盘，在 DNS Zones，你会看到 QUIC.cloud NS 地址已生效，这也意味着你的网站已经开始使用 QUIC.Cloud CDN。</p>
<p>更新 DNS 域名服务器成功</p>
<ol start="5">
<li>重新生成 SSL 证书<br> 由于更改了域名的DNS服务器地址，QUIC.cloud 会自动为你的网站重新签发 SSL 证书，在它的CDN选项栏有详细解释，整个过程大约需要等待20分钟。</li>
</ol>
<p>quic.cloud ssl</p>
<p>配置完成后，转到 CDN &gt; SSL Certificate，你会看到 SSL 证书已签发，其有效期为90天，到期后会自动续订，基本上操作完就不用再管了。</p>
<p>quic.cloud SSL证书签发成功</p>
<ol start="6">
<li>测试 QUIC.cloud CDN 速度<br> 开启 QUIC.Cloud CDN 之后，我对WordPress网站分别进行了 TTFB 和 GTmetrix 测速，发现网站速度快到头皮发麻，第一次看到100分 + 200ms 和 TTFB 全球评级A。</li>
</ol>
<p>不过要注意，测速网站的服务器主机用的是ChemiCloud。它能完美运行 QUIC.Cloud CDN 和 LiteSpeed，请看ChemiCloud怎么样了解更多。</p>
<p>GTmetrix 100分</p>
<p>TTFB评级A</p>
<p>另外，测速网站使用了 QUIC.Cloud CDN 的 Standard 方案，它几乎覆盖了全球的国家和地区，加速需要付费购买 credits，可按照自己的目标国家用户进行开启或关闭。</p>
<p>注意：ChemiCloud 用户可享每月 200 credits 的额度，折合流量是每月10G，对大多数外贸独立站来说基本用不完，若以后网站流量很大，可再花钱充值，费用 5 美元 5000 credits。</p>
<p>quic.cloud 方案</p>
<p>总结<br>在本文中，我们介绍了如何在WordPress网站上设置 QUIC.Cloud CDN 的全过程。它易于使用，对网站速度提升很明显，非常适合外贸跨境电商独立站使用。</p>
<p>如果你喜欢折腾，还可以把它和 Cloudflare 结合使用，分开处理网站动静态页面优化，但设置上会比较复杂。因此，我个人不推荐新手进行操作，毕竟就速度而言，它已经足够快了。</p>
<p><a href="https://www.1deng.me/quic-cloud-cdn-setup.html">QUIC.cloud CDN加速完整使用教程 - 一灯出海</a></p>
]]></content>
  </entry>
  <entry>
    <title>serv00 wordpress 使用LiteSpeed缓存插件的对象缓存</title>
    <url>/2024-11-20-2024/11/2024-11-20-serv00-wordpress-%E4%BD%BF%E7%94%A8litespeed%E7%BC%93%E5%AD%98%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%BC%93%E5%AD%98/index.html</url>
    <content><![CDATA[<p>到 serv00 后端开放一个TCP 端口</p>
<p><img src="/images/12233.png"></p>
<p>登录ssh</p>
<p>作为后台服务程序运行 memcached ，2121 改成你的tcp 端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/memcached -p 2121 -m 64m -d</span><br></pre></td></tr></table></figure>

<p>查看外网ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl ifconfig.me</span><br></pre></td></tr></table></figure>

<p>到博客后台LiteSpeed缓存设置 ip 端口 保存就行了</p>
<p><img src="/images/QQ20241120-094809.png"></p>
<p>最后 添加定时任务，开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/memcached -p 2121 -m 64m -d</span><br></pre></td></tr></table></figure>

<p><img src="/images/QQ20241120-095604.png"></p>
]]></content>
      <categories>
        <category>yuanchuang</category>
      </categories>
  </entry>
  <entry>
    <title>【Jetpack是什么】最强WordPress外挂！ 功能、设定全教学</title>
    <url>/2024-11-22-2024/11/2024-11-22-%E3%80%90jetpack%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%91%E6%9C%80%E5%BC%BAwordpress%E5%A4%96%E6%8C%82%EF%BC%81-%E5%8A%9F%E8%83%BD%E3%80%81%E8%AE%BE%E5%AE%9A%E5%85%A8%E6%95%99%E5%AD%A6/index.html</url>
    <content><![CDATA[<p>对于 WordPress 网站，你是否渴望一把「万能钥匙」，能同时增强安全性、提升效能并推动营销？ Jetpack到底是什么，它是怎么让你的网站如虎添翼？ 事不宜迟，点进我们的完整教学，从基础设定到高级功能，一步步解锁Jetpack的全面功能！</p>
<p><img src="/images/Wordpress-Jetpack-Jetpack%E6%98%AF%E4%BB%80%E9%BA%BC-Jetpack%E4%B8%AD%E6%96%87%E6%95%99%E5%AD%B8-1024x660.png" alt="Wordpress Jetpack Jetpack是什么 Jetpack中文教学"></p>
<ul>
<li><p><a href="https://websitebuilder.com.tw/category/%e7%b6%b2%e7%ab%99%e6%9e%b6%e8%a8%ad/">网站架设</a></p>
</li>
<li><p>作者 WebsiteBuilder 团队</p>
</li>
<li><p>更新日期 2024-04-02</p>
</li>
</ul>
<p><img src="/images/wix-logo-300x117.webp" alt="wix"></p>
<h2 id="轻松打造专业网站"><a href="#轻松打造专业网站" class="headerlink" title="轻松打造专业网站"></a>轻松打造专业网站</h2><p><img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 拖曳式可视化编辑器，零程序基础也能轻松上手 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 500+ 精美专业模板，一键套用 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 免费SSL安全凭证 + 域名 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> AI网站生成器，3分钟快速建站 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 内建电商功能，轻松开店 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 移动设备完美兼容 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 专业SEO工具，提升搜寻排名 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 24&#x2F;7中文客服支持 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 网站安全防护 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/26a1.svg" alt="⚡"> 云端主机稳定保证</p>
<p><a href="https://wixstats.com/?a=30891&oc=796&c=2916&s1=wbtw">透过此专属连结，免费开始建站！</a></p>
<p>免费开始</p>
<p><img src="/images/hostinger-logo-300x169.webp" alt="hostinger"></p>
<h2 id="限时超杀优惠：79-OFF！"><a href="#限时超杀优惠：79-OFF！" class="headerlink" title="限时超杀优惠：79% OFF！"></a>限时超杀优惠：79% OFF！</h2><p>每月CNY$17.99超值优惠，免费赠送域名、免费网站迁移服务、全天候中文客服即时支持、额外赠送3个月免费使用期</p>
<p><a href="https://hostinger.sjv.io/VmLkj3">透过此专属链接购买，享30天退款保证</a></p>
<p>合作优惠</p>
<p><img src="/images/wordpress-300x86.webp"></p>
<h2 id="为专业网站打造的完整解决方案"><a href="#为专业网站打造的完整解决方案" class="headerlink" title="为专业网站打造的完整解决方案"></a>为专业网站打造的完整解决方案</h2><p>每月NT$120起，解锁无限可能 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 完全自由制作专业网站 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 50,000+ 精选外挂任你安装 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 无限制使用高级主题 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/2728.svg" alt="✨"> 完整移除所有广告横幅 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/1f680.svg" alt="🚀"> 进阶SEO工具优化搜索排名 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/1f512.svg" alt="🔒"> 实时备份+安全防护 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/1f4b0.svg" alt="💰"> 多元营利功能全面开放 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/26a1.svg" alt="⚡"> 全球CDN极速网站体验 <img src="https://s.w.org/images/core/emoji/15.0.3/svg/1f468-200d-1f4bb.svg" alt="👨‍💻"> 专业技术支持全年无休</p>
<p><a href="https://automattic.pxf.io/EK56g4">前往官网了解更多，享受专业级网站体验</a></p>
<p>专业网站</p>
<p>如果你有使用过Wordpress的话，那么你一定知道 Wordpress.com 在架设网站方便有多么的方便和专业。</p>
<p>但如果我告诉你，现在有一款插件，能够让 Wordpress.com 锦上添花，让你效率飞涨，你会不会很惊喜？</p>
<p>没错！ 这款插件就叫做Jetpack，它是 WordPress.com 的官方插件，提供了从安全性到性能优化的全面解决方案。 更重要是Jetpack现在还推出了升级版本，添加了实时备份、安全扫描等一系列功能……</p>
<p>往下看这篇文章，让我们带你一起了解这款强大功能的插件！</p>
<h2 id="Jetpack基本概念"><a href="#Jetpack基本概念" class="headerlink" title="Jetpack基本概念"></a>Jetpack基本概念</h2><p>首先还是从基本概念讲起，我们会先告诉你Jetpack到底是什么，再告诉你为什么Jetpack绝对会是你的第一选择。</p>
<h3 id="Jetpack是什么？"><a href="#Jetpack是什么？" class="headerlink" title="Jetpack是什么？"></a>Jetpack是什么？</h3><p><a href="https://websitebuilder.com.tw/go/jetpack/">Jetpack</a> 是一款由 Automattic，也就是 <a href="https://websitebuilder.com.tw/go/wordpress-com/">WordPress.com</a> 背后的公司开发的多功能 WordPress 插件。</p>
<p>它集成了许多不同的功能，旨在帮助网站所有者提高效率、增强安全性并获得更好的用户体验。</p>
<p>但他的强大之处在于，Jetpack不仅仅是一个插件，它更像是一套工具箱，可以为你的 WordPress 网站提供一站式的解决方案。 往下看，让我们告诉你它是怎么做到的！</p>
<figure>

<p><a href="https://websitebuilder.com.tw/go/wordpress-com-plugin-jetpack/"><img src="/images/Jetpack-%E2%80%93-WP-%E5%AE%89%E5%85%A8%E6%80%A7%E3%80%81%E5%82%99%E4%BB%BD%E3%80%81%E9%80%9F%E5%BA%A6%E5%92%8C%E6%88%90%E9%95%B7%E5%B7%A5%E5%85%B7%E5%A4%96%E6%8E%9B%E7%A8%8B%E5%BC%8F-1024x550.jpg" alt="Jetpack – WP 安全性、备份、速度和成长工具插件"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/wordpress-com-plugin-jetpack/">Jetpack – WP 安全性、备份、速度和成长工具插件</a></p>
</figcaption>

</figure>

<h3 id="为什么选择WordPress-Jetpack：功能多样性与安全性"><a href="#为什么选择WordPress-Jetpack：功能多样性与安全性" class="headerlink" title="为什么选择WordPress Jetpack：功能多样性与安全性"></a>为什么选择WordPress Jetpack：功能多样性与安全性</h3><p>选择Jetpack最重要的原因在于它能够提供一个整合性的解决方案，让你可以用一款的插件来满足多方面的需求。</p>
<p>在功能多样性方面，Jetpack包含了自动社交分享、网站统计分析、<a href="https://websitebuilder.com.tw/go/jetpack-seo-tools/">SEO优化工具</a>、快速的CDN服务以及内置广告系统等。</p>
<p>这些工具合在一起，不仅提升了网站的运行速度和用户体验，也可以帮助你更有效地推广你的内容并增加收益。</p>
<p>在安全性方面，Jetpack提供了全面的防护措施，包括实时的安全扫描、自动备份与一键恢复系统、多重身份验证以及防垃圾评论等功能，这些都是为了确保网站能在各种潜在风险面前保持安全和稳定。</p>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack/"><img src="/images/Jetpack-for-WordPress-1024x649.jpg" alt="Jetpack for WordPress"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/jetpack/">Jetpack for WordPress</a></p>
</figcaption>

</figure>

<h2 id="Jetpack的主要功能"><a href="#Jetpack的主要功能" class="headerlink" title="Jetpack的主要功能"></a><strong>Jetpack的主要功能</strong></h2><p>在下面的内容我们会为你具体介绍一些Jetpack十分好用的功能，看完你就会知为什么我们会说Jetpack绝对是你的不二选择了。</p>
<h3 id="网站安全性：防御恶意攻击"><a href="#网站安全性：防御恶意攻击" class="headerlink" title="网站安全性：防御恶意攻击"></a>网站安全性：防御恶意攻击</h3><p>Jetpack提供全面的网站安全功能，旨在保护网站不受各种威胁的侵害。</p>
<ul>
<li><p><strong>自动恶意软件扫描</strong>：定期扫描网站，寻找潜在的安全威胁。</p>
</li>
<li><p><strong>防止黑客攻击</strong>：强化网站防护，减少遭受黑客攻击的风险。</p>
</li>
<li><p><strong>垃圾评论过滤</strong>：自动过滤垃圾评论，保持网站内容的清洁。</p>
</li>
</ul>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-security/"><img src="/images/Jetpack.tw-security-1024x580.jpg" alt="Jetpack.tw-security"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-security/">Jetpack.tw-security</a></p>
</figcaption>

</figure>

<h3 id="效能优化：加快网站加载速度"><a href="#效能优化：加快网站加载速度" class="headerlink" title="效能优化：加快网站加载速度"></a>效能优化：加快网站加载速度</h3><p>透过Jetpack加强网站的效能，加速网页加载时间。</p>
<ul>
<li><p><strong>图片加载优化</strong>：图片Lazy Loading「懒加载」（延迟加载）功能，只有当用户滑动到图片位置时才加载图片。</p>
</li>
<li><p><strong>CDN服务</strong>：使用Jetpack的CDN加速静态资源的传输，提高全球访问速度。</p>
</li>
</ul>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-blog-lazyload/"><img src="/images/Speed-Up-Your-Jetpack-Site-with-Lazy-Loading-Images.jpg" alt="Speed Up Your Jetpack Site with Lazy Loading Images"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-blog-lazyload/">Speed Up Your Jetpack Site with Lazy Loading Images</a></p>
</figcaption>

</figure>

<h3 id="网站管理：统一管理多个WordPress网站"><a href="#网站管理：统一管理多个WordPress网站" class="headerlink" title="网站管理：统一管理多个WordPress网站"></a>网站管理：统一管理多个WordPress网站</h3><p>为多站点管理者提供便利的工具，使管理变得简单高效。</p>
<ul>
<li><p><strong>一站式管理</strong>：在单一仪表板上监控和管理多个WordPress网站。</p>
</li>
<li><p><strong>自动化更新</strong>：自动更新插件和主题，保持网站的最新状态。</p>
</li>
</ul>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-manage/"><img src="/images/Jetpack-Manage-For-WordPress-Agencies-Freelancers-Site-Builders-1024x593.jpg" alt="Jetpack Manage - For WordPress Agencies, Freelancers, &amp; Site Builders"></a></p>
<figcaption>

<p>在单一面板中统一管理你的Wordpress。 来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-manage/">Jetpack Manage – For WordPress Agencies, Freelancers, &amp; Site Builders</a></p>
</figcaption>

</figure>

<h3 id="备份与恢复：自动实时备份"><a href="#备份与恢复：自动实时备份" class="headerlink" title="备份与恢复：自动实时备份"></a>备份与恢复：自动实时备份</h3><p>确保网站数据的安全，即使发生错误也能快速恢复。</p>
<ul>
<li><p><strong>即时备份</strong>：实时备份网站的所有内容，包括文章、图片和设定。</p>
</li>
<li><p><strong>一键恢复</strong>：在发生问题时，可以轻松地将网站恢复到任何备份点。</p>
</li>
</ul>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-backup/"><img src="/images/Jetpack-VaultPress-Backup.jpg" alt="Jetpack VaultPress Backup"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-backup/">Jetpack VaultPress Backup</a></p>
</figcaption>

</figure>

<p>延伸阅读：<a href="https://websitebuilder.com.tw/wordpress/wordpress-%e5%82%99%e4%bb%bd/">【WordPress 备份与还原】三分钟搞定网站备份 | 备份外挂推荐</a></p>
<h3 id="统计与分析：深入了解网站访客"><a href="#统计与分析：深入了解网站访客" class="headerlink" title="统计与分析：深入了解网站访客"></a>统计与分析：深入了解网站访客</h3><p>提供详细的访客统计和分析，帮助网站主了解访客行为。</p>
<ul>
<li><p><strong>访客追踪</strong>：追踪和报告访客的移动，如页面浏览和点击。</p>
</li>
<li><p><strong>深度分析</strong>：深入了解访客来源和网站内容的表现。</p>
</li>
</ul>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-blog-crm/"><img src="/images/Introducing-Jetpack-CRM-Grow-Your-Business-Through-Better-Contact-Management.jpg" alt="Introducing Jetpack CRM Grow Your Business Through Better Contact Management"></a></p>
<figcaption>

<p>使用 Jetpack CRM 追踪关键客户资料。 来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-blog-crm/">Introducing Jetpack CRM: Grow Your Business Through Better Contact Management</a></p>
</figcaption>

</figure>

<h3 id="SEO工具：提升网站在搜索引擎中的排名"><a href="#SEO工具：提升网站在搜索引擎中的排名" class="headerlink" title="SEO工具：提升网站在搜索引擎中的排名"></a>SEO工具：提升网站在搜索引擎中的排名</h3><p>Jetpack的SEO工具帮助网站在搜索引擎结果中获得更好的位置。</p>
<ul>
<li><p><strong>SEO优化</strong>：提供元标签和描述的优化建议，提升搜索引擎能见度。</p>
</li>
<li><p><strong>站点地图</strong>：自动生成网站地图，帮助搜索引擎更好地索引网站内容。</p>
</li>
</ul>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-seo-tools/"><img src="/images/SEO-%E5%B7%A5%E5%85%B7.jpg" alt="SEO 工具"></a></p>
<figcaption>

<p>使用Jetpack自定你的标题格式。 来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-seo-tools/">SEO 工具</a></p>
</figcaption>

</figure>

<h2 id="Jetpack的其他产品"><a href="#Jetpack的其他产品" class="headerlink" title="Jetpack的其他产品"></a>Jetpack的其他产品</h2><p>看完了Jetpack升级版的功能介绍之后，我们再来为你介绍它的其他成长系列产品，这些产品有些需要花钱，有些是免费使用，无论哪款都一定能够很好地帮助到你去管理你的网站。</p>
<h3 id="AI-Assistant"><a href="#AI-Assistant" class="headerlink" title="AI Assistant"></a>AI Assistant</h3><p><a href="https://websitebuilder.com.tw/go/jetpack-ai-assistant/">AI Assistant旨在将人工智能引入内容创作</a>，你每个月可以使用100次的AI去驱动内容生成请求，它还同时支持支持文本、表格、列表创建，以及语调调整和语法校正功能。</p>
<p>这一系列工具可以帮助你直接从编辑器中生成定制化、高品质的内容，同时保持专业标准。</p>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-ai-assistant/"><img src="/images/AI-Assistant-%E2%80%93-Jetpack-for-WordPress.webp" alt="AI Assistant – Jetpack for WordPress"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-ai-assistant/">AI Assistant – Jetpack for WordPress</a></p>
</figcaption>

</figure>

<h3 id="Stats"><a href="#Stats" class="headerlink" title="Stats"></a>Stats</h3><p><a href="https://websitebuilder.com.tw/go/jetpack-stats/">Stats提供实时访客数据、文章和页面的流量统计与趋势分析</a>，以及指向你网站的链接的详细统计，并确保GDPR合规性。</p>
<p>这些功能可以很好地帮助你去理解其受众，发现表现优秀的内容，并从各种参考数据中获取流量来源的深入见解。</p>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-stats/"><img src="/images/Jetpack-Stats-Simple-Website-Analytics-Plugin-for-WordPress-1024x681.jpg" alt="Jetpack Stats: Simple Website Analytics Plugin for WordPress"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-stats/">Jetpack Stats: Simple Website Analytics Plugin for WordPress</a></p>
</figcaption>

</figure>

<h3 id="Social"><a href="#Social" class="headerlink" title="Social"></a>Social</h3><p><a href="https://websitebuilder.com.tw/go/jetpack-social/">Social是一个全面的社交媒体管理平台</a>，你可以用它自动在多个社交媒体渠道分享帖子和产品，管理所有社交媒体账号，并安排帖子发布时间。</p>
<p>分享完你的内容之后，你还可以通过自动视频生成器来优化受众的参与度，从而节省时间，并增加社交媒体上的关注度。</p>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-social/"><img src="/images/Jetpack.tw-social-1024x616.jpg" alt="Jetpack.tw-social"></a></p>
<figcaption>

<p>來源：<a href="https://websitebuilder.com.tw/go/jetpack-social/">Jetpack.tw-social</a></p>
</figcaption>

</figure>

<h3 id="CRM"><a href="#CRM" class="headerlink" title="CRM"></a>CRM</h3><p>CRM有<a href="https://jetpackcrm.com/pricing/">三種不同的月費方案</a>。最基礎的方案提供了基本工具，如發票專業版和各種支付連結，旨在推動業務發展等。</p>
<p>進階方案是最受歡迎的方案，提供自動化、潛在客戶培育和銷售漏斗等先進功能，附帶單一網站授權、優先支持和更新。</p>
<p>最高階方案讓你可以創建並轉售定制版的Jetpack CRM，包括10個網站授權和品牌重塑選項，以及前兩個方案的全部功能。</p>
<figure>

<p><img src="/images/Pricing-Jetpack-CRM-1024x716.jpg" alt="Pricing | Jetpack CRM"></p>
<figcaption>

<p>來源：<a href="https://jetpackcrm.com/pricing/">Pricing | Jetpack CRM</a></p>
</figcaption>

</figure>

<h3 id="Creator"><a href="#Creator" class="headerlink" title="Creator"></a>Creator</h3><p><a href="https://websitebuilder.com.tw/go/jetpack-creator/"><strong>Creator</strong>方案提供了40多個Jetpack區塊</a>，讓你可以快速創建優質、吸引人的內容。</p>
<p>它包含了WordAds顯示廣告、PayPal付款、付費內容閘道和電子通訊功能等，幫助創作者增加訂閱者、銷售高級內容，並容易地接受小費和捐款。</p>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-creator/"><img src="/images/creator-%E5%90%B8%E5%BC%95%E3%80%81%E5%A2%9E%E5%8A%A0%E5%8F%97%E7%9C%BE%EF%BC%8C%E4%B8%A6%E5%BE%9E%E4%B8%AD%E7%8D%B2%E7%9B%8A-1024x498.jpg" alt="creator 吸引、增加受众，并从中获益"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-creator/">吸引、增加受众，并从中获益</a></p>
</figcaption>

</figure>

<h2 id="安装与启动：Jetpack教学-WordPress-Jetpack-设置"><a href="#安装与启动：Jetpack教学-WordPress-Jetpack-设置" class="headerlink" title="安装与启动：Jetpack教学&#x2F;WordPress Jetpack 设置"></a>安装与启动：Jetpack教学&#x2F;WordPress Jetpack 设置</h2><p>看了这么多Jetpack的好处，下面我们就带你正式进入实操环节——Jetpack的安装与启动教程，让你一次学明白。</p>
<h3 id="注册-WordPress-com-账号"><a href="#注册-WordPress-com-账号" class="headerlink" title="注册 WordPress.com 账号"></a>注册 WordPress.com 账号</h3><p>在安装Jetpack插件之前，你需要拥有一个 <a href="https://websitebuilder.com.tw/go/wordpress-com/">WordPress.com</a> 的账号，因为Jetpack的许多功能都是通过与你的 WordPress.com 账号连接来实现的。</p>
<ol>
<li><p>访问 **<a href="https://websitebuilder.com.tw/go/wordpress-com/">WordPress.com</a>**。</p>
</li>
<li><p>点击「创建新帐号」或「注册」按钮。</p>
</li>
<li><p>填写必要的信息（如电子邮件地址、用户名和密码）。</p>
</li>
<li><p>完成注册流程，并通过电子邮件验证你的账号。</p>
</li>
</ol>
<figure>

<p><a href="https://websitebuilder.com.tw/go/wordpress-com/"><img src="/images/WordPress-com-1024x550.jpg" alt="WordPress.com"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/wordpress-com/">WordPress.com</a></p>
</figcaption>

</figure>

<h3 id="安装Jetpack插件步骤"><a href="#安装Jetpack插件步骤" class="headerlink" title="安装Jetpack插件步骤"></a>安装Jetpack插件步骤</h3><p>安装Jetpack插件是一个简单的过程，可以直接在WordPress后台完成。</p>
<ol>
<li><p>登录到你的WordPress网站后台。</p>
</li>
<li><p>在左侧菜单中选择插件&gt;「新增」。</p>
</li>
<li><p>在搜索结果中找到Jetpack插件，点击“立即安装”。</p>
</li>
<li><p>插件安装完成后，点击启动插件。</p>
</li>
</ol>
<figure>

<p><a href="https://websitebuilder.com.tw/go/wordpress-com-plugin-jetpack/"><img src="/images/Jetpack-%E2%80%93-WP-%E5%AE%89%E5%85%A8%E6%80%A7%E3%80%81%E5%82%99%E4%BB%BD%E3%80%81%E9%80%9F%E5%BA%A6%E5%92%8C%E6%88%90%E9%95%B7%E5%B7%A5%E5%85%B7%E5%A4%96%E6%8E%9B%E7%A8%8B%E5%BC%8F--1024x650.jpg" alt="Jetpack – WP 安全性、备份、速度和成长工具插件-"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/wordpress-com-plugin-jetpack/">Jetpack – WP 安全性、备份、速度和成长工具插件</a></p>
</figcaption>

</figure>

<h3 id="连接Jetpack到-WordPress-com-账号"><a href="#连接Jetpack到-WordPress-com-账号" class="headerlink" title="连接Jetpack到 WordPress.com 账号"></a>连接Jetpack到 WordPress.com 账号</h3><p>启动<a href="https://websitebuilder.com.tw/go/jetpack/">Jetpack</a>插件后，你需要将它连接到你的 <a href="https://websitebuilder.com.tw/go/wordpress-com/">WordPress.com</a> 账号。</p>
<ol>
<li><p>插件启动后，你将看到一个提示连接到 WordPress.com 的按钮。</p>
</li>
<li><p>点击该按钮后，你将被重定向到 WordPress.com 的登录页面。</p>
</li>
<li><p>使用你先前注册的 WordPress.com 帐号信息登录。</p>
</li>
<li><p>登录后，你将被要求授权Jetpack访问你的帐号信息。</p>
</li>
<li><p>授权后，Jetpack将完成连接过程，你就可以开始配置Jetpack的各项功能了。</p>
</li>
</ol>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-support-additional-users/"><img src="/images/Additional-Users.jpg" alt="Jetpack support Additional Users"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-support-additional-users/">Additional Users</a></p>
</figcaption>

</figure>

<p>完成以上步骤后，Jetpack插件就成功安装并连接到你的 WordPress.com 账号了。 接下来，你可以根据自己的需求，开始设置Jetpack的各项功能。</p>
<h2 id="怎么升级Jetpack？"><a href="#怎么升级Jetpack？" class="headerlink" title="怎么升级Jetpack？"></a>怎么升级Jetpack？</h2><p>Jetpack的免费版已经包含了必要的功能，如网站安全性和效能优化等。</p>
<p>但是付费版本则提供了更全面的功能，例如实时备份、安全扫描、高级SEO工具等，这些功能对于希望进一步提升网站性能、安全性和增加营销工具的用户来说非常有用。</p>
<p>所以安装好之后最重要的事就是升级Jetpack啦<del>升级了才能享受到完整的功能，俗话说得好早买早享受，今天不升级以后也一定会升级的</del></p>
<h3 id="升级流程步骤"><a href="#升级流程步骤" class="headerlink" title="升级流程步骤"></a>升级流程步骤</h3><ol>
<li><p><strong>登录WordPress后台</strong>：使用你的管理员账号登录<a href="https://websitebuilder.com.tw/go/wordpress-com/">WordPress</a>网站的后台。</p>
</li>
<li><p><strong>訪問Jetpack設置</strong>：在後台左側菜單中找到Jetpack選項，點擊進入其設置頁面。</p>
</li>
<li><p><strong>查看方案選項</strong>：在Jetpack設置中，你會看到不同的方案和它們的功能對比。</p>
</li>
<li><p><strong>選擇方案</strong>：根據你的需求，選擇一個合適的升級方案。</p>
</li>
<li><p><strong>進行付款</strong>：選擇你的付款方式，完成購買流程。</p>
</li>
<li><p><strong>啟用新功能</strong>：付款完成後，你的帳戶將自動升級，新功能將會被啟用。</p>
</li>
</ol>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-pricing/"><img src="/images/Jetpack-pricing-1024x620.jpg" alt="Jetpack pricing"></a></p>
<figcaption>

<p>來源：<a href="https://websitebuilder.com.tw/go/jetpack-pricing/">Jetpack pricing</a></p>
</figcaption>

</figure>

<h3 id="為什麼要升級Jetpack？升級版Jetpack好處是什麼？"><a href="#為什麼要升級Jetpack？升級版Jetpack好處是什麼？" class="headerlink" title="為什麼要升級Jetpack？升級版Jetpack好處是什麼？"></a>為什麼要升級Jetpack？升級版Jetpack好處是什麼？</h3><p>盲目升級確實不可取，但是當你會問自己我為什麼要升級Jetpack時，其實一方面就代表著現在的功能對你來說不夠用了。</p>
<p>所以在選擇升級到付費方案時，你應該從功能範圍、技術支持和成本效益三個方面來考慮你的選擇。</p>
<ul>
<li><p><strong>功能範圍</strong>：更高級的方案通常包含更全面的功能。</p>
</li>
<li><p><strong>技術支持</strong>：付費方案提供專業技術支持，這對網站運營至關重要。</p>
</li>
<li><p><strong>成本效益</strong>：比較不同方案的成本和潛在的收益增長。</p>
</li>
</ul>
<p>當你升級到Jetpack的付費版本後，你可以享受到以下功能和好處，都是十分好用且強大的功能。</p>
<ul>
<li><p><strong>實時備份</strong>：不僅備份資料庫，還包括實時同步網站的所有文件和設定，隨時可以恢復到最新狀態。</p>
</li>
<li><p><strong>自動安全掃描</strong>：定期自動掃描，尋找和修復安全漏洞和惡意代碼。</p>
</li>
<li><p><strong>垃圾信息過濾</strong>：更強大的垃圾信息過濾功能，保護網站免受垃圾評論和表單提交的困擾。</p>
</li>
<li><p><strong>高級SEO工具</strong>：為你的內容提供更全面的SEO配置選項，幫助提高搜索引擎排名。</p>
</li>
<li><p><strong>影像和靜態檔案加速</strong>：使用更高級的CDN服務，進一步加快網站加載速度。</p>
</li>
<li><p><strong>廣告程序</strong>：可以輕鬆設置並管理廣告，為網站創造收入。</p>
</li>
<li><p><strong>優先支持</strong>：享受到專業的客戶支持，問題能夠得到更快速的響應和解決。</p>
</li>
</ul>
<p>當然，不同的付費方案之間功能也有差別，下面的表格是不同付費方案海之間的功能差異，你可以通過表格的內容來判斷你的選擇方案。</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>Security 方案</th>
<th>Complete 方案</th>
</tr>
</thead>
<tbody><tr>
<td><strong>VaultPress Backup</strong></td>
<td>10GB 云存储空间; 即时备份; 30天活动记录封存; 无限次数一键还原</td>
<td>1TB 云端储存空间; 即时备份; 一年活动记录存档; 无限次数单键还原</td>
</tr>
<tr>
<td><strong>Scan</strong></td>
<td>无限自动恶意软件扫瞄; 单键修复</td>
<td>无限自动恶意软件扫瞄; 单键修复</td>
</tr>
<tr>
<td><strong>Akismet Anti-spam</strong></td>
<td>每月 1 万次 API 呼叫; 留言与表单垃圾内容防护</td>
<td>每月 6 万次 API 呼叫; 留言与表单垃圾内容防护</td>
</tr>
<tr>
<td><strong>VideoPress</strong></td>
<td>×</td>
<td>1TB 无广告影片储存空间</td>
</tr>
<tr>
<td><strong>Boost</strong></td>
<td>×</td>
<td>透过自动产生关键 CSS; 加速网站并提升SEO成效</td>
</tr>
<tr>
<td><strong>Social</strong></td>
<td>社交分享（免费版）</td>
<td>无限每月分享次数; 一次分享到所有社群媒体</td>
</tr>
<tr>
<td><strong>CRM</strong></td>
<td>×</td>
<td>Entrepreneur 方案; 管理销售漏斗，30种扩充套件</td>
</tr>
<tr>
<td><strong>其他共通功能</strong></td>
<td>暴力密码破解攻击防御; 停机实时监控; CDN （内容递送网络）</td>
<td>暴力密码破解攻击防御; 停机实时监控; CDN （内容递送网络）</td>
</tr>
<tr>
<td><strong>付款方案对比</strong></td>
<td><strong><a href="https://websitebuilder.com.tw/go/jetpack-pricing/">约NT$320&#x2F;月</a></strong></td>
<td><strong><a href="https://websitebuilder.com.tw/go/jetpack-pricing/">约NT$800&#x2F;月</a></strong></td>
</tr>
</tbody></table>
<p>Jetpack 不同升级方案比较表格</p>
<h2 id="Jetpack进阶设定与应用"><a href="#Jetpack进阶设定与应用" class="headerlink" title="Jetpack进阶设定与应用"></a>Jetpack进阶设定与应用</h2><p>当你开始正式地使用Jetpack之后，一些进阶的功能你也必须要学会，才能快人一步。</p>
<p>下面是我们整理的Jetpack进阶功能的几个特点，包括自订CSS、社交媒体整合、相关文章功能，以及广告计划~</p>
<h3 id="自订CSS"><a href="#自订CSS" class="headerlink" title="自订CSS"></a>自订CSS</h3><ul>
<li><p>你可以使用Jetpack通过自定义CSS功能，不需修改主题原始档案，也可以轻松地改变网站的外观和风格。</p>
</li>
<li><p>你可以在管理面板的「外观」-&gt;「自定义」-&gt;「额外的CSS」中添加或修改CSS代码。</p>
</li>
<li><p>提供即时预览功能，所见即所得，让你可以立刻看到改动的效果。</p>
</li>
<li><p>支持CSS的版本控制，可以方便地回溯至先前的CSS设定。</p>
</li>
</ul>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-custom-css/"><img src="/images/Custom-CSS.jpg" alt="Custom CSS"></a></p>
<figcaption>

<p>自订你的CSS并在Jetpack中进行比较。 来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-custom-css/">Custom CSS</a></p>
</figcaption>

</figure>

<h3 id="社交媒体整合"><a href="#社交媒体整合" class="headerlink" title="社交媒体整合"></a>社交媒体整合</h3><ul>
<li><p>Jetpack的社交媒体整合功能帮助你将网站内容与各大社交媒体平台链接。</p>
</li>
<li><p>你可以设定自动将新发布的文章分享到社交媒体，如Facebook、Twitter等。</p>
</li>
<li><p>提供社交分享按钮，让访客可以轻松将内容分享到他们的社交网络。</p>
</li>
<li><p>社交媒体整合还包括公开化评论，让访客可以通过他们的社交媒体账号来评论。</p>
</li>
</ul>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-social/"><img src="/images/Jetpack-tw-social-1024x605.jpg" alt="Jetpack-tw-social"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-social/">Jetpack-tw-social</a></p>
</figcaption>

</figure>

<h3 id="相关文章功能"><a href="#相关文章功能" class="headerlink" title="相关文章功能"></a>相关文章功能</h3><ul>
<li><p>Jetpack的相关文章功能可以在文章底部显示相关内容，提高网站的用户粘性。</p>
</li>
<li><p>这项功能通过算法自动选取并展示相关性最高的文章，帮助读者发现更多有价值的内容。</p>
</li>
<li><p>相关文章的显示样式可以自定义，包括图片和文字的显示方式。</p>
</li>
<li><p>可以增加网站的页面浏览量，并降低跳出率。</p>
</li>
</ul>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-related-posts/"><img src="/images/Jetpack-related-posts.jpg" alt="Jetpack related posts"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-related-posts/">相关文章</a></p>
</figcaption>

</figure>

<h3 id="广告计划"><a href="#广告计划" class="headerlink" title="广告计划"></a>广告计划</h3><ul>
<li><p>Jetpack的广告计划可以帮助你通过展示广告来赚取收益。</p>
</li>
<li><p>提供简单的设置选项来控制广告的显示位置和类型。</p>
</li>
<li><p>跟多个广告网络合作，包括Google AdSense和Facebook Ads，增加收益机会。</p>
</li>
<li><p>包含高级广告分析工具，让你可以追踪广告的表现和收益。</p>
</li>
</ul>
<figure>

<p><a href="https://websitebuilder.com.tw/go/jetpack-ad-program/"><img src="/images/Ad-Program-for-WordPress-Sites-1024x543.jpg" alt="Ad Program for WordPress Sites"></a></p>
<figcaption>

<p>来源 ：<a href="https://websitebuilder.com.tw/go/jetpack-ad-program/">Ad Program for WordPress Sites</a></p>
</figcaption>

</figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>无论你是刚刚开始学习架设网站的新手，还是一位寻求扩展网络功能的老手，Jetpack都提供了一系列方案以满足你不断变化的需求。</p>
<p>从基本的安全维护到高级的商业工具，Jetpack与 WordPress.com 的结合可以说是为你打开了一扇通往高效、安全网站体验的大门。</p>
<p>所以不要再犹豫了，一起把Jetpack升级起来吧，用最全的功能，做最好的网站~</p>
<h2 id="关于Jetpack插件的常见问题（FAQs）"><a href="#关于Jetpack插件的常见问题（FAQs）" class="headerlink" title="关于Jetpack插件的常见问题（FAQs）"></a>关于Jetpack插件的常见问题（FAQs）</h2><p><strong>Jetpack是免费的吗？</strong></p>
<p>Jetpack提供免费和付费方案。 免费方案包含基本的安全性、性能优化和网站管理工具。 付费方案则提供更多进阶的功能，如实时备份、安全扫描、高级SEO工具等。</p>
<p><strong>Jetpack如何帮助提升网站安全性？</strong></p>
<p>Jetpack的安全性功能包括暴力攻击保护、垃圾评论过滤、恶意软件扫描及实时备份（仅限付费方案）。 这些功能有助于保护你的网站免受多数常见的安全威胁。</p>
<p><strong>Jetpack会影响网站的速度吗？</strong></p>
<p>Jetpack提供多种性能优化工具，如图像加载优化和静态文件的内容递送网络（CDN）支持。 这些功能旨在增加页面加载速度，从而提高用户体验。</p>
<p><strong>如何设定Jetpack的社交媒体分享功能？</strong></p>
<p>在Jetpack的设定中启用「社交分享」模块。<br>前往「设置」&gt;「共享」，并连结你的社交媒体帐号。<br>选择你希望显示分享按钮的文章类型。<br>自定义分享按钮的样式和位置。</p>
<p><strong>Jetpack的相关文章如何工作？</strong></p>
<p>启用相关文章模块后，Jetpack会根据文章的内容、标签、分类和其他元数据自动挑选并显示相关文章。<br>在「设置」&gt;「流量」中可以进一步自定义相关文章的显示选项。</p>
<p><strong>我可以在不同的网站上使用同一个Jetpack账户吗？</strong></p>
<p>你可以使用同一个 WordPress.com 账户链接多个网站的Jetpack插件，但每个网站都需要单独设定。</p>
<p><strong>如何查看Jetpack提供的网站统计信息？</strong></p>
<p>在WordPress仪表板中，找到Jetpack菜单并点击「网站统计」即可查看详细的访客和流量信息。</p>
<p><strong>如何取消Jetpack的付费订阅？</strong></p>
<p>你可以通过登录到你的 WordPress.com 账户，并在「我的账户」中的「订阅」部分取消付费服务。</p>
]]></content>
  </entry>
  <entry>
    <title>利用Cloudflare Workers实现网页状态监控</title>
    <url>/2024-11-24-2024/11/2024-11-24-%E5%88%A9%E7%94%A8cloudflare-workers%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/index.html</url>
    <content><![CDATA[<p>1.首先Fork cf-workers-status-page</p>
<p>2.浏览器地址栏输入</p>
<p><a href="https://deploy.workers.cloudflare.com/?url=https://github.com/$YourUserName/cf-workers-status-page">https://deploy.workers.cloudflare.com/?url=https://github.com/$YourUserName/cf-workers-status-page</a></p>
<p>3.获取Cloudflare账户内的Account ID和API Token</p>
<p>授权的token需要workes的编辑权限</p>
<p>4.在actions选择Deploy点击开启(重要,不然无法部署成功)</p>
<p>5.最后修改定时更新CRON</p>
<p>crons &#x3D; [“*&#x2F;2 * * * *”]</p>
<p>6.最后还可以设置你的二级域名,配置自己的网站直接查看项目的readme</p>
<p><a href="https://github.com/eidam/cf-workers-status-page%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E2%80%94">https://github.com/eidam/cf-workers-status-page————————————————</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://blog.csdn.net/m0/_61913232/article/details/138513106">https://blog.csdn.net/m0\_61913232/article/details/138513106</a></p>
]]></content>
  </entry>
  <entry>
    <title>【解决方案】serv00 ssh连不上应该怎么办？</title>
    <url>/2024-11-22-2024/11/2024-11-22-%E3%80%90%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%91serv00-ssh%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/index.html</url>
    <content><![CDATA[<p>1.s变成web</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例：如你的分配是s11.serv00.com，改成web11.serv00.com</span><br></pre></td></tr></table></figure>

<p>2.s变成cache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例：如你的分配是s11.serv00.com，改成cache11.serv00.com</span><br></pre></td></tr></table></figure>

<p>3.s变成panel（.com）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例：如你的分配是s11.serv00.com，改成panel11.serv00.com</span><br></pre></td></tr></table></figure>

<p>4.s变成panel（.net）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例：如你的分配是s11.serv00.com，改成panel11.serv00.net</span><br></pre></td></tr></table></figure>

<p>5.s（服务器号比如1、2、3….）变成你的注册用户名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例：如你的分配是s11.serv00.com，改成（你的注册用户名）.serv00.net</span><br></pre></td></tr></table></figure>

<p>如果你的IP被bann，官方解锁：<a href="https://www.serv00.com/ip_unban/">点我</a></p>
<p>ps：建议连ssh前，先用cmd命令ping 一下是否能连通，提高效率。</p>
]]></content>
  </entry>
  <entry>
    <title>报：可以用cloudflare worker保活serv00和CT8（接入了电报通知）</title>
    <url>/2024-11-26-2024/11/2024-11-26-%E6%8A%A5%EF%BC%9A%E5%8F%AF%E4%BB%A5%E7%94%A8cloudflare-worker%E4%BF%9D%E6%B4%BBserv00%E5%92%8Cct8%EF%BC%88%E6%8E%A5%E5%85%A5%E4%BA%86%E7%94%B5%E6%8A%A5%E9%80%9A%E7%9F%A5%EF%BC%89/index.html</url>
    <content><![CDATA[<p>之前部署的github保活会封账号，建议停用。昨天我在huggingface弄了保活脚本存在不稳定性，且需要反代telegram并保活，实在是繁琐。</p>
<p><strong>现在在cloudflare worker中直接一个代码就解决了，然后在变量加入一个cron就行了。这个应该是最简单最稳定的了，你的serv00账号封了他应该都还活着</strong> </p>
<h2 id="先赞后看，养成习惯"><a href="#先赞后看，养成习惯" class="headerlink" title="先赞后看，养成习惯"></a><a href="https://linux.do/t/topic/180293#p-1485338-h-1"></a>先赞后看，养成习惯</h2><p>上图：<br>电报中：</p>
<p><a href="https://linux.do/uploads/default/original/3X/d/8/d85ca8988639c60af914e3f44b8203b63fc7ea2f.png"></a><a href="https://linux.do/uploads/default/original/3X/d/8/d85ca8988639c60af914e3f44b8203b63fc7ea2f.png">image899×777 31.3 KB</a></p>
<p>serv00中：</p>
<p><a href="https://linux.do/uploads/default/original/3X/c/d/cdc27212d1b98653945df02ec1e6483d9eb2a6d3.png"></a><a href="https://linux.do/uploads/default/original/3X/c/d/cdc27212d1b98653945df02ec1e6483d9eb2a6d3.png">image2547×701 116 KB</a></p>
<h1 id="worker代码："><a href="#worker代码：" class="headerlink" title="worker代码："></a><a href="https://linux.do/t/topic/180293#p-1485338-worker-2"></a>worker代码：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addEventListener(&#x27;fetch&#x27;, event =&gt; &#123;</span><br><span class="line">  event.respondWith(handleRequest(event.request))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">addEventListener(&#x27;scheduled&#x27;, event =&gt; &#123;</span><br><span class="line">  event.waitUntil(handleScheduled(event.scheduledTime))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">async function handleRequest(request) &#123;</span><br><span class="line">  return new Response(&#x27;Worker is running&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function handleScheduled(scheduledTime) &#123;</span><br><span class="line">  const accounts = JSON.parse(ACCOUNTS_JSON)</span><br><span class="line">  const results = await loginAccounts(accounts)</span><br><span class="line">  await sendSummary(results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function loginAccounts(accounts) &#123;</span><br><span class="line">  const results = []</span><br><span class="line">  for (const account of accounts) &#123;</span><br><span class="line">    const result = await loginAccount(account)</span><br><span class="line">    results.push(&#123; ...account, ...result &#125;)</span><br><span class="line">    await delay(Math.floor(Math.random() * 8000) + 1000)</span><br><span class="line">  &#125;</span><br><span class="line">  return results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function generateRandomUserAgent() &#123;</span><br><span class="line">  const browsers = [&#x27;Chrome&#x27;, &#x27;Firefox&#x27;, &#x27;Safari&#x27;, &#x27;Edge&#x27;, &#x27;Opera&#x27;];</span><br><span class="line">  const browser = browsers[Math.floor(Math.random() * browsers.length)];</span><br><span class="line">  const version = Math.floor(Math.random() * 100) + 1;</span><br><span class="line">  const os = [&#x27;Windows NT 10.0&#x27;, &#x27;Macintosh&#x27;, &#x27;X11&#x27;];</span><br><span class="line">  const selectedOS = os[Math.floor(Math.random() * os.length)];</span><br><span class="line">  const osVersion = selectedOS === &#x27;X11&#x27; ? &#x27;Linux x86_64&#x27; : selectedOS === &#x27;Macintosh&#x27; ? &#x27;Intel Mac OS X 10_15_7&#x27; : &#x27;Win64; x64&#x27;;</span><br><span class="line"></span><br><span class="line">  return `Mozilla/5.0 ($&#123;selectedOS&#125;; $&#123;osVersion&#125;) AppleWebKit/537.36 (KHTML, like Gecko) $&#123;browser&#125;/$&#123;version&#125;.0.0.0 Safari/537.36`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function loginAccount(account) &#123;</span><br><span class="line">  const &#123; username, password, panelnum, type &#125; = account</span><br><span class="line">  let url = type === &#x27;ct8&#x27; </span><br><span class="line">    ? &#x27;https://panel.ct8.pl/login/?next=/&#x27; </span><br><span class="line">    : `https://panel$&#123;panelnum&#125;.serv00.com/login/?next=/`</span><br><span class="line"></span><br><span class="line">  const userAgent = generateRandomUserAgent();</span><br><span class="line"></span><br><span class="line">  try &#123;</span><br><span class="line">    const response = await fetch(url, &#123;</span><br><span class="line">      method: &#x27;GET&#x27;,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &#x27;User-Agent&#x27;: userAgent,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const pageContent = await response.text()</span><br><span class="line">    const csrfMatch = pageContent.match(/name=&quot;csrfmiddlewaretoken&quot; value=&quot;([^&quot;]*)&quot;/)</span><br><span class="line">    const csrfToken = csrfMatch ? csrfMatch[1] : null</span><br><span class="line"></span><br><span class="line">    if (!csrfToken) &#123;</span><br><span class="line">      throw new Error(&#x27;CSRF token not found&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const initialCookies = response.headers.get(&#x27;set-cookie&#x27;) || &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    const formData = new URLSearchParams(&#123;</span><br><span class="line">      &#x27;username&#x27;: username,</span><br><span class="line">      &#x27;password&#x27;: password,</span><br><span class="line">      &#x27;csrfmiddlewaretoken&#x27;: csrfToken,</span><br><span class="line">      &#x27;next&#x27;: &#x27;/&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const loginResponse = await fetch(url, &#123;</span><br><span class="line">      method: &#x27;POST&#x27;,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;,</span><br><span class="line">        &#x27;Referer&#x27;: url,</span><br><span class="line">        &#x27;User-Agent&#x27;: userAgent,</span><br><span class="line">        &#x27;Cookie&#x27;: initialCookies,</span><br><span class="line">      &#125;,</span><br><span class="line">      body: formData.toString(),</span><br><span class="line">      redirect: &#x27;manual&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    console.log(`Login response status: $&#123;loginResponse.status&#125;`)</span><br><span class="line">    console.log(`Login response headers: $&#123;JSON.stringify(Object.fromEntries(loginResponse.headers))&#125;`)</span><br><span class="line"></span><br><span class="line">    const loginResponseBody = await loginResponse.text()</span><br><span class="line">    console.log(`Login response body: $&#123;loginResponseBody.substring(0, 200)&#125;...`)</span><br><span class="line"></span><br><span class="line">    if (loginResponse.status === 302 &amp;&amp; loginResponse.headers.get(&#x27;location&#x27;) === &#x27;/&#x27;) &#123;</span><br><span class="line">      const loginCookies = loginResponse.headers.get(&#x27;set-cookie&#x27;) || &#x27;&#x27;</span><br><span class="line">      const allCookies = combineCookies(initialCookies, loginCookies)</span><br><span class="line"></span><br><span class="line">      const dashboardResponse = await fetch(url.replace(&#x27;/login/&#x27;, &#x27;/&#x27;), &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          &#x27;Cookie&#x27;: allCookies,</span><br><span class="line">          &#x27;User-Agent&#x27;: userAgent,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      const dashboardContent = await dashboardResponse.text()</span><br><span class="line">      console.log(`Dashboard content: $&#123;dashboardContent.substring(0, 200)&#125;...`)</span><br><span class="line"></span><br><span class="line">      if (dashboardContent.includes(&#x27;href=&quot;/logout/&quot;&#x27;) || dashboardContent.includes(&#x27;href=&quot;/wyloguj/&quot;&#x27;)) &#123;</span><br><span class="line">        const nowUtc = formatToISO(new Date())</span><br><span class="line">        const nowBeijing = formatToISO(new Date(Date.now() + 8 * 60 * 60 * 1000))</span><br><span class="line">        const message = `账号 $&#123;username&#125; ($&#123;type&#125;) 于北京时间 $&#123;nowBeijing&#125;（UTC时间 $&#123;nowUtc&#125;）登录成功！`</span><br><span class="line">        console.log(message)</span><br><span class="line">        await sendTelegramMessage(message)</span><br><span class="line">        return &#123; success: true, message &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        const message = `账号 $&#123;username&#125; ($&#123;type&#125;) 登录后未找到登出链接，可能登录失败。`</span><br><span class="line">        console.error(message)</span><br><span class="line">        await sendTelegramMessage(message)</span><br><span class="line">        return &#123; success: false, message &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (loginResponseBody.includes(&#x27;Nieprawidłowy login lub hasło&#x27;)) &#123;</span><br><span class="line">      const message = `账号 $&#123;username&#125; ($&#123;type&#125;) 登录失败：用户名或密码错误。`</span><br><span class="line">      console.error(message)</span><br><span class="line">      await sendTelegramMessage(message)</span><br><span class="line">      return &#123; success: false, message &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      const message = `账号 $&#123;username&#125; ($&#123;type&#125;) 登录失败，未知原因。请检查账号和密码是否正确。`</span><br><span class="line">      console.error(message)</span><br><span class="line">      await sendTelegramMessage(message)</span><br><span class="line">      return &#123; success: false, message &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    const message = `账号 $&#123;username&#125; ($&#123;type&#125;) 登录时出现错误: $&#123;error.message&#125;`</span><br><span class="line">    console.error(message)</span><br><span class="line">    await sendTelegramMessage(message)</span><br><span class="line">    return &#123; success: false, message &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function combineCookies(cookies1, cookies2) &#123;</span><br><span class="line">  const cookieMap = new Map()</span><br><span class="line">  </span><br><span class="line">  const parseCookies = (cookieString) =&gt; &#123;</span><br><span class="line">    cookieString.split(&#x27;,&#x27;).forEach(cookie =&gt; &#123;</span><br><span class="line">      const [fullCookie] = cookie.trim().split(&#x27;;&#x27;)</span><br><span class="line">      const [name, value] = fullCookie.split(&#x27;=&#x27;)</span><br><span class="line">      if (name &amp;&amp; value) &#123;</span><br><span class="line">        cookieMap.set(name.trim(), value.trim())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  parseCookies(cookies1)</span><br><span class="line">  parseCookies(cookies2)</span><br><span class="line"></span><br><span class="line">  return Array.from(cookieMap.entries()).map(([name, value]) =&gt; `$&#123;name&#125;=$&#123;value&#125;`).join(&#x27;; &#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function sendSummary(results) &#123;</span><br><span class="line">  const successfulLogins = results.filter(r =&gt; r.success)</span><br><span class="line">  const failedLogins = results.filter(r =&gt; !r.success)</span><br><span class="line"></span><br><span class="line">  let summaryMessage = &#x27;登录结果统计：\n&#x27;</span><br><span class="line">  summaryMessage += `成功登录的账号：$&#123;successfulLogins.length&#125;\n`</span><br><span class="line">  summaryMessage += `登录失败的账号：$&#123;failedLogins.length&#125;\n`</span><br><span class="line"></span><br><span class="line">  if (failedLogins.length &gt; 0) &#123;</span><br><span class="line">    summaryMessage += &#x27;\n登录失败的账号列表：\n&#x27;</span><br><span class="line">    failedLogins.forEach((&#123; username, type, message &#125;) =&gt; &#123;</span><br><span class="line">      summaryMessage += `- $&#123;username&#125; ($&#123;type&#125;): $&#123;message&#125;\n`</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  console.log(summaryMessage)</span><br><span class="line">  await sendTelegramMessage(summaryMessage)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function sendTelegramMessage(message) &#123;</span><br><span class="line">  const telegramConfig = JSON.parse(TELEGRAM_JSON)</span><br><span class="line">  const &#123; telegramBotToken, telegramBotUserId &#125; = telegramConfig</span><br><span class="line">  const url = `https://api.telegram.org/bot$&#123;telegramBotToken&#125;/sendMessage`</span><br><span class="line">  </span><br><span class="line">  try &#123;</span><br><span class="line">    await fetch(url, &#123;</span><br><span class="line">      method: &#x27;POST&#x27;,</span><br><span class="line">      headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27; &#125;,</span><br><span class="line">      body: JSON.stringify(&#123;</span><br><span class="line">        chat_id: telegramBotUserId,</span><br><span class="line">        text: message</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.error(&#x27;Error sending Telegram message:&#x27;, error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function formatToISO(date) &#123;</span><br><span class="line">  return date.toISOString().replace(&#x27;T&#x27;, &#x27; &#x27;).replace(&#x27;Z&#x27;, &#x27;&#x27;).replace(/\.\d&#123;3&#125;Z/, &#x27;&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function delay(ms) &#123;</span><br><span class="line">  return new Promise(resolve =&gt; setTimeout(resolve, ms))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="变量："><a href="#变量：" class="headerlink" title="变量："></a><a href="https://linux.do/t/topic/180293#p-1485338-h-3"></a>变量：</h1><p><code>ACCOUNTS_JSON</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[  </span><br><span class="line">  &#123; &quot;username&quot;: &quot;serv00user1&quot;, &quot;password&quot;: &quot;serv00password1&quot;, &quot;panelnum&quot;: &quot;0&quot;, &quot;type&quot;: &quot;serv00&quot; &#125;,</span><br><span class="line">  &#123; &quot;username&quot;: &quot;serv00user2&quot;, &quot;password&quot;: &quot;serv00password2&quot;, &quot;panelnum&quot;: &quot;4&quot;, &quot;type&quot;: &quot;serv00&quot; &#125;,</span><br><span class="line">  &#123; &quot;username&quot;: &quot;serv00user3&quot;, &quot;password&quot;: &quot;serv00password3&quot;, &quot;panelnum&quot;: &quot;7&quot;, &quot;type&quot;: &quot;serv00&quot; &#125;,</span><br><span class="line">  &#123; &quot;username&quot;: &quot;ct8user1&quot;, &quot;password&quot;: &quot;ct8password1&quot;, &quot;type&quot;: &quot;ct8&quot; &#125;,</span><br><span class="line">  &#123; &quot;username&quot;: &quot;ct8user2&quot;, &quot;password&quot;: &quot;ct8password2&quot;, &quot;type&quot;: &quot;ct8&quot; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><code>TELEGRAM_JSON</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;telegramBotToken&quot;: &quot;YOUR_BOT_TOKEN&quot;,</span><br><span class="line">  &quot;telegramBotUserId&quot;: &quot;YOUR_USER_ID&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://linux.do/uploads/default/original/3X/8/d/8dc9e81539406334c2cde45c83c14fbe41707a68.png"></a><a href="https://linux.do/uploads/default/original/3X/8/d/8dc9e81539406334c2cde45c83c14fbe41707a68.png">image2438×939 110 KB</a><br>可以设置为私密</p>
<p><strong>变量不知道怎么设置的看这里：</strong></p>
<p><img src="/images/12365_2.png"> <a href="https://linux.do/t/topic/161424">在github上保活serv00和CT8并接入Tg、钉钉机器人通知(有封github号风险)</a> <a href="https://linux.do/c/softwares/14">软件分享</a></p>
<blockquote>
<p>先上效果图： github中： <a href="https://linux.do/uploads/default/original/3X/a/7/a76184ea58cb3683e7bd1f1dbe92591cfe1dcaff.png">[image]</a> telegram中： <a href="https://linux.do/uploads/default/original/3X/d/b/db461ff6d80908c31ad573c933635ab1ba8fb02a.png">[image]</a> <a href="https://linux.do/uploads/default/original/3X/3/d/3dc6d620b309700dd21b15fc50550c1e050b7ecc.png">[image]</a> 钉钉中 <a href="https://linux.do/uploads/default/original/3X/5/e/5e9b8b9dee89b9601c6e2a936516fe6c06abbd4f.png">[image]</a> 项目地址： <a href="https://linux.do/t/topic/180293#p-1202005-h-1fork-1"></a>1.fork该项目 <a href="https://linux.do/uploads/default/original/3X/a/f/af069a262841586c8d3bc59a41adb20b6f88e722.png">[image]</a> <a href="https://linux.do/uploads/default/original/3X/9/9/9928fda112b639b81f24eec344c43b56920a8449.png">[image]</a> <a href="https://linux.do/t/topic/180293#p-1202005-h-2accounts_json-2"></a>2.创建ACCOUNTS_JSON变量并填入信息 <a href="https://linux.do/uploads/default/original/3X/8/0/80ba5cbada46cd25a7d1619b0d047c9b9605e24d.png">[image]</a> <a href="https://linux.do/uploads/default/original/3X/a/3/a352d1c8b275cf45054b415cec7abd6dc4ce1e3c.png">[image]</a> ACCOUNTS_JSON [ { “username”: “serv00us…</p>
</blockquote>
<h1 id="cron任务设置"><a href="#cron任务设置" class="headerlink" title="cron任务设置"></a><a href="https://linux.do/t/topic/180293#p-1485338-cron-4"></a>cron任务设置</h1><p>自己设置为喜欢的时间（建议1-2周登录一次）</p>
<p><a href="https://linux.do/uploads/default/original/3X/3/8/38e0bff4a04cf68314c77a9f8eb7ba148b95387e.png"></a><a href="https://linux.do/uploads/default/original/3X/3/8/38e0bff4a04cf68314c77a9f8eb7ba148b95387e.png">image1701×829 42.4 KB</a></p>
<p><a href="https://linux.do/uploads/default/original/3X/8/3/83037b1314cb83a76e6b6914193c9c6212c5743e.png"></a><a href="https://linux.do/uploads/default/original/3X/8/3/83037b1314cb83a76e6b6914193c9c6212c5743e.png">image2058×676 37.8 KB</a></p>
<p>所有信息填写完成后去测试一下：</p>
<p><a href="https://linux.do/uploads/default/original/3X/a/d/adee024d3400ed86cffb8fa3e5c47b96bd659a50.png"></a><a href="https://linux.do/uploads/default/original/3X/a/d/adee024d3400ed86cffb8fa3e5c47b96bd659a50.png">image2898×956 228 KB</a></p>
<p>点一下就开始推送信息了</p>
<p><a href="https://linux.do/t/topic/180293">报：可以用cloudflare worker保活serv00和CT8（接入了电报通知） - 资源荟萃 - LINUX DO</a></p>
<p><a href="https://linux.do/t/topic/165552">重大更新:serv00部署服务加保活脚本 - 资源荟萃 - LINUX DO</a></p>
]]></content>
  </entry>
  <entry>
    <title>linux设置开机启动脚本的3种方法</title>
    <url>/2024-11-25-2024/11/2024-11-25-linux%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC%E7%9A%843%E7%A7%8D%E6%96%B9%E6%B3%95/index.html</url>
    <content><![CDATA[<p>Linux 下设置开机启动的三种简单但可行的开机启动设置方法。</p>
<p>  <strong>方法一：修改 &#x2F;etc&#x2F;rc.d&#x2F;rc.local 文件</strong>  </p>
<p><code>/etc/rc.d/rc.local</code> 文件会在 Linux 系统各项服务都启动完毕之后再被运行。所以你想要自己的脚本在开机后被运行的话，可以将自己脚本路径加到该文件里。</p>
<p>但是，首先需要确认你有运行这个文件的权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<p>为了演示，我们创建了一个脚本，当它被执行之后，将在家目录下写入有特定信息的文件。</p>
<ol>
<li><code>$ vim auto_run_script.sh</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bashdate &gt;&gt; /home/ok/output.txthostname &gt;&gt; /home/ok/output.txt</span><br></pre></td></tr></table></figure>

<p>保存退出后，再给它赋予可执行权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod +x auto_run_script.sh</span><br></pre></td></tr></table></figure>

<p>然后，我们再将脚本添加到 <code>/etc/rc.d/rc.local</code> 文件最后一行：</p>
<ol>
<li><code>$ vim /etc/rc.d/rc.local</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/ok/auto_run_script.sh</span><br></pre></td></tr></table></figure>

<p>接下来，我们就可以试试效果了。直接重启系统就可以了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>

<p>重启之后，就会在用户目录下看到脚本执行的结果了。</p>
<p>  <strong>方法二：使用 crontab</strong>  </p>
<p>大家知道，<a href="https://so.csdn.net/so/search?q=crontab&spm=1001.2101.3001.7020">crontab</a> 是 Linux 下的计划任务，当时间达到我们设定的时间时，可以自动触发某些脚本的运行。</p>
<p>我们可以自己设置<a href="https://so.csdn.net/so/search?q=%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1&spm=1001.2101.3001.7020">计划任务</a>时间，然后编写对应的脚本。但是，有个特殊的任务，叫作 <code>@reboot</code> ，我们其实也可以直接从它的字面意义看出来，这个任务就是在系统重启之后自动运行某个脚本。</p>
<p>那它将运行的是什么脚本呢？我们如何去设置这个脚本呢？我们可以通过 <code>crontab -e</code> 来设置。</p>
<ol>
<li><code>$ crontab -e</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@reboot /home/ok/auto_run_script.sh</span><br></pre></td></tr></table></figure>

<p>然后，直接重启即可。运行的效果跟上面类似。</p>
<p>  <strong>方法三：使用 systemd 服务</strong>  </p>
<p>以上介绍的两种方法，在任何 Linux 系统上都可以使用。但本方法仅适用于 systemd 系统。如何区分是不是 systemd 系统？很简单，只需运行 <code>ps aux</code> 命令，查看 pid 为 1 的进程是不是 systemd 。Ubuntu是systemd系统。</p>
<p><img src="/images/476cf5bcf198db01e9c6ffbd06b18968.jpeg"></p>
<p> 为了实现目的，我们需要创建一个 systemd 启动服务，并把它放置在 <code>/etc/systemd/system/</code> 目录下。</p>
<p>我们创建的 systemd 启动服务如下。请注意，这时后缀是 <code>.service</code> ，而不是 <code>.sh</code> 。</p>
<ol>
<li><code>$ vim auto_run_script.service</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]Description=Run a Custom Script at StartupAfter=default.target[Service]ExecStart=/home/ok/auto_run_script.sh[Install]WantedBy=default.target</span><br></pre></td></tr></table></figure>

<p>从服务的内容可以看出来，我们最终还是会调用 &#x2F;home&#x2F;ok&#x2F;auto_run_script.sh 这个脚本。</p>
<p>然后，我们再把这个脚本放置在 <code>/etc/systemd/systerm/</code> 目录下，之后我们再运行下面两条命令来更新 systemd 配置文件，并启动服务。</p>
<ol>
<li><p><code>$ systemctl daemon-reload</code></p>
</li>
<li><p><code>$ systemctl enable auto_run_script.service</code></p>
</li>
</ol>
<p>万事俱备之后，我们就可以重启系统啦。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ reboot</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>自动续期托管在 Cloudflare 上的 ClouDNS 域名的边缘证书</title>
    <url>/2024-11-28-2024/11/2024-11-28-%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F%E6%89%98%E7%AE%A1%E5%9C%A8-cloudflare-%E4%B8%8A%E7%9A%84-cloudns-%E5%9F%9F%E5%90%8D%E7%9A%84%E8%BE%B9%E7%BC%98%E8%AF%81%E4%B9%A6/index.html</url>
    <content><![CDATA[<p>其实只要_acme-challenge ns到cf就可以了<br>_acme-challenge.xxx.cloudns.biz的NS跟xxx.cloudns.biz的NS一致</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_acme-challenge.xxx.cloudns.biz	NS aaa.ns.cloudflare.com</span><br><span class="line">_acme-challenge.xxx.cloudns.biz	NS bbb.ns.cloudflare.com</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>yuanchuang</category>
      </categories>
  </entry>
  <entry>
    <title>mysql8开启全文索引搜索结果不准确等问题小结</title>
    <url>/2024-11-29-2024/11/2024-11-29-mysql8%E5%BC%80%E5%90%AF%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E4%B8%8D%E5%87%86%E7%A1%AE%E7%AD%89%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/index.html</url>
    <content><![CDATA[<p>因为网站数据量过大，原来使用like查询效率太慢。所以升级了全文索引，中间遇到一些问题，这里总结一下，并且附上解决方法。</p>
<p>开启全文索引的方法，请自行百度</p>
<p>1.部分关键词搜索不到，比如，搜索关键词ok,what等，查不到结果,</p>
<p>select * from juzi WHERE MATCH(title) AGAINST (‘+what’ IN BOOLEAN MODE);<br>select * from juzi WHERE MATCH(title) AGAINST (‘+ok’ IN BOOLEAN MODE);<br>原因是MySQL的全文本索引有一个“全文本停用词(Full-Text Stopwords)”的机制，默认启用。</p>
<p>解决方法<br>随便在哪个数据库创建一个空表：</p>
<p>create table db_stopwords<br>(<br>value varchar(18) null<br>);</p>
<p>去到MySQL配置文件my.cnf或者my.ini(取决你用哪个配置文件)的[mysqld]底下加上以下代码，enbs.cn是我数据库的名称，替换成你自己的</p>
<p>[mysqld]<br>ft_min_word_len&#x3D;1<br>innodb-ft-server-stopword-table&#x3D;enbs.cn&#x2F;db_stopwords<br>innodb_ft_min_token_size&#x3D;0<br>ft_stopword_file&#x3D;””<br>随后保存，重启mysql，运行sql语句：SHOW VARIABLES LIKE ‘innodb_ft_server_stopword_table’;如果结果是我们刚才设置的表，证明设置生效了，这时候再重新建立全文索引就能正常搜索了</p>
<p>2.搜索中文结果不准确</p>
<p>SELECT <code>title</code>,<code>cn</code>,<code>laiyuan</code>,<code>fayin</code>,<code>id</code> FROM <code>liju</code> WHERE MATCH (cn) AGAINST (‘“中文词”‘ IN BOOLEAN MODE)<br>查询以上语句发现与like的结果不一致</p>
<p>解决方法</p>
<p>删除原来的索引，通过以下方式重建索引，查询结构正常！</p>
<p>CREATE FULLTEXT INDEX ft_cn ON liju (cn) WITH PARSER ngram;<br>————————————————</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://blog.csdn.net/hhg2006/article/details/138337812">https://blog.csdn.net/hhg2006/article/details/138337812</a></p>
]]></content>
      <categories>
        <category>wenzhang</category>
      </categories>
  </entry>
  <entry>
    <title>使用PHP创建telegram聊天机器人资料</title>
    <url>/2024-11-29-2024/11/2024-11-29-%E4%BD%BF%E7%94%A8php%E5%88%9B%E5%BB%BAtelegram%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B5%84%E6%96%99/index.html</url>
    <content><![CDATA[<p><a href="https://tg.yundianrj.com/post/30.html">https://tg.yundianrj.com/post/30.html</a></p>
<p><a href="https://tg.yundianrj.com/post/26.html">https://tg.yundianrj.com/post/26.html</a></p>
<p><a href="https://telegram-bot-sdk.com/docs/getting-started/installation">https://telegram-bot-sdk.com/docs/getting-started/installation</a></p>
<p><a href="https://www.sunyonghong.com/post/20240806191.html">https://www.sunyonghong.com/post/20240806191.html</a></p>
<p>前言我使用的是ThinkPHP 框架,找了一个组件直接使用的。不过，如果自己写原生的对接，其实也很简单，本文我假设我的机器人名字是 abc_bot</p>
<p>推荐阅读 <a href="https://core.telegram.org/bots">https://core.telegram.org/bots</a></p>
<p><strong>组件安装和使用</strong></p>
<p><a href="https://telegram-bot-sdk.readme.io/docs">https://telegram-bot-sdk.readme.io/docs</a></p>
<p>组件的安装和使用，在上面的手册写的很详细，不再复述，API文档可手册是这个<a href="https://telegram-bot-sdk.readme.io/reference%E3%80%82">https://telegram-bot-sdk.readme.io/reference。</a></p>
<p>下面说明几个常用的操作</p>
<p><strong>1.创建机器人</strong></p>
<p><img src="/images/202405151715755758166054.jpeg" alt="907ae884edd4a83e3f993928ac5e63c33535.jpeg" title="907ae884edd4a83e3f993928ac5e63c33535.jpeg"></p>
<p>使用浏览器访问 <a href="https://t.me/botfather">https://t.me/botfather</a> 会自动跳转到 BotFather 的对话框。这个是管理你机器人的命令对话框。与它的对话都要以&#x2F; 开头。有些指令。&#x2F;help,可以看到所有的可用指令</p>
<p>接收消息的设置</p>
<p>在 BotFather  对话框操作</p>
<p>&#x2F;setprivacy</p>
<p>然后选择一个你的机器人，会弹出对话</p>
<p>‘Enable’ - your bot will only receive messages that either start with the ‘&#x2F;‘ symbol or mention the bot by username.</p>
<p>‘Disable’ - your bot will receive all messages that people send to groups.</p>
<p>Current status is: DISABLED</p>
<p>选择 `Enable` 则在群消息中只有 `&#x2F;abc_bot 消息`的时候，你才能看到消息</p>
<p>选择 `Disable` 则可以看到群里的所有消息。</p>
<p><strong>2. API 操作</strong></p>
<p>2.1 获取所有的消息</p>
<p>注意，在执行这个操作的时候，不能有 $telegram-&gt;setWebhook()，因为如果执行过 $telegram-&gt;setWebhook(),新数据其实是会直接返回给你指定的 url 的。如果你有开启，则需要执行 $telegram-&gt;removeWebhook() 关闭</p>
<p>注意这个操作最多可以获取100条数据，但是有两个参数可以使用</p>
<p>offset–开始获取数据的id，这个对应的是 update_id</p>
<p>limit-获取数据的条数</p>
<p>$key &#x3D; config(‘telegram.bot_token’);</p>
<p> return $this-&gt;get(‘<a href="https://api.telegram.org/bot">https://api.telegram.org/bot</a>‘ . $key . ‘&#x2F;getUpdates’);</p>
<p>或者</p>
<p>$telegram &#x3D; new Api($key);</p>
<p>return $telegram-&gt;getUpdates();</p>
<p>获取到的参数</p>
<p>message.message_id   - 消息ID，回复或者转发的时候可以用到</p>
<p>message.from.id  - 发送消息的人的ID</p>
<p>message.chat.id  - 所在群的ID，如果是个人发送给你的私信，则是个人ID  回复消息时候可以用到</p>
<p>2.2 发送消息的操作</p>
<p>$this-&gt;telegram-&gt;sendMessage([</p>
<p>    ‘chat_id’ &#x3D;&gt; $chat_id, &#x2F;&#x2F; 接收消息的人或者群的id– message.chat.id</p>
<p>    ‘text’ &#x3D;&gt; $message, &#x2F;&#x2F; 消息内容</p>
<p>    ‘parse_mode’ &#x3D;&gt; ‘HTML’, &#x2F;&#x2F; 格式，这个可以不要</p>
<p>]);</p>
<p>2.3 回复消息的操作</p>
<p>$this-&gt;telegram-&gt;sendMessage([</p>
<p>    ‘chat_id’ &#x3D;&gt; $chant_id, &#x2F;&#x2F;  message.chat,id   这个id必须是消息发布的群，不然不能实现回复</p>
<p>    ‘reply_to_message_id’ &#x3D;&gt; $reply_message_id, &#x2F;&#x2F; message.message_id  聊天中的具体一个消息id</p>
<p>    ‘text’ &#x3D;&gt; $text, &#x2F;&#x2F;  回复内容</p>
<p>]);</p>
<p>2.4 开启网站自动接收消息</p>
<p>网站必须是 https，路由随便你配置，只要跟你网站的匹配即可</p>
<p>$telegram-&gt;setWebhook([‘url’ &#x3D;&gt; ‘<a href="https://xxx.com/telegram/webhook'/]">https://xxx.com/telegram/webhook&#39;\]</a>); </p>
<p>在开启网站自动接收消息后，执行 $telegram-&gt;getUpdates(); </p>
<p>然后机器人所在的群，每次有人发消息，都会 post  推送到 `<a href="https://xxx.com/telegram/webhook/%60,%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%81%9A%E7%9B%B8%E5%BA%94%E7%9A%84%E5%A4%84%E7%90%86">https://xxx.com/telegram/webhook\`,你可以做相应的处理</a></p>
<p>接收的文字是 message.text</p>
<p>如果是图片加文字，则是  message.caption </p>
<p>2.5 关闭网站自动接收消息</p>
<p>网站必须是 https，路由随便你配置，只要跟你网站的匹配即可</p>
<p>$telegram-&gt;removeWebhook(); </p>
<p><strong>纸飞机安装</strong></p>
<p><strong>1. 安装组件</strong></p>
<p>composer require irazasyed&#x2F;telegram-bot-sdk ^2.0</p>
<p><strong>2. 添加路由</strong></p>
<p>2.1 ‘createWebHook’ &#x3D;&gt; [‘web&#x2F;telegramController&#x2F;createWebHook’, [‘method’ &#x3D;&gt; ‘get’]],&#x2F;&#x2F;创建群对话</p>
<p>2.2 ‘removeWebHook’ &#x3D;&gt; [‘web&#x2F;telegramController&#x2F;removeWebHook’, [‘method’ &#x3D;&gt; ‘get’]],&#x2F;&#x2F;删除群对话</p>
<p>2.3 ‘listenWebHook’ &#x3D;&gt; [‘web&#x2F;telegramController&#x2F;listenWebHook’, [‘method’ &#x3D;&gt; ‘post’]],</p>
<p>2.1 是创建对话的，告诉飞机官网，我要用 2.3 这个路由接收飞机的返回消息</p>
<p>2.2 基本用不到，是删除对话的，告诉纸飞机  我不再接收飞机推送的消息了</p>
<p>2.3 的路由 必须是 https </p>
<p>参考文档 <a href="https://telegram-bot-sdk.readme.io/docs">https://telegram-bot-sdk.readme.io/docs</a></p>
<p><strong>3. 创建机器人</strong></p>
<p>3.1&#x2F;help</p>
<p>3.2 &#x2F;newbot</p>
<p>3.3  名字+’_bot’ 结尾  比如 ‘aaa_bot’</p>
<p>3.4  再次输入 3.3 的名字 ‘aaa_bot’</p>
<p>这时候，生成的 token  是你需要的  </p>
<p>3.5  设置，群消息任何一条都接收通知</p>
<p>&#x2F;setprivacy   </p>
<p>然后选中你的机器人</p>
<p>然后选择  DISABLED</p>
<p>附PHP代码：</p>
<p>PHP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?phpnamespace app\web\controller;use app\model\Member;use think\Controller;use Telegram\Bot\Api;use think\Db;use think\Log;use app\utils\CacheUtil;class TelegramController extends Controller&#123;</span><br><span class="line">    // 机器人名字  mall_rebate1_bot</span><br><span class="line">    const TG_TOKEN = &#x27;xxxx&#x27;;</span><br><span class="line"></span><br><span class="line">    private $chat_id; //群ID</span><br><span class="line">    private $message_text;//群消息内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 错误代码</span><br><span class="line">     * @var int</span><br><span class="line">     */</span><br><span class="line">    protected $errorCode;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 错误信息</span><br><span class="line">     * @var string</span><br><span class="line">     */</span><br><span class="line">    protected $errorMessage = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回错误代码</span><br><span class="line">     * @return int</span><br><span class="line">     */</span><br><span class="line">    public function getErrorCode()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回错误信息</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public function getErrorMessage()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建对话</span><br><span class="line">     */</span><br><span class="line">    public function createWebHook()</span><br><span class="line">    &#123;</span><br><span class="line">        $telegram = new Api(self::TG_TOKEN);</span><br><span class="line">        return $telegram-&gt;setWebhook([&#x27;url&#x27; =&gt; &#x27;https://xxxx/listenWebHook&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 移除对话</span><br><span class="line">     */</span><br><span class="line">    public function removeWebHook()</span><br><span class="line">    &#123;</span><br><span class="line">        $telegram = new Api(self::TG_TOKEN);</span><br><span class="line">        return $telegram-&gt;removeWebhook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 监听对话</span><br><span class="line">     */</span><br><span class="line">    public function listenWebHook()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        if (!$this-&gt;checkRequest()) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //  加彩金的方法</span><br><span class="line">        if (in_array($this-&gt;chat_id, [&#x27;-11&#x27;, &#x27;-22&#x27;])) &#123;</span><br><span class="line">            $response_text = $this-&gt;transferIn();</span><br><span class="line">            if ($response_text) &#123;</span><br><span class="line">                return $this-&gt;replayMessage($response_text);</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;//            return $this-&gt;replayMessage($this-&gt;chat_id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return false;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function transferIn()</span><br><span class="line">    &#123;</span><br><span class="line">        //  使用空格做区分</span><br><span class="line">        $arr = array_values(array_filter(explode(&quot; &quot;, $this-&gt;message_text)));</span><br><span class="line">        if (count($arr) != 2) &#123;</span><br><span class="line">            return &#x27;格式有误&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $username = $arr[0];</span><br><span class="line">        $userInfo = Member::getByUsername($username);</span><br><span class="line">        if (!$userInfo) &#123;</span><br><span class="line">            return &#x27;用户不存在&#x27; . $username;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       // 业务</span><br><span class="line"></span><br><span class="line">        return  &#x27;success&#x27;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 推送消息</span><br><span class="line">     * @param $result</span><br><span class="line">     * @return bool|\Telegram\Bot\Objects\Message</span><br><span class="line">     * @throws \Telegram\Bot\Exceptions\TelegramSDKException</span><br><span class="line">     */</span><br><span class="line">    private function replayMessage($result)</span><br><span class="line">    &#123;</span><br><span class="line">        $telegram = new Api(self::TG_TOKEN);</span><br><span class="line">        try &#123;</span><br><span class="line">            return $telegram-&gt;sendMessage([</span><br><span class="line">                &#x27;chat_id&#x27; =&gt; $this-&gt;chat_id, //  message.chat.id   这个id必须是消息发布的群，不然不能实现回复</span><br><span class="line">                &#x27;text&#x27; =&gt; $result, //  回复内容</span><br><span class="line">                &#x27;parse_mode&#x27; =&gt; &#x27;HTML&#x27;,</span><br><span class="line">            ]);</span><br><span class="line">        &#125; catch (\Exception $exception) &#123;</span><br><span class="line">            $this-&gt;errorCode = -1;</span><br><span class="line">            $this-&gt;errorMessage = $exception-&gt;getMessage(); // 一般来说都是 chat_id 有误</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检查请求消息</span><br><span class="line">     * @return bool</span><br><span class="line">     */</span><br><span class="line">    private function checkRequest()</span><br><span class="line">    &#123;</span><br><span class="line">        $info = file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line">        $request = [];</span><br><span class="line">        if (json_decode($info)) &#123;</span><br><span class="line">            $request = json_decode($info, 1);</span><br><span class="line">        &#125;//        Log::info(&#x27;222 notify1 start data = &#x27; . json_encode($info));</span><br><span class="line"></span><br><span class="line">        // 1.检查数据格式  是否有 chat_id 和 caption</span><br><span class="line">        if (!isset($request[&#x27;message&#x27;][&#x27;chat&#x27;][&#x27;id&#x27;])) &#123;</span><br><span class="line">            $this-&gt;errorCode = -11;</span><br><span class="line">            $this-&gt;errorMessage = &#x27;chat id 不存在&#x27;;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!isset($request[&#x27;message&#x27;][&#x27;text&#x27;])) &#123;</span><br><span class="line">            $this-&gt;errorCode = -12;</span><br><span class="line">            $this-&gt;errorMessage = &#x27;text不存在&#x27;;</span><br><span class="line">            return false; // 这个不需要输出  不需要处理</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($request[&#x27;message&#x27;][&#x27;from&#x27;][&#x27;is_bot&#x27;] == true) &#123;</span><br><span class="line">            return true;//机器人发送的消息  不需要处理</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 群ID 也是chat_id</span><br><span class="line">        $this-&gt;chat_id = $request[&#x27;message&#x27;][&#x27;chat&#x27;][&#x27;id&#x27;];</span><br><span class="line">        $this-&gt;message_text = trim($request[&#x27;message&#x27;][&#x27;text&#x27;]); // 群消息</span><br><span class="line"></span><br><span class="line">        //  有中文  表示是聊天信息</span><br><span class="line">        preg_match(&#x27;/^(\p&#123;Han&#125;)/u&#x27;, $this-&gt;message_text, $result);</span><br><span class="line">        if ($result) &#123;</span><br><span class="line">            $this-&gt;errorCode = -3;</span><br><span class="line">            $this-&gt;errorMessage = &#x27;中文聊天，不需要处理&#x27;;</span><br><span class="line">            return false; // 这条消息不发送给飞机群 所以是 false</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>标签: <a href="https://tg.yundianrj.com/tags-13.html">机器人</a></p>
]]></content>
      <categories>
        <category>wenzhang</category>
      </categories>
  </entry>
  <entry>
    <title>How can I sendMessage with reply_markup（telegram bot）</title>
    <url>/2024-11-30-2024/11/2024-11-30-how-can-i-sendmessage-with-reply_markup%EF%BC%88telegram-bot%EF%BC%89/index.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.post(&quot;/&quot;,async(req,final)=&gt;&#123;  </span><br><span class="line">  const body=req.body</span><br><span class="line">  console.log(JSON.stringify(body))</span><br><span class="line">  if(body.message)&#123;</span><br><span class="line">    const form=&#123;</span><br><span class="line">      text:req.body.message.text,</span><br><span class="line">      msgid:req.body.message.message_id,</span><br><span class="line">      uid:req.body.message.from.id,</span><br><span class="line">      chatid:req.body.message.chat.id</span><br><span class="line">    &#125;</span><br><span class="line">    if(form.text.indexOf(&quot;/start&quot;)!=-1)&#123;</span><br><span class="line">      sendMessage(form.chatid,form.msgid,&quot;Welcome&quot;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      let reply_markup=&#123;&#125;</span><br><span class="line">      reply_markup.inline_keyboard=[]</span><br><span class="line">      let inlineRow=[]</span><br><span class="line">      inlineRow.push(&#123;</span><br><span class="line">        text:&quot;one&quot;,</span><br><span class="line">        callback_data:&quot;/one:&quot;+body.message.text</span><br><span class="line">      &#125;)</span><br><span class="line">      inlineRow.push(&#123;</span><br><span class="line">        text:&quot;two&quot;,</span><br><span class="line">        callback_data:&quot;/two:&quot;+body.message.text</span><br><span class="line">      &#125;)</span><br><span class="line">      let inlineRow1=[]</span><br><span class="line">      inlineRow1.push(&#123;</span><br><span class="line">        text:&quot;three&quot;,</span><br><span class="line">        callback_data:&quot;/three:&quot;+body.message.text</span><br><span class="line">      &#125;)</span><br><span class="line">      inlineRow1.push(&#123;</span><br><span class="line">        text:&quot;four&quot;,</span><br><span class="line">        callback_data:&quot;/four:&quot;+body.message.text</span><br><span class="line">      &#125;)</span><br><span class="line">      reply_markup.inline_keyboard.push(inlineRow)</span><br><span class="line">      reply_markup.inline_keyboard.push(inlineRow1)</span><br><span class="line">      sendMsgButton(form.chatid,&quot;Click a button&quot;,reply_markup)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  final.send(&quot;SUCCESS&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">function sendMsgButton(chat_id,text,reply_markup)&#123;</span><br><span class="line">  request(&#123;</span><br><span class="line">    url:&quot;https://api.telegram.org/botAPITOken/&quot;,</span><br><span class="line">    method:&quot;POST&quot;,</span><br><span class="line">    form:&#123;</span><br><span class="line">      &quot;method&quot;: &quot;sendMessage&quot;,</span><br><span class="line">      &quot;chat_id&quot;: chat_id,</span><br><span class="line">      &quot;parse_mode&quot;:&quot;Markdown&quot;,</span><br><span class="line">      &quot;reply_markup&quot;:reply_markup,</span><br><span class="line">      &quot;text&quot;:text</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,(err,res,body)=&gt;&#123;</span><br><span class="line">    console.log(&quot;SendMessage&quot;,body)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你对API的请求应该有以下格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  chat_id: data.chatId,</span><br><span class="line">  text: data.text,</span><br><span class="line">  reply_markup: &#123;</span><br><span class="line">    inline_keyboard: [[&#123; text: &#x27;Stop&#x27;, callback_data: &quot;string&quot; &#125;]],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您还应该指定从Telegram API获得的错误类型。此外，回调也有一些限制_数据，不能超过64字节。您可以使用任何在线服务来检查传递给回调数据的字符串大小</p>
]]></content>
  </entry>
  <entry>
    <title>thinkphp6如何部署在虚拟主机上?</title>
    <url>/2024-11-30-2024/11/2024-11-30-thinkphp6%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E5%9C%A8%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E4%B8%8A/index.html</url>
    <content><![CDATA[<p>因为虚拟主机不可以自己修改根目录,所以在部署tp6时只有两个方法。</p>
<p>第一个方法就是将如何文件放入根目录中，将public文件下的index.php和.htdocs文件放入根目录并且修改index.php文件。找到如下代码:</p>
<p>require <strong>DIR</strong> . ‘&#x2F;..&#x2F;vendor&#x2F;autoload.php’;<br>修改为：</p>
<p>require <strong>DIR</strong> . ‘&#x2F;vendor&#x2F;autoload.php’;<br>第二个方法是在不修改目录结构的基础上进行的，只需在根目录下新增一个 .htdocs文件，里面添加如下代码方可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;REQUEST_URI&#125; !^/public/</span><br><span class="line">RewriteRule ^(.*)$ /public/index.php?/$1 [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>————————————————</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://blog.csdn.net/fetch/_all/article/details/107985698">https://blog.csdn.net/fetch\_all/article/details/107985698</a></p>
]]></content>
  </entry>
  <entry>
    <title>在 Telegram 机器人中使用编辑消息</title>
    <url>/2024-11-30-2024/11/2024-11-30-%E5%9C%A8-telegram-%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BC%96%E8%BE%91%E6%B6%88%E6%81%AF/index.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问题出在代码的这一部分</span><br><span class="line"></span><br><span class="line">case(&quot;add&quot;):</span><br><span class="line">    editMessageText($chatId, &quot;should I add?&quot;);</span><br><span class="line">您没有正确传递参数。editMessageText 方法需要一个参数 ，该参数应为 &#x27;Integer.message_id</span><br><span class="line"></span><br><span class="line">这应该是工作代码</span><br><span class="line"></span><br><span class="line">    &lt;?php</span><br><span class="line"></span><br><span class="line">    if ($_SERVER[&#x27;HTTPS&#x27;] != &quot;on&quot;) &#123;</span><br><span class="line">    $url = &quot;https://&quot;. $_SERVER[&#x27;SERVER_NAME&#x27;] . $_SERVER[&#x27;REQUEST_URI&#x27;];</span><br><span class="line">    header(&quot;Location: $url&quot;);</span><br><span class="line">    exit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $botToken=&quot;XXXX...&quot;;</span><br><span class="line">    $website=&quot;https://api.telegram.org/bot&quot;.$botToken;</span><br><span class="line"></span><br><span class="line">    $content = file_get_contents(&quot;php://input&quot;);</span><br><span class="line">    $update = json_decode($content, true);</span><br><span class="line">    $chatId = $update[&quot;message&quot;][&quot;chat&quot;][&quot;id&quot;];</span><br><span class="line">    $message = $update[&quot;message&quot;][&quot;text&quot;];</span><br><span class="line">    // get message_id</span><br><span class="line">    $messageId = $update[&quot;message&quot;][&quot;message_id&quot;];</span><br><span class="line">    switch($message) &#123;</span><br><span class="line">        case(&quot;action&quot;):</span><br><span class="line">                    sendMessage($chatId, &quot;What should I do?&quot;);</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">        case(&quot;add&quot;):</span><br><span class="line">        // add the 2nd parameter</span><br><span class="line">            editMessageText($chatId, $messageId, &quot;should I add?&quot;);</span><br><span class="line"></span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    default:</span><br><span class="line">        sendMessage($chatId, &quot;default&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendMessage($chatId, $message) &#123;</span><br><span class="line"></span><br><span class="line">    $url = $GLOBALS[website].&quot;/sendMessage?    chat_id=&quot;.$chatId.&quot;&amp;text=&quot;.urlencode($message).&quot;&amp;reply_markup&quot;.$reply1;</span><br><span class="line">    file_get_contents($url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function editMessageText($chatId, $messageId, $message) &#123;</span><br><span class="line"></span><br><span class="line">    $url = $GLOBALS[website].&quot;/editMessageText?chat_id=&quot;.$chatId.&quot;&amp;message_id=&quot;.$messageId.&quot;&amp;text=&quot;.urlencode($message);</span><br><span class="line">    file_get_contents($url);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function file_get_contents_curl($url) &#123;</span><br><span class="line">    $ch = curl_init();</span><br><span class="line"></span><br><span class="line">    curl_setopt($ch, CURLOPT_AUTOREFERER, TRUE);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);       </span><br><span class="line"></span><br><span class="line">    $data = curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line"></span><br><span class="line">    return $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure>

<p>3</p>
<p><a href="https://stackoverflow.com/posts/56333714/timeline"></a></p>
<p><a href="https://core.telegram.org/bots/api#updating-messages">官方 Telegram 文档</a>说：</p>
<blockquote>
<p>请注意，目前只能在没有 reply_markup 或使用内嵌键盘的情况下编辑消息。</p>
</blockquote>
<p>您可以使用 <a href="https://core.telegram.org/bots/api#editmessagereplymarkup"><code>editMessageReplyMarkup</code></a> API。</p>
<p><a href="https://stackoverflow.com/a/56333714">共享</a></p>
<p><a href="https://stackoverflow.com/posts/56333714/edit">改进此答案</a>跟随</p>
<p><a href="https://stackoverflow.com/posts/56333714/revisions">编辑于 2019 年 5 月 28 日 2：33</a></p>
<p><a href="https://stackoverflow.com/users/366904/cody-gray"></a></p>
<p><a href="https://stackoverflow.com/users/366904/cody-gray"><img src="https://i.sstatic.net/5sLgY.png?s=64" alt="Cody Gray 的用户头像"></a></p>
<p><a href="https://stackoverflow.com/users/366904/cody-gray">科迪·格雷</a><strong>♦</strong></p>
<p><strong>244 千米</strong>5151 枚金质徽章501501 枚银质徽章581581 枚铜牌回答 2019年5月28日 0：24</p>
<p><a href="https://stackoverflow.com/users/11561965/voicerecordist"></a></p>
<p><strong>61</strong>11 枚金徽章22 枚银质徽章1313 枚铜牌</p>
<ul>
<li><p>这不再是相关信息。您可以使用 reply_markup 编辑消息。 –<a href="https://stackoverflow.com/users/5978355/dzhakhar-ukhaev">扎哈尔·乌哈耶夫</a> <a href="https://stackoverflow.com/questions/42354290/using-edit-message-in-a-telegram-bot#comment125669648_56333714">评论2月 12， 2022 在 10：47</a></p>
</li>
<li><p>1请在 Telegram 网站上将此主题的链接发送给我，以便我将其作为更新添加到答案信息中。@DzhakharUkhaev –<a href="https://stackoverflow.com/users/11561965/voicerecordist">录音师</a> <a href="https://stackoverflow.com/questions/42354290/using-edit-message-in-a-telegram-bot#comment125687782_56333714">评论2月 13， 2022 在 15：41</a></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Telegram Bot API</title>
    <url>/2024-11-30-2024/11/2024-11-30-telegram-bot-api/index.html</url>
    <content><![CDATA[<h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><p>This <a href="https://core.telegram.org/bots/api#available-types">object</a> represents an incoming update.<br>At most <strong>one</strong> of the optional parameters can be present in any given update.</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>update_id</td>
<td>Integer</td>
<td>The update’s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This identifier becomes especially handy if you’re using <a href="https://core.telegram.org/bots/api#setwebhook">webhooks</a>, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.</td>
</tr>
<tr>
<td>message</td>
<td><a href="https://core.telegram.org/bots/api#message">Message</a></td>
<td><em>Optional</em>. New incoming message of any kind - text, photo, sticker, etc.</td>
</tr>
<tr>
<td>edited_message</td>
<td><a href="https://core.telegram.org/bots/api#message">Message</a></td>
<td><em>Optional</em>. New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.</td>
</tr>
<tr>
<td>channel_post</td>
<td><a href="https://core.telegram.org/bots/api#message">Message</a></td>
<td><em>Optional</em>. New incoming channel post of any kind - text, photo, sticker, etc.</td>
</tr>
<tr>
<td>edited_channel_post</td>
<td><a href="https://core.telegram.org/bots/api#message">Message</a></td>
<td><em>Optional</em>. New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.</td>
</tr>
<tr>
<td>business_connection</td>
<td><a href="https://core.telegram.org/bots/api#businessconnection">BusinessConnection</a></td>
<td><em>Optional</em>. The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot</td>
</tr>
<tr>
<td>business_message</td>
<td><a href="https://core.telegram.org/bots/api#message">Message</a></td>
<td><em>Optional</em>. New message from a connected business account</td>
</tr>
<tr>
<td>edited_business_message</td>
<td><a href="https://core.telegram.org/bots/api#message">Message</a></td>
<td><em>Optional</em>. New version of a message from a connected business account</td>
</tr>
<tr>
<td>deleted_business_messages</td>
<td><a href="https://core.telegram.org/bots/api#businessmessagesdeleted">BusinessMessagesDeleted</a></td>
<td><em>Optional</em>. Messages were deleted from a connected business account</td>
</tr>
<tr>
<td>message_reaction</td>
<td><a href="https://core.telegram.org/bots/api#messagereactionupdated">MessageReactionUpdated</a></td>
<td><em>Optional</em>. A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify in the list of <em>allowed_updates</em> to receive these updates. The update isn’t received for reactions set by bots.<code>&quot;message_reaction&quot;</code></td>
</tr>
<tr>
<td>message_reaction_count</td>
<td><a href="https://core.telegram.org/bots/api#messagereactioncountupdated">MessageReactionCountUpdated</a></td>
<td><em>Optional</em>. Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify in the list of <em>allowed_updates</em> to receive these updates. The updates are grouped and can be sent with delay up to a few minutes.<code>&quot;message_reaction_count&quot;</code></td>
</tr>
<tr>
<td>inline_query</td>
<td><a href="https://core.telegram.org/bots/api#inlinequery">InlineQuery</a></td>
<td><em>Optional</em>. New incoming <a href="https://core.telegram.org/bots/api#inline-mode">inline</a> query</td>
</tr>
<tr>
<td>chosen_inline_result</td>
<td><a href="https://core.telegram.org/bots/api#choseninlineresult">ChosenInlineResult</a></td>
<td><em>Optional</em>. The result of an <a href="https://core.telegram.org/bots/api#inline-mode">inline</a> query that was chosen by a user and sent to their chat partner. Please see our documentation on the <a href="https://core.telegram.org/bots/inline#collecting-feedback">feedback collecting</a> for details on how to enable these updates for your bot.</td>
</tr>
<tr>
<td>callback_query</td>
<td><a href="https://core.telegram.org/bots/api#callbackquery">CallbackQuery</a></td>
<td><em>Optional</em>. New incoming callback query</td>
</tr>
<tr>
<td>shipping_query</td>
<td><a href="https://core.telegram.org/bots/api#shippingquery">ShippingQuery</a></td>
<td><em>Optional</em>. New incoming shipping query. Only for invoices with flexible price</td>
</tr>
<tr>
<td>pre_checkout_query</td>
<td><a href="https://core.telegram.org/bots/api#precheckoutquery">PreCheckoutQuery</a></td>
<td><em>Optional</em>. New incoming pre-checkout query. Contains full information about checkout</td>
</tr>
<tr>
<td>purchased_paid_media</td>
<td><a href="https://core.telegram.org/bots/api#paidmediapurchased">PaidMediaPurchased</a></td>
<td><em>Optional</em>. A user purchased paid media with a non-empty payload sent by the bot in a non-channel chat</td>
</tr>
<tr>
<td>poll</td>
<td><a href="https://core.telegram.org/bots/api#poll">Poll</a></td>
<td><em>Optional</em>. New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot</td>
</tr>
<tr>
<td>poll_answer</td>
<td><a href="https://core.telegram.org/bots/api#pollanswer">PollAnswer</a></td>
<td><em>Optional</em>. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.</td>
</tr>
<tr>
<td>my_chat_member</td>
<td><a href="https://core.telegram.org/bots/api#chatmemberupdated">ChatMemberUpdated</a></td>
<td><em>Optional</em>. The bot’s chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user.</td>
</tr>
<tr>
<td>chat_member</td>
<td><a href="https://core.telegram.org/bots/api#chatmemberupdated">ChatMemberUpdated</a></td>
<td><em>Optional</em>. A chat member’s status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify in the list of <em>allowed_updates</em> to receive these updates.<code>&quot;chat_member&quot;</code></td>
</tr>
<tr>
<td>chat_join_request</td>
<td><a href="https://core.telegram.org/bots/api#chatjoinrequest">ChatJoinRequest</a></td>
<td><em>Optional</em>. A request to join the chat has been sent. The bot must have the <em>can_invite_users</em> administrator right in the chat to receive these updates.</td>
</tr>
<tr>
<td>chat_boost</td>
<td><a href="https://core.telegram.org/bots/api#chatboostupdated">ChatBoostUpdated</a></td>
<td><em>Optional</em>. A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates.</td>
</tr>
<tr>
<td>removed_chat_boost</td>
<td><a href="https://core.telegram.org/bots/api#chatboostremoved">ChatBoostRemoved</a></td>
<td><em>Optional</em>. A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates.</td>
</tr>
</tbody></table>
<h4 id="getUpdates"><a href="#getUpdates" class="headerlink" title="getUpdates"></a><a href="https://core.telegram.org/bots/api#getupdates"></a>getUpdates</h4><p>Use this method to receive incoming updates using long polling (<a href="https://en.wikipedia.org/wiki/Push_technology#Long_polling">wiki</a>). Returns an Array of <a href="https://core.telegram.org/bots/api#update">Update</a> objects.</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>offset</td>
<td>Integer</td>
<td>Optional</td>
<td>Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as <a href="https://core.telegram.org/bots/api#getupdates">getUpdates</a> is called with an <em>offset</em> higher than its <em>update_id</em>. The negative offset can be specified to retrieve updates starting from <em>-offset</em> update from the end of the updates queue. All previous updates will be forgotten.</td>
</tr>
<tr>
<td>limit</td>
<td>Integer</td>
<td>Optional</td>
<td>Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.</td>
</tr>
<tr>
<td>timeout</td>
<td>Integer</td>
<td>Optional</td>
<td>Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.</td>
</tr>
<tr>
<td>allowed_updates</td>
<td>Array of String</td>
<td>Optional</td>
<td>A JSON-serialized list of the update types you want your bot to receive. For example, specify to only receive updates of these types. See <a href="https://core.telegram.org/bots/api#update">Update</a> for a complete list of available update types. Specify an empty list to receive all update types except <em>chat_member</em>, <em>message_reaction</em>, and <em>message_reaction_count</em> (default). If not specified, the previous setting will be used.</td>
</tr>
</tbody></table>
<p>Please note that this parameter doesn’t affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.<code>[&quot;message&quot;, &quot;edited_channel_post&quot;, &quot;callback_query&quot;]</code> |</p>
<blockquote>
<p><strong>Notes</strong><br><strong>1.</strong> This method will not work if an outgoing webhook is set up.<br><strong>2.</strong> In order to avoid getting duplicate updates, recalculate <em>offset</em> after each server response.</p>
</blockquote>
<h4 id="setWebhook"><a href="#setWebhook" class="headerlink" title="setWebhook"></a><a href="https://core.telegram.org/bots/api#setwebhook"></a>setWebhook</h4><p>Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized <a href="https://core.telegram.org/bots/api#update">Update</a>. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns <em>True</em> on success.</p>
<p>使用此方法指定URL，并通过传出的webhook接收传入的更新。每当机器人有更新时，我们将向指定的URL发送HTTPS POST请求，其中包含json序列化的update。如果请求不成功，我们将在合理次数的尝试后放弃。成功时返回True。</p>
<p>If you’d like to make sure that the webhook was set by you, you can specify secret data in the parameter <em>secret_token</em>. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.</p>
<p>如果您想确保webhook是由您设置的，您可以在参数secret中指定秘密数据_令牌。如果指定，请求将包含一个标题“X-Telegram-Bot-Api-Secret-Token”，其内容为秘密令牌。</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>String</td>
<td>Yes</td>
<td>HTTPS URL to send updates to. Use an empty string to remove webhook integration</td>
</tr>
<tr>
<td>发送更新到的HTTPS URL。使用空字符串删除webhook集成</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>certificate</td>
<td><a href="https://core.telegram.org/bots/api#inputfile">InputFile</a></td>
<td>Optional</td>
<td></td>
</tr>
<tr>
<td>可选</td>
<td>Upload your public key certificate so that the root certificate in use can be checked. See our <a href="https://core.telegram.org/bots/self-signed">self-signed guide</a> for details.</td>
<td></td>
<td></td>
</tr>
<tr>
<td>上传您的公钥证书，以便可以检查正在使用的根证书。有关详细信息，请参阅我们的自签名指南。</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ip_address</td>
<td>String</td>
<td>Optional</td>
<td></td>
</tr>
<tr>
<td>可选</td>
<td>The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS</td>
<td></td>
<td></td>
</tr>
<tr>
<td>用于发送webhook请求的固定IP地址，而不是通过DNS解析的IP地址</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>max_connections</td>
<td>Integer</td>
<td>Optional</td>
<td></td>
</tr>
<tr>
<td>可选</td>
<td>The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to <em>40</em>. Use lower values to limit the load on your bot’s server, and higher values to increase your bot’s throughput.</td>
<td></td>
<td></td>
</tr>
<tr>
<td>允许同时连接到webhook进行更新传递的最大HTTPS连接数，1-100。默认为40。使用较低的值来限制bot服务器上的负载，使用较高的值来增加bot的吞吐量。</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>allowed_updates</td>
<td>Array of String</td>
<td>Optional</td>
<td></td>
</tr>
<tr>
<td>可选</td>
<td>A JSON-serialized list of the update types you want your bot to receive. For example, specify to only receive updates of these types. See <a href="https://core.telegram.org/bots/api#update">Update</a> for a complete list of available update types. Specify an empty list to receive all update types except <em>chat_member</em>, <em>message_reaction</em>, and <em>message_reaction_count</em> (default). If not specified, the previous setting will be used.</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Please note that this parameter doesn’t affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>您希望bot接收的更新类型的json序列化列表。例如，指定只接收这些类型的更新。有关可用更新类型的完整列表，请参阅更新。指定一个空列表来接收除聊天之外的所有更新类型_成员信息_反应和信息_反应_数(默认)。如果未指定，将使用先前的设置。请注意，此参数不会影响调用setWebhook之前创建的更新，因此可能会在短时间内收到不需要的更新time.<code>[&quot;message&quot;, &quot;edited_channel_post&quot;, &quot;callback_query&quot;]</code></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>drop_pending_updates</td>
<td>Boolean</td>
<td>Optional</td>
<td></td>
</tr>
<tr>
<td>可选</td>
<td>Pass <em>True</em> to drop all pending updates</td>
<td></td>
<td></td>
</tr>
<tr>
<td>传递True以删除所有挂起的更新</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>secret_token</td>
<td>String</td>
<td>Optional</td>
<td></td>
</tr>
<tr>
<td>可选</td>
<td>A secret token to be sent in a header “X-Telegram-Bot-Api-Secret-Token” in every webhook request, 1-256 characters. Only characters , , , and are allowed. The header is useful to ensure that the request comes from a webhook set by you.<code>A-Za-z0-9_-</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>在每个webhook请求中以“X-Telegram-Bot-Api-Secret-Token”头发送的秘密令牌，1-256个字符。只允许字符、、和。头信息对于确保请求来自你设置的webhook非常有用。A-Za-z0-9_-</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p><strong>Notes</strong><br><strong>1.</strong> You will not be able to receive updates using <a href="https://core.telegram.org/bots/api#getupdates">getUpdates</a> for as long as an outgoing webhook is set up.<br><strong>2.</strong> To use a self-signed certificate, you need to upload your <a href="https://core.telegram.org/bots/self-signed">public key certificate</a> using <em>certificate</em> parameter. Please upload as InputFile, sending a String will not work.<br><strong>3.</strong> Ports currently supported <em>for webhooks</em>: <strong>443, 80, 88, 8443</strong>.</p>
<p>If you’re having any trouble setting up webhooks, please check out this <a href="https://core.telegram.org/bots/webhooks">amazing guide to webhooks</a>.</p>
</blockquote>
<h4 id="deleteWebhook"><a href="#deleteWebhook" class="headerlink" title="deleteWebhook"></a><a href="https://core.telegram.org/bots/api#deletewebhook"></a>deleteWebhook</h4><p>Use this method to remove webhook integration if you decide to switch back to <a href="https://core.telegram.org/bots/api#getupdates">getUpdates</a>. Returns <em>True</em> on success.</p>
<p>如果您决定切换回getuupdates，可以使用此方法删除webhook集成。成功时返回True。</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>drop_pending_updates</td>
<td>Boolean</td>
<td>Optional</td>
<td>Pass <em>True</em> to drop all pending updates</td>
</tr>
<tr>
<td>传递True以删除所有挂起的更新</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="getWebhookInfo"><a href="#getWebhookInfo" class="headerlink" title="getWebhookInfo"></a><a href="https://core.telegram.org/bots/api#getwebhookinfo"></a>getWebhookInfo</h4><p>Use this method to get current webhook status. Requires no parameters. On success, returns a <a href="https://core.telegram.org/bots/api#webhookinfo">WebhookInfo</a> object. If the bot is using <a href="https://core.telegram.org/bots/api#getupdates">getUpdates</a>, will return an object with the <em>url</em> field empty.</p>
<h4 id="WebhookInfo"><a href="#WebhookInfo" class="headerlink" title="WebhookInfo"></a><a href="https://core.telegram.org/bots/api#webhookinfo"></a>WebhookInfo</h4><p>Describes the current status of a webhook.</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>String</td>
<td>Webhook URL, may be empty if webhook is not set up</td>
</tr>
<tr>
<td>has_custom_certificate</td>
<td>Boolean</td>
<td><em>True</em>, if a custom certificate was provided for webhook certificate checks</td>
</tr>
<tr>
<td>pending_update_count</td>
<td>Integer</td>
<td>Number of updates awaiting delivery</td>
</tr>
<tr>
<td>ip_address</td>
<td>String</td>
<td><em>Optional</em>. Currently used webhook IP address</td>
</tr>
<tr>
<td>last_error_date</td>
<td>Integer</td>
<td><em>Optional</em>. Unix time for the most recent error that happened when trying to deliver an update via webhook</td>
</tr>
<tr>
<td>last_error_message</td>
<td>String</td>
<td><em>Optional</em>. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook</td>
</tr>
<tr>
<td>last_synchronization_error_date</td>
<td>Integer</td>
<td><em>Optional</em>. Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters</td>
</tr>
<tr>
<td>max_connections</td>
<td>Integer</td>
<td><em>Optional</em>. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery</td>
</tr>
<tr>
<td>allowed_updates</td>
<td>Array of String</td>
<td><em>Optional</em>. A list of update types the bot is subscribed to. Defaults to all update types except <em>chat_member</em></td>
</tr>
</tbody></table>
<h3 id="Available-types"><a href="#Available-types" class="headerlink" title="Available types"></a><a href="https://core.telegram.org/bots/api#available-types"></a>Available types</h3><p>All types used in the Bot API responses are represented as JSON-objects.</p>
<p>It is safe to use 32-bit signed integers for storing all <strong>Integer</strong> fields unless otherwise noted.</p>
<blockquote>
<p><strong>Optional</strong> fields may be not returned when irrelevant.</p>
</blockquote>
<h4 id="User"><a href="#User" class="headerlink" title="User"></a><a href="https://core.telegram.org/bots/api#user"></a>User</h4><p>This object represents a Telegram user or bot.</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>Integer</td>
<td>Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty&#x2F;silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.</td>
</tr>
<tr>
<td>is_bot</td>
<td>Boolean</td>
<td><em>True</em>, if this user is a bot</td>
</tr>
<tr>
<td>first_name</td>
<td>String</td>
<td>User’s or bot’s first name</td>
</tr>
<tr>
<td>last_name</td>
<td>String</td>
<td><em>Optional</em>. User’s or bot’s last name</td>
</tr>
<tr>
<td>username</td>
<td>String</td>
<td><em>Optional</em>. User’s or bot’s username</td>
</tr>
<tr>
<td>language_code</td>
<td>String</td>
<td><em>Optional</em>. <a href="https://en.wikipedia.org/wiki/IETF_language_tag">IETF language tag</a> of the user’s language</td>
</tr>
<tr>
<td>is_premium</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if this user is a Telegram Premium user</td>
</tr>
<tr>
<td>added_to_attachment_menu</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if this user added the bot to the attachment menu</td>
</tr>
<tr>
<td>can_join_groups</td>
<td>Boolean</td>
<td><em>Optional</em>. <em>True</em>, if the bot can be invited to groups. Returned only in <a href="https://core.telegram.org/bots/api#getme">getMe</a>.</td>
</tr>
<tr>
<td>can_read_all_group_messages</td>
<td>Boolean</td>
<td><em>Optional</em>. <em>True</em>, if <a href="https://core.telegram.org/bots/features#privacy-mode">privacy mode</a> is disabled for the bot. Returned only in <a href="https://core.telegram.org/bots/api#getme">getMe</a>.</td>
</tr>
<tr>
<td>supports_inline_queries</td>
<td>Boolean</td>
<td><em>Optional</em>. <em>True</em>, if the bot supports inline queries. Returned only in <a href="https://core.telegram.org/bots/api#getme">getMe</a>.</td>
</tr>
<tr>
<td>can_connect_to_business</td>
<td>Boolean</td>
<td><em>Optional</em>. <em>True</em>, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in <a href="https://core.telegram.org/bots/api#getme">getMe</a>.</td>
</tr>
<tr>
<td>has_main_web_app</td>
<td>Boolean</td>
<td><em>Optional</em>. <em>True</em>, if the bot has a main Web App. Returned only in <a href="https://core.telegram.org/bots/api#getme">getMe</a>.</td>
</tr>
</tbody></table>
<h4 id="Chat"><a href="#Chat" class="headerlink" title="Chat"></a><a href="https://core.telegram.org/bots/api#chat"></a>Chat</h4><p>This object represents a chat.</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>Integer</td>
<td>Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty&#x2F;silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.</td>
</tr>
<tr>
<td>type</td>
<td>String</td>
<td>Type of the chat, can be either “private”, “group”, “supergroup” or “channel”</td>
</tr>
<tr>
<td>title</td>
<td>String</td>
<td><em>Optional</em>. Title, for supergroups, channels and group chats</td>
</tr>
<tr>
<td>username</td>
<td>String</td>
<td><em>Optional</em>. Username, for private chats, supergroups and channels if available</td>
</tr>
<tr>
<td>first_name</td>
<td>String</td>
<td><em>Optional</em>. First name of the other party in a private chat</td>
</tr>
<tr>
<td>last_name</td>
<td>String</td>
<td><em>Optional</em>. Last name of the other party in a private chat</td>
</tr>
<tr>
<td>is_forum</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if the supergroup chat is a forum (has <a href="https://telegram.org/blog/topics-in-groups-collectible-usernames#topics-in-groups">topics</a> enabled)</td>
</tr>
</tbody></table>
<h4 id="ChatFullInfo"><a href="#ChatFullInfo" class="headerlink" title="ChatFullInfo"></a><a href="https://core.telegram.org/bots/api#chatfullinfo"></a>ChatFullInfo</h4><p>This object contains full information about a chat.</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>Integer</td>
<td>Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty&#x2F;silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.</td>
</tr>
<tr>
<td>type</td>
<td>String</td>
<td>Type of the chat, can be either “private”, “group”, “supergroup” or “channel”</td>
</tr>
<tr>
<td>title</td>
<td>String</td>
<td><em>Optional</em>. Title, for supergroups, channels and group chats</td>
</tr>
<tr>
<td>username</td>
<td>String</td>
<td><em>Optional</em>. Username, for private chats, supergroups and channels if available</td>
</tr>
<tr>
<td>first_name</td>
<td>String</td>
<td><em>Optional</em>. First name of the other party in a private chat</td>
</tr>
<tr>
<td>last_name</td>
<td>String</td>
<td><em>Optional</em>. Last name of the other party in a private chat</td>
</tr>
<tr>
<td>is_forum</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if the supergroup chat is a forum (has <a href="https://telegram.org/blog/topics-in-groups-collectible-usernames#topics-in-groups">topics</a> enabled)</td>
</tr>
<tr>
<td>accent_color_id</td>
<td>Integer</td>
<td>Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See <a href="https://core.telegram.org/bots/api#accent-colors">accent colors</a> for more details.</td>
</tr>
<tr>
<td>max_reaction_count</td>
<td>Integer</td>
<td>The maximum number of reactions that can be set on a message in the chat</td>
</tr>
<tr>
<td>photo</td>
<td><a href="https://core.telegram.org/bots/api#chatphoto">ChatPhoto</a></td>
<td><em>Optional</em>. Chat photo</td>
</tr>
<tr>
<td>active_usernames</td>
<td>Array of String</td>
<td><em>Optional</em>. If non-empty, the list of all <a href="https://telegram.org/blog/topics-in-groups-collectible-usernames#collectible-usernames">active chat usernames</a>; for private chats, supergroups and channels</td>
</tr>
<tr>
<td>birthdate</td>
<td><a href="https://core.telegram.org/bots/api#birthdate">Birthdate</a></td>
<td><em>Optional</em>. For private chats, the date of birth of the user</td>
</tr>
<tr>
<td>business_intro</td>
<td><a href="https://core.telegram.org/bots/api#businessintro">BusinessIntro</a></td>
<td><em>Optional</em>. For private chats with business accounts, the intro of the business</td>
</tr>
<tr>
<td>business_location</td>
<td><a href="https://core.telegram.org/bots/api#businesslocation">BusinessLocation</a></td>
<td><em>Optional</em>. For private chats with business accounts, the location of the business</td>
</tr>
<tr>
<td>business_opening_hours</td>
<td><a href="https://core.telegram.org/bots/api#businessopeninghours">BusinessOpeningHours</a></td>
<td><em>Optional</em>. For private chats with business accounts, the opening hours of the business</td>
</tr>
<tr>
<td>personal_chat</td>
<td><a href="https://core.telegram.org/bots/api#chat">Chat</a></td>
<td><em>Optional</em>. For private chats, the personal channel of the user</td>
</tr>
<tr>
<td>available_reactions</td>
<td>Array of <a href="https://core.telegram.org/bots/api#reactiontype">ReactionType</a></td>
<td><em>Optional</em>. List of available reactions allowed in the chat. If omitted, then all <a href="https://core.telegram.org/bots/api#reactiontypeemoji">emoji reactions</a> are allowed.</td>
</tr>
<tr>
<td>background_custom_emoji_id</td>
<td>String</td>
<td><em>Optional</em>. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background</td>
</tr>
<tr>
<td>profile_accent_color_id</td>
<td>Integer</td>
<td><em>Optional</em>. Identifier of the accent color for the chat’s profile background. See <a href="https://core.telegram.org/bots/api#profile-accent-colors">profile accent colors</a> for more details.</td>
</tr>
<tr>
<td>profile_background_custom_emoji_id</td>
<td>String</td>
<td><em>Optional</em>. Custom emoji identifier of the emoji chosen by the chat for its profile background</td>
</tr>
<tr>
<td>emoji_status_custom_emoji_id</td>
<td>String</td>
<td><em>Optional</em>. Custom emoji identifier of the emoji status of the chat or the other party in a private chat</td>
</tr>
<tr>
<td>emoji_status_expiration_date</td>
<td>Integer</td>
<td><em>Optional</em>. Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any</td>
</tr>
<tr>
<td>bio</td>
<td>String</td>
<td><em>Optional</em>. Bio of the other party in a private chat</td>
</tr>
<tr>
<td>has_private_forwards</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if privacy settings of the other party in the private chat allows to use links only in chats with the user<code>tg://user?id=&lt;user_id&gt;</code></td>
</tr>
<tr>
<td>has_restricted_voice_and_video_messages</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if the privacy settings of the other party restrict sending voice and video note messages in the private chat</td>
</tr>
<tr>
<td>join_to_send_messages</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if users need to join the supergroup before they can send messages</td>
</tr>
<tr>
<td>join_by_request</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if all users directly joining the supergroup without using an invite link need to be approved by supergroup administrators</td>
</tr>
<tr>
<td>description</td>
<td>String</td>
<td><em>Optional</em>. Description, for groups, supergroups and channel chats</td>
</tr>
<tr>
<td>invite_link</td>
<td>String</td>
<td><em>Optional</em>. Primary invite link, for groups, supergroups and channel chats</td>
</tr>
<tr>
<td>pinned_message</td>
<td><a href="https://core.telegram.org/bots/api#message">Message</a></td>
<td><em>Optional</em>. The most recent pinned message (by sending date)</td>
</tr>
<tr>
<td>permissions</td>
<td><a href="https://core.telegram.org/bots/api#chatpermissions">ChatPermissions</a></td>
<td><em>Optional</em>. Default chat member permissions, for groups and supergroups</td>
</tr>
<tr>
<td>can_send_paid_media</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if paid media messages can be sent or forwarded to the channel chat. The field is available only for channel chats.</td>
</tr>
<tr>
<td>slow_mode_delay</td>
<td>Integer</td>
<td><em>Optional</em>. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds</td>
</tr>
<tr>
<td>unrestrict_boost_count</td>
<td>Integer</td>
<td><em>Optional</em>. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions</td>
</tr>
<tr>
<td>message_auto_delete_time</td>
<td>Integer</td>
<td><em>Optional</em>. The time after which all messages sent to the chat will be automatically deleted; in seconds</td>
</tr>
<tr>
<td>has_aggressive_anti_spam_enabled</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators.</td>
</tr>
<tr>
<td>has_hidden_members</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if non-administrators can only get the list of bots and administrators in the chat</td>
</tr>
<tr>
<td>has_protected_content</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if messages from the chat can’t be forwarded to other chats</td>
</tr>
<tr>
<td>has_visible_history</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if new chat members will have access to old messages; available only to chat administrators</td>
</tr>
<tr>
<td>sticker_set_name</td>
<td>String</td>
<td><em>Optional</em>. For supergroups, name of the group sticker set</td>
</tr>
<tr>
<td>can_set_sticker_set</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if the bot can change the group sticker set</td>
</tr>
<tr>
<td>custom_emoji_sticker_set_name</td>
<td>String</td>
<td><em>Optional</em>. For supergroups, the name of the group’s custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group.</td>
</tr>
<tr>
<td>linked_chat_id</td>
<td>Integer</td>
<td><em>Optional</em>. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty&#x2F;silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.</td>
</tr>
<tr>
<td>location</td>
<td><a href="https://core.telegram.org/bots/api#chatlocation">ChatLocation</a></td>
<td><em>Optional</em>. For supergroups, the location to which the supergroup is connected</td>
</tr>
</tbody></table>
<h4 id="Message"><a href="#Message" class="headerlink" title="Message"></a><a href="https://core.telegram.org/bots/api#message"></a>Message</h4><p>This object represents a message.</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>message_id</td>
<td>Integer</td>
<td>Unique message identifier inside this chat. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent</td>
</tr>
<tr>
<td>message_thread_id</td>
<td>Integer</td>
<td><em>Optional</em>. Unique identifier of a message thread to which the message belongs; for supergroups only</td>
</tr>
<tr>
<td>from</td>
<td><a href="https://core.telegram.org/bots/api#user">User</a></td>
<td><em>Optional</em>. Sender of the message; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats</td>
</tr>
<tr>
<td>sender_chat</td>
<td><a href="https://core.telegram.org/bots/api#chat">Chat</a></td>
<td><em>Optional</em>. Sender of the message when sent on behalf of a chat. For example, the supergroup itself for messages sent by its anonymous administrators or a linked channel for messages automatically forwarded to the channel’s discussion group. For backward compatibility, if the message was sent on behalf of a chat, the field <em>from</em> contains a fake sender user in non-channel chats.</td>
</tr>
<tr>
<td>sender_boost_count</td>
<td>Integer</td>
<td><em>Optional</em>. If the sender of the message boosted the chat, the number of boosts added by the user</td>
</tr>
<tr>
<td>sender_business_bot</td>
<td><a href="https://core.telegram.org/bots/api#user">User</a></td>
<td><em>Optional</em>. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account.</td>
</tr>
<tr>
<td>date</td>
<td>Integer</td>
<td>Date the message was sent in Unix time. It is always a positive number, representing a valid date.</td>
</tr>
<tr>
<td>business_connection_id</td>
<td>String</td>
<td><em>Optional</em>. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier.</td>
</tr>
<tr>
<td>chat</td>
<td><a href="https://core.telegram.org/bots/api#chat">Chat</a></td>
<td>Chat the message belongs to</td>
</tr>
<tr>
<td>forward_origin</td>
<td><a href="https://core.telegram.org/bots/api#messageorigin">MessageOrigin</a></td>
<td><em>Optional</em>. Information about the original message for forwarded messages</td>
</tr>
<tr>
<td>is_topic_message</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if the message is sent to a forum topic</td>
</tr>
<tr>
<td>is_automatic_forward</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if the message is a channel post that was automatically forwarded to the connected discussion group</td>
</tr>
<tr>
<td>reply_to_message</td>
<td><a href="https://core.telegram.org/bots/api#message">Message</a></td>
<td><em>Optional</em>. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further <em>reply_to_message</em> fields even if it itself is a reply.</td>
</tr>
<tr>
<td>external_reply</td>
<td><a href="https://core.telegram.org/bots/api#externalreplyinfo">ExternalReplyInfo</a></td>
<td><em>Optional</em>. Information about the message that is being replied to, which may come from another chat or forum topic</td>
</tr>
<tr>
<td>quote</td>
<td><a href="https://core.telegram.org/bots/api#textquote">TextQuote</a></td>
<td><em>Optional</em>. For replies that quote part of the original message, the quoted part of the message</td>
</tr>
<tr>
<td>reply_to_story</td>
<td><a href="https://core.telegram.org/bots/api#story">Story</a></td>
<td><em>Optional</em>. For replies to a story, the original story</td>
</tr>
<tr>
<td>via_bot</td>
<td><a href="https://core.telegram.org/bots/api#user">User</a></td>
<td><em>Optional</em>. Bot through which the message was sent</td>
</tr>
<tr>
<td>edit_date</td>
<td>Integer</td>
<td><em>Optional</em>. Date the message was last edited in Unix time</td>
</tr>
<tr>
<td>has_protected_content</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if the message can’t be forwarded</td>
</tr>
<tr>
<td>is_from_offline</td>
<td>True</td>
<td><em>Optional</em>. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message</td>
</tr>
<tr>
<td>media_group_id</td>
<td>String</td>
<td><em>Optional</em>. The unique identifier of a media message group this message belongs to</td>
</tr>
<tr>
<td>author_signature</td>
<td>String</td>
<td><em>Optional</em>. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator</td>
</tr>
<tr>
<td>text</td>
<td>String</td>
<td><em>Optional</em>. For text messages, the actual UTF-8 text of the message</td>
</tr>
<tr>
<td>entities</td>
<td>Array of <a href="https://core.telegram.org/bots/api#messageentity">MessageEntity</a></td>
<td><em>Optional</em>. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text</td>
</tr>
<tr>
<td>link_preview_options</td>
<td><a href="https://core.telegram.org/bots/api#linkpreviewoptions">LinkPreviewOptions</a></td>
<td><em>Optional</em>. Options used for link preview generation for the message, if it is a text message and link preview options were changed</td>
</tr>
<tr>
<td>effect_id</td>
<td>String</td>
<td><em>Optional</em>. Unique identifier of the message effect added to the message</td>
</tr>
<tr>
<td>animation</td>
<td><a href="https://core.telegram.org/bots/api#animation">Animation</a></td>
<td><em>Optional</em>. Message is an animation, information about the animation. For backward compatibility, when this field is set, the <em>document</em> field will also be set</td>
</tr>
<tr>
<td>audio</td>
<td><a href="https://core.telegram.org/bots/api#audio">Audio</a></td>
<td><em>Optional</em>. Message is an audio file, information about the file</td>
</tr>
<tr>
<td>document</td>
<td><a href="https://core.telegram.org/bots/api#document">Document</a></td>
<td><em>Optional</em>. Message is a general file, information about the file</td>
</tr>
<tr>
<td>paid_media</td>
<td><a href="https://core.telegram.org/bots/api#paidmediainfo">PaidMediaInfo</a></td>
<td><em>Optional</em>. Message contains paid media; information about the paid media</td>
</tr>
<tr>
<td>photo</td>
<td>Array of <a href="https://core.telegram.org/bots/api#photosize">PhotoSize</a></td>
<td><em>Optional</em>. Message is a photo, available sizes of the photo</td>
</tr>
<tr>
<td>sticker</td>
<td><a href="https://core.telegram.org/bots/api#sticker">Sticker</a></td>
<td><em>Optional</em>. Message is a sticker, information about the sticker</td>
</tr>
<tr>
<td>story</td>
<td><a href="https://core.telegram.org/bots/api#story">Story</a></td>
<td><em>Optional</em>. Message is a forwarded story</td>
</tr>
<tr>
<td>video</td>
<td><a href="https://core.telegram.org/bots/api#video">Video</a></td>
<td><em>Optional</em>. Message is a video, information about the video</td>
</tr>
<tr>
<td>video_note</td>
<td><a href="https://core.telegram.org/bots/api#videonote">VideoNote</a></td>
<td><em>Optional</em>. Message is a <a href="https://telegram.org/blog/video-messages-and-telescope">video note</a>, information about the video message</td>
</tr>
<tr>
<td>voice</td>
<td><a href="https://core.telegram.org/bots/api#voice">Voice</a></td>
<td><em>Optional</em>. Message is a voice message, information about the file</td>
</tr>
<tr>
<td>caption</td>
<td>String</td>
<td><em>Optional</em>. Caption for the animation, audio, document, paid media, photo, video or voice</td>
</tr>
<tr>
<td>caption_entities</td>
<td>Array of <a href="https://core.telegram.org/bots/api#messageentity">MessageEntity</a></td>
<td><em>Optional</em>. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption</td>
</tr>
<tr>
<td>show_caption_above_media</td>
<td>True</td>
<td><em>Optional</em>. True, if the caption must be shown above the message media</td>
</tr>
<tr>
<td>has_media_spoiler</td>
<td>True</td>
<td><em>Optional</em>. <em>True</em>, if the message media is covered by a spoiler animation</td>
</tr>
<tr>
<td>contact</td>
<td><a href="https://core.telegram.org/bots/api#contact">Contact</a></td>
<td><em>Optional</em>. Message is a shared contact, information about the contact</td>
</tr>
<tr>
<td>dice</td>
<td><a href="https://core.telegram.org/bots/api#dice">Dice</a></td>
<td><em>Optional</em>. Message is a dice with random value</td>
</tr>
<tr>
<td>game</td>
<td><a href="https://core.telegram.org/bots/api#game">Game</a></td>
<td><em>Optional</em>. Message is a game, information about the game. <a href="https://core.telegram.org/bots/api#games">More about games »</a></td>
</tr>
<tr>
<td>poll</td>
<td><a href="https://core.telegram.org/bots/api#poll">Poll</a></td>
<td><em>Optional</em>. Message is a native poll, information about the poll</td>
</tr>
<tr>
<td>venue</td>
<td><a href="https://core.telegram.org/bots/api#venue">Venue</a></td>
<td><em>Optional</em>. Message is a venue, information about the venue. For backward compatibility, when this field is set, the <em>location</em> field will also be set</td>
</tr>
<tr>
<td>location</td>
<td><a href="https://core.telegram.org/bots/api#location">Location</a></td>
<td><em>Optional</em>. Message is a shared location, information about the location</td>
</tr>
<tr>
<td>new_chat_members</td>
<td>Array of <a href="https://core.telegram.org/bots/api#user">User</a></td>
<td><em>Optional</em>. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)</td>
</tr>
<tr>
<td>left_chat_member</td>
<td><a href="https://core.telegram.org/bots/api#user">User</a></td>
<td><em>Optional</em>. A member was removed from the group, information about them (this member may be the bot itself)</td>
</tr>
<tr>
<td>new_chat_title</td>
<td>String</td>
<td><em>Optional</em>. A chat title was changed to this value</td>
</tr>
<tr>
<td>new_chat_photo</td>
<td>Array of <a href="https://core.telegram.org/bots/api#photosize">PhotoSize</a></td>
<td><em>Optional</em>. A chat photo was change to this value</td>
</tr>
<tr>
<td>delete_chat_photo</td>
<td>True</td>
<td><em>Optional</em>. Service message: the chat photo was deleted</td>
</tr>
<tr>
<td>group_chat_created</td>
<td>True</td>
<td><em>Optional</em>. Service message: the group has been created</td>
</tr>
<tr>
<td>supergroup_chat_created</td>
<td>True</td>
<td><em>Optional</em>. Service message: the supergroup has been created. This field can’t be received in a message coming through updates, because bot can’t be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.</td>
</tr>
<tr>
<td>channel_chat_created</td>
<td>True</td>
<td><em>Optional</em>. Service message: the channel has been created. This field can’t be received in a message coming through updates, because bot can’t be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.</td>
</tr>
<tr>
<td>message_auto_delete_timer_changed</td>
<td><a href="https://core.telegram.org/bots/api#messageautodeletetimerchanged">MessageAutoDeleteTimerChanged</a></td>
<td><em>Optional</em>. Service message: auto-delete timer settings changed in the chat</td>
</tr>
<tr>
<td>migrate_to_chat_id</td>
<td>Integer</td>
<td><em>Optional</em>. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty&#x2F;silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.</td>
</tr>
<tr>
<td>migrate_from_chat_id</td>
<td>Integer</td>
<td><em>Optional</em>. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty&#x2F;silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.</td>
</tr>
<tr>
<td>pinned_message</td>
<td><a href="https://core.telegram.org/bots/api#maybeinaccessiblemessage">MaybeInaccessibleMessage</a></td>
<td><em>Optional</em>. Specified message was pinned. Note that the Message object in this field will not contain further <em>reply_to_message</em> fields even if it itself is a reply.</td>
</tr>
<tr>
<td>invoice</td>
<td><a href="https://core.telegram.org/bots/api#invoice">Invoice</a></td>
<td><em>Optional</em>. Message is an invoice for a <a href="https://core.telegram.org/bots/api#payments">payment</a>, information about the invoice. <a href="https://core.telegram.org/bots/api#payments">More about payments »</a></td>
</tr>
<tr>
<td>successful_payment</td>
<td><a href="https://core.telegram.org/bots/api#successfulpayment">SuccessfulPayment</a></td>
<td><em>Optional</em>. Message is a service message about a successful payment, information about the payment. <a href="https://core.telegram.org/bots/api#payments">More about payments »</a></td>
</tr>
<tr>
<td>refunded_payment</td>
<td><a href="https://core.telegram.org/bots/api#refundedpayment">RefundedPayment</a></td>
<td><em>Optional</em>. Message is a service message about a refunded payment, information about the payment. <a href="https://core.telegram.org/bots/api#payments">More about payments »</a></td>
</tr>
<tr>
<td>users_shared</td>
<td><a href="https://core.telegram.org/bots/api#usersshared">UsersShared</a></td>
<td><em>Optional</em>. Service message: users were shared with the bot</td>
</tr>
<tr>
<td>chat_shared</td>
<td><a href="https://core.telegram.org/bots/api#chatshared">ChatShared</a></td>
<td><em>Optional</em>. Service message: a chat was shared with the bot</td>
</tr>
<tr>
<td>connected_website</td>
<td>String</td>
<td><em>Optional</em>. The domain name of the website on which the user has logged in. <a href="https://core.telegram.org/widgets/login">More about Telegram Login »</a></td>
</tr>
<tr>
<td>write_access_allowed</td>
<td><a href="https://core.telegram.org/bots/api#writeaccessallowed">WriteAccessAllowed</a></td>
<td><em>Optional</em>. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">requestWriteAccess</a></td>
</tr>
<tr>
<td>passport_data</td>
<td><a href="https://core.telegram.org/bots/api#passportdata">PassportData</a></td>
<td><em>Optional</em>. Telegram Passport data</td>
</tr>
<tr>
<td>proximity_alert_triggered</td>
<td><a href="https://core.telegram.org/bots/api#proximityalerttriggered">ProximityAlertTriggered</a></td>
<td><em>Optional</em>. Service message. A user in the chat triggered another user’s proximity alert while sharing Live Location.</td>
</tr>
<tr>
<td>boost_added</td>
<td><a href="https://core.telegram.org/bots/api#chatboostadded">ChatBoostAdded</a></td>
<td><em>Optional</em>. Service message: user boosted the chat</td>
</tr>
<tr>
<td>chat_background_set</td>
<td><a href="https://core.telegram.org/bots/api#chatbackground">ChatBackground</a></td>
<td><em>Optional</em>. Service message: chat background set</td>
</tr>
<tr>
<td>forum_topic_created</td>
<td><a href="https://core.telegram.org/bots/api#forumtopiccreated">ForumTopicCreated</a></td>
<td><em>Optional</em>. Service message: forum topic created</td>
</tr>
<tr>
<td>forum_topic_edited</td>
<td><a href="https://core.telegram.org/bots/api#forumtopicedited">ForumTopicEdited</a></td>
<td><em>Optional</em>. Service message: forum topic edited</td>
</tr>
<tr>
<td>forum_topic_closed</td>
<td><a href="https://core.telegram.org/bots/api#forumtopicclosed">ForumTopicClosed</a></td>
<td><em>Optional</em>. Service message: forum topic closed</td>
</tr>
<tr>
<td>forum_topic_reopened</td>
<td><a href="https://core.telegram.org/bots/api#forumtopicreopened">ForumTopicReopened</a></td>
<td><em>Optional</em>. Service message: forum topic reopened</td>
</tr>
<tr>
<td>general_forum_topic_hidden</td>
<td><a href="https://core.telegram.org/bots/api#generalforumtopichidden">GeneralForumTopicHidden</a></td>
<td><em>Optional</em>. Service message: the ‘General’ forum topic hidden</td>
</tr>
<tr>
<td>general_forum_topic_unhidden</td>
<td><a href="https://core.telegram.org/bots/api#generalforumtopicunhidden">GeneralForumTopicUnhidden</a></td>
<td><em>Optional</em>. Service message: the ‘General’ forum topic unhidden</td>
</tr>
<tr>
<td>giveaway_created</td>
<td><a href="https://core.telegram.org/bots/api#giveawaycreated">GiveawayCreated</a></td>
<td><em>Optional</em>. Service message: a scheduled giveaway was created</td>
</tr>
<tr>
<td>giveaway</td>
<td><a href="https://core.telegram.org/bots/api#giveaway">Giveaway</a></td>
<td><em>Optional</em>. The message is a scheduled giveaway message</td>
</tr>
<tr>
<td>giveaway_winners</td>
<td><a href="https://core.telegram.org/bots/api#giveawaywinners">GiveawayWinners</a></td>
<td><em>Optional</em>. A giveaway with public winners was completed</td>
</tr>
<tr>
<td>giveaway_completed</td>
<td><a href="https://core.telegram.org/bots/api#giveawaycompleted">GiveawayCompleted</a></td>
<td><em>Optional</em>. Service message: a giveaway without public winners was completed</td>
</tr>
<tr>
<td>video_chat_scheduled</td>
<td><a href="https://core.telegram.org/bots/api#videochatscheduled">VideoChatScheduled</a></td>
<td><em>Optional</em>. Service message: video chat scheduled</td>
</tr>
<tr>
<td>video_chat_started</td>
<td><a href="https://core.telegram.org/bots/api#videochatstarted">VideoChatStarted</a></td>
<td><em>Optional</em>. Service message: video chat started</td>
</tr>
<tr>
<td>video_chat_ended</td>
<td><a href="https://core.telegram.org/bots/api#videochatended">VideoChatEnded</a></td>
<td><em>Optional</em>. Service message: video chat ended</td>
</tr>
<tr>
<td>video_chat_participants_invited</td>
<td><a href="https://core.telegram.org/bots/api#videochatparticipantsinvited">VideoChatParticipantsInvited</a></td>
<td><em>Optional</em>. Service message: new participants invited to a video chat</td>
</tr>
<tr>
<td>web_app_data</td>
<td><a href="https://core.telegram.org/bots/api#webappdata">WebAppData</a></td>
<td><em>Optional</em>. Service message: data sent by a Web App</td>
</tr>
<tr>
<td>reply_markup</td>
<td><a href="https://core.telegram.org/bots/api#inlinekeyboardmarkup">InlineKeyboardMarkup</a></td>
<td><em>Optional</em>. Inline keyboard attached to the message. buttons are represented as ordinary buttons.<code>login_url``url</code></td>
</tr>
</tbody></table>
<h4 id="MessageId"><a href="#MessageId" class="headerlink" title="MessageId"></a><a href="https://core.telegram.org/bots/api#messageid"></a>MessageId</h4><p>This object represents a unique message identifier.</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>message_id</td>
<td>Integer</td>
<td>Unique message identifier. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent</td>
</tr>
</tbody></table>
<h4 id="InaccessibleMessage"><a href="#InaccessibleMessage" class="headerlink" title="InaccessibleMessage"></a><a href="https://core.telegram.org/bots/api#inaccessiblemessage"></a>InaccessibleMessage</h4><p>This object describes a message that was deleted or is otherwise inaccessible to the bot.</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>chat</td>
<td><a href="https://core.telegram.org/bots/api#chat">Chat</a></td>
<td>Chat the message belonged to</td>
</tr>
<tr>
<td>message_id</td>
<td>Integer</td>
<td>Unique message identifier inside the chat</td>
</tr>
<tr>
<td>date</td>
<td>Integer</td>
<td>Always 0. The field can be used to differentiate regular and inaccessible messages.</td>
</tr>
</tbody></table>
<h4 id="MaybeInaccessibleMessage"><a href="#MaybeInaccessibleMessage" class="headerlink" title="MaybeInaccessibleMessage"></a><a href="https://core.telegram.org/bots/api#maybeinaccessiblemessage"></a>MaybeInaccessibleMessage</h4><p>This object describes a message that can be inaccessible to the bot. It can be one of</p>
<ul>
<li><p><a href="https://core.telegram.org/bots/api#message">Message</a></p>
</li>
<li><p><a href="https://core.telegram.org/bots/api#inaccessiblemessage">InaccessibleMessage</a></p>
</li>
</ul>
<h4 id="MessageEntity"><a href="#MessageEntity" class="headerlink" title="MessageEntity"></a><a href="https://core.telegram.org/bots/api#messageentity"></a>MessageEntity</h4><p>This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>String</td>
<td>Type of the entity. Currently, can be “mention” (), “hashtag” ( or ), “cashtag” ( or ), “bot_command” (), “url” (), “email” (), “phone_number” (), “bold” (<strong>bold text</strong>), “italic” (<em>italic text</em>), “underline” (underlined text), “strikethrough” (strikethrough text), “spoiler” (spoiler message), “blockquote” (block quotation), “expandable_blockquote” (collapsed-by-default block quotation), “code” (monowidth string), “pre” (monowidth block), “text_link” (for clickable text URLs), “text_mention” (for users <a href="https://telegram.org/blog/edit#new-mentions">without usernames</a>), “custom_emoji” (for inline custom emoji stickers)<code>@username``#hashtag``#hashtag@chatusername``$USD``$USD@chatusername``/start@jobs_bot``https://telegram.org``do-not-reply@telegram.org``+1-212-555-0123</code></td>
</tr>
<tr>
<td>offset</td>
<td>Integer</td>
<td>Offset in <a href="https://core.telegram.org/api/entities#entity-length">UTF-16 code units</a> to the start of the entity</td>
</tr>
<tr>
<td>length</td>
<td>Integer</td>
<td>Length of the entity in <a href="https://core.telegram.org/api/entities#entity-length">UTF-16 code units</a></td>
</tr>
<tr>
<td>url</td>
<td>String</td>
<td><em>Optional</em>. For “text_link” only, URL that will be opened after user taps on the text</td>
</tr>
<tr>
<td>user</td>
<td><a href="https://core.telegram.org/bots/api#user">User</a></td>
<td><em>Optional</em>. For “text_mention” only, the mentioned user</td>
</tr>
<tr>
<td>language</td>
<td>String</td>
<td><em>Optional</em>. For “pre” only, the programming language of the entity text</td>
</tr>
<tr>
<td>custom_emoji_id</td>
<td>String</td>
<td><em>Optional</em>. For “custom_emoji” only, unique identifier of the custom emoji. Use <a href="https://core.telegram.org/bots/api#getcustomemojistickers">getCustomEmojiStickers</a> to get full information about the sticker</td>
</tr>
</tbody></table>
<h4 id="sendMessage"><a href="#sendMessage" class="headerlink" title="sendMessage"></a>sendMessage</h4><p>Use this method to send text messages. On success, the sent <a href="https://core.telegram.org/bots/api#message">Message</a> is returned.</p>
<p>使用此方法发送短信。如果成功，则返回发送的Message。</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>business_connection_id</td>
<td>String</td>
<td>Optional</td>
<td>Unique identifier of the business connection on behalf of which the message will be sent</td>
</tr>
<tr>
<td>将代表其发送消息的业务连接的唯一标识符</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>chat_id</td>
<td>Integer or String</td>
<td>Yes</td>
<td>Unique identifier for the target chat or username of the target channel (in the format <code>@channelusername</code>)</td>
</tr>
<tr>
<td>目标聊天或目标通道的用户名的唯一标识符（格式为@channelusername）</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>message_thread_id</td>
<td>Integer</td>
<td>Optional</td>
<td>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</td>
</tr>
<tr>
<td>论坛的目标消息线程（主题）的唯一标识符；仅适用于论坛超级组</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>text</td>
<td>String</td>
<td>Yes</td>
<td>Text of the message to be sent, 1-4096 characters after entities parsing</td>
</tr>
<tr>
<td>要发送的消息文本，经过实体解析后的1-4096个字符</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>parse_mode</td>
<td>String</td>
<td>Optional</td>
<td>Mode for parsing entities in the message text. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</td>
</tr>
<tr>
<td>用于解析消息文本中的实体的模式。有关详细信息，请参阅格式化选项</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>entities</td>
<td>Array of <a href="https://core.telegram.org/bots/api#messageentity">MessageEntity</a></td>
<td>Optional</td>
<td>A JSON-serialized list of special entities that appear in message text, which can be specified instead of <em>parse_mode</em></td>
</tr>
<tr>
<td>出现在消息文本中的特殊实体的json序列化列表，可以指定而不是解析_模式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>link_preview_options</td>
<td><a href="https://core.telegram.org/bots/api#linkpreviewoptions">LinkPreviewOptions</a></td>
<td>Optional</td>
<td>Link preview generation options for the message</td>
</tr>
<tr>
<td>消息的链接预览生成选项</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>disable_notification</td>
<td>Boolean</td>
<td>Optional</td>
<td>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</td>
</tr>
<tr>
<td>以静默方式发送消息。用户将会收到一个没有声音的通知。</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>protect_content</td>
<td>Boolean</td>
<td>Optional</td>
<td>Protects the contents of the sent message from forwarding and saving</td>
</tr>
<tr>
<td>保护已发送邮件的内容不被转发和保存</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>allow_paid_broadcast</td>
<td>Boolean</td>
<td>Optional</td>
<td>Pass <em>True</em> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot’s balance</td>
</tr>
<tr>
<td>设置为True允许每秒发送1000条消息，忽略广播限制，每条消息收费0.1 Telegram Stars。相关的Stars将从bot的余额中扣除</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>message_effect_id</td>
<td>String</td>
<td>Optional</td>
<td>Unique identifier of the message effect to be added to the message; for private chats only</td>
</tr>
<tr>
<td>要添加到消息中的消息效果的唯一标识符；仅限私人聊天</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>reply_parameters</td>
<td><a href="https://core.telegram.org/bots/api#replyparameters">ReplyParameters</a></td>
<td>Optional</td>
<td>Description of the message to reply to</td>
</tr>
<tr>
<td>要回复的消息的描述</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>reply_markup</td>
<td><a href="https://core.telegram.org/bots/api#inlinekeyboardmarkup">InlineKeyboardMarkup</a> or <a href="https://core.telegram.org/bots/api#replykeyboardmarkup">ReplyKeyboardMarkup</a> or <a href="https://core.telegram.org/bots/api#replykeyboardremove">ReplyKeyboardRemove</a> or <a href="https://core.telegram.org/bots/api#forcereply">ForceReply</a></td>
<td>Optional</td>
<td>Additional interface options. A JSON-serialized object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</td>
</tr>
<tr>
<td>附加接口选项。一个json序列化的对象，用于内联键盘、自定义回复键盘、删除回复键盘或强制用户回复的指令</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="html实体消息发送"><a href="#html实体消息发送" class="headerlink" title="html实体消息发送"></a>html实体消息发送</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;bold&lt;/b&gt;, &lt;strong&gt;bold&lt;/strong&gt;</span><br><span class="line">&lt;i&gt;italic&lt;/i&gt;, &lt;em&gt;italic&lt;/em&gt;</span><br><span class="line">&lt;u&gt;underline&lt;/u&gt;, &lt;ins&gt;underline&lt;/ins&gt;</span><br><span class="line">&lt;s&gt;strikethrough&lt;/s&gt;, &lt;strike&gt;strikethrough&lt;/strike&gt;, &lt;del&gt;strikethrough&lt;/del&gt;</span><br><span class="line">&lt;span class=&quot;tg-spoiler&quot;&gt;spoiler&lt;/span&gt;, &lt;tg-spoiler&gt;spoiler&lt;/tg-spoiler&gt;</span><br><span class="line">&lt;b&gt;bold &lt;i&gt;italic bold &lt;s&gt;italic bold strikethrough &lt;span class=&quot;tg-spoiler&quot;&gt;italic bold strikethrough spoiler&lt;/span&gt;&lt;/s&gt; &lt;u&gt;underline italic bold&lt;/u&gt;&lt;/i&gt; bold&lt;/b&gt;</span><br><span class="line">&lt;a href=&quot;http://www.example.com/&quot;&gt;inline URL&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;tg://user?id=123456789&quot;&gt;inline mention of a user&lt;/a&gt;</span><br><span class="line">&lt;tg-emoji emoji-id=&quot;5368324170671202286&quot;&gt;👍&lt;/tg-emoji&gt;</span><br><span class="line">&lt;code&gt;inline fixed-width code&lt;/code&gt;</span><br><span class="line">&lt;pre&gt;pre-formatted fixed-width code block&lt;/pre&gt;</span><br><span class="line">&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;pre-formatted fixed-width code block written in the Python programming language&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line">&lt;blockquote&gt;Block quotation started\nBlock quotation continued\nThe last line of the block quotation&lt;/blockquote&gt;</span><br><span class="line">&lt;blockquote expandable&gt;Expandable block quotation started\nExpandable block quotation continued\nExpandable block quotation continued\nHidden by default part of the block quotation started\nExpandable block quotation continued\nThe last line of the block quotation&lt;/blockquote&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a><a href="https://core.telegram.org/bots/api#formatting-options"></a></h4><p><strong>bold</strong>, <strong>bold</strong> <em>italic</em>, <em>italic</em> underline, underline strikethrough, strikethrough, strikethrough spoiler, spoiler <strong>bold <em>italic bold italic bold strikethrough italic bold strikethrough spoiler underline italic bold</em> bold</strong> <a href="http://www.example.com/">inline URL</a> <a href="tg://user?id=123456789">inline mention of a user</a> ?? <code>inline fixed-width code</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pre-formatted fixed-width code block</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pre-formatted fixed-width code block written <span class="keyword">in</span> the Python programming language</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Block quotation started\nBlock quotation continued\nThe last line of the block quotation</p>
</blockquote>
<blockquote>
<p>Expandable block quotation started\nExpandable block quotation continued\nExpandable block quotation continued\nHidden by default part of the block quotation started\nExpandable block quotation continued\nThe last line of the block quotation</p>
</blockquote>
<p>Formatting options</p>
<p>The Bot API supports basic formatting for messages. You can use bold, italic, underlined, strikethrough, spoiler text, block quotations as well as inline links and pre-formatted code in your bots’ messages. Telegram clients will render them accordingly. You can specify text entities directly, or use markdown-style or HTML-style formatting.</p>
<p>Note that Telegram clients will display an <strong>alert</strong> to the user before opening an inline link (‘Open this link?’ together with the full URL).</p>
<p>Message entities can be nested, providing following restrictions are met:<br>- If two entities have common characters, then one of them is fully contained inside another.<br>- <em>bold</em>, <em>italic</em>, <em>underline</em>, <em>strikethrough</em>, and <em>spoiler</em> entities can contain and can be part of any other entities, except <em>pre</em> and <em>code</em>.<br>- <em>blockquote</em> and <em>expandable_blockquote</em> entities can’t be nested.<br>- All other entities can’t contain each other.</p>
<p>Links can be used to mention a user by their identifier without using a username. Please note:<code>tg://user?id=&lt;user_id&gt;</code></p>
<ul>
<li><p>These links will work <strong>only</strong> if they are used inside an inline link or in an inline keyboard button. For example, they will not work, when used in a message text.</p>
</li>
<li><p>Unless the user is a member of the chat where they were mentioned, these mentions are only guaranteed to work if the user has contacted the bot in private in the past or has sent a callback query to the bot via an inline button and doesn’t have Forwarded Messages privacy enabled for the bot.</p>
</li>
</ul>
<p>You can find the list of programming and markup languages for which syntax highlighting is supported at <a href="https://github.com/TelegramMessenger/libprisma#supported-languages">libprisma#supported-languages</a>.</p>
<h6 id="MarkdownV2-style"><a href="#MarkdownV2-style" class="headerlink" title="MarkdownV2 style"></a><a href="https://core.telegram.org/bots/api#markdownv2-style"></a>MarkdownV2 style</h6><p>To use this mode, pass <em>MarkdownV2</em> in the <em>parse_mode</em> field. Use the following syntax in your message:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*bold \*text*</span><br><span class="line">_italic \*text_</span><br><span class="line">__underline__</span><br><span class="line">~strikethrough~</span><br><span class="line">||spoiler||</span><br><span class="line">*bold _italic bold ~italic bold strikethrough ||italic bold strikethrough spoiler||~ __underline italic bold___ bold*</span><br><span class="line">[inline URL](http://www.example.com/)</span><br><span class="line">[inline mention of a user](tg://user?id=123456789)</span><br><span class="line">![](tg://emoji?id=5368324170671202286)</span><br><span class="line">`inline fixed-width code`</span><br><span class="line">```</span><br><span class="line">pre-formatted fixed-width code block</span><br><span class="line">```</span><br><span class="line">```python</span><br><span class="line">pre-formatted fixed-width code block written in the Python programming language</span><br><span class="line">```</span><br><span class="line">&gt;Block quotation started</span><br><span class="line">&gt;Block quotation continued</span><br><span class="line">&gt;Block quotation continued</span><br><span class="line">&gt;Block quotation continued</span><br><span class="line">&gt;The last line of the block quotation</span><br><span class="line">**&gt;The expandable block quotation started right after the previous block quotation</span><br><span class="line">&gt;It is separated from the previous block quotation by an empty bold entity</span><br><span class="line">&gt;Expandable block quotation continued</span><br><span class="line">&gt;Hidden by default part of the expandable block quotation started</span><br><span class="line">&gt;Expandable block quotation continued</span><br><span class="line">&gt;The last line of the expandable block quotation with the expandability mark||</span><br></pre></td></tr></table></figure>

<p>Please note:</p>
<ul>
<li><p>Any character with code between 1 and 126 inclusively can be escaped anywhere with a preceding ‘\‘ character, in which case it is treated as an ordinary character and not a part of the markup. This implies that ‘\‘ character usually must be escaped with a preceding ‘\‘ character.</p>
</li>
<li><p>Inside and entities, all ‘`‘ and ‘\‘ characters must be escaped with a preceding ‘\‘ character.<code>pre``code</code></p>
</li>
<li><p>Inside the part of the inline link and custom emoji definition, all ‘)’ and ‘\‘ must be escaped with a preceding ‘\‘ character.<code>(...)</code></p>
</li>
<li><p>In all other places characters ‘_‘, ‘*‘, ‘[‘, ‘]‘, ‘(‘, ‘)’, ‘~’, ‘`‘, ‘&gt;’, ‘#’, ‘+’, ‘-‘, ‘&#x3D;’, ‘|’, ‘{‘, ‘}’, ‘.’, ‘!’ must be escaped with the preceding character ‘\‘.</p>
</li>
<li><p>In case of ambiguity between and entities is always greadily treated from left to right as beginning or end of an entity, so instead of use , adding an empty bold entity as a separator.<code>italic``underline``__``underline``___italic underline___``___italic underline_**__</code></p>
</li>
<li><p>A valid emoji must be provided as an alternative value for the custom emoji. The emoji will be shown instead of the custom emoji in places where a custom emoji cannot be displayed (e.g., system notifications) or if the message is forwarded by a non-premium user. It is recommended to use the emoji from the <strong>emoji</strong> field of the custom emoji <a href="https://core.telegram.org/bots/api#sticker">sticker</a>.</p>
</li>
<li><p>Custom emoji entities can only be used by bots that purchased additional usernames on <a href="https://fragment.com/">Fragment</a>.</p>
</li>
</ul>
<h6 id="HTML-style"><a href="#HTML-style" class="headerlink" title="HTML style"></a><a href="https://core.telegram.org/bots/api#html-style"></a>HTML style</h6><p>To use this mode, pass <em>HTML</em> in the <em>parse_mode</em> field. The following tags are currently supported:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;bold&lt;/b&gt;, &lt;strong&gt;bold&lt;/strong&gt;</span><br><span class="line">&lt;i&gt;italic&lt;/i&gt;, &lt;em&gt;italic&lt;/em&gt;</span><br><span class="line">&lt;u&gt;underline&lt;/u&gt;, &lt;ins&gt;underline&lt;/ins&gt;</span><br><span class="line">&lt;s&gt;strikethrough&lt;/s&gt;, &lt;strike&gt;strikethrough&lt;/strike&gt;, &lt;del&gt;strikethrough&lt;/del&gt;</span><br><span class="line">&lt;span class=&quot;tg-spoiler&quot;&gt;spoiler&lt;/span&gt;, &lt;tg-spoiler&gt;spoiler&lt;/tg-spoiler&gt;</span><br><span class="line">&lt;b&gt;bold &lt;i&gt;italic bold &lt;s&gt;italic bold strikethrough &lt;span class=&quot;tg-spoiler&quot;&gt;italic bold strikethrough spoiler&lt;/span&gt;&lt;/s&gt; &lt;u&gt;underline italic bold&lt;/u&gt;&lt;/i&gt; bold&lt;/b&gt;</span><br><span class="line">&lt;a href=&quot;http://www.example.com/&quot;&gt;inline URL&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;tg://user?id=123456789&quot;&gt;inline mention of a user&lt;/a&gt;</span><br><span class="line">&lt;tg-emoji emoji-id=&quot;5368324170671202286&quot;&gt;&lt;/tg-emoji&gt;</span><br><span class="line">&lt;code&gt;inline fixed-width code&lt;/code&gt;</span><br><span class="line">&lt;pre&gt;pre-formatted fixed-width code block&lt;/pre&gt;</span><br><span class="line">&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;pre-formatted fixed-width code block written in the Python programming language&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line">&lt;blockquote&gt;Block quotation started\nBlock quotation continued\nThe last line of the block quotation&lt;/blockquote&gt;</span><br><span class="line">&lt;blockquote expandable&gt;Expandable block quotation started\nExpandable block quotation continued\nExpandable block quotation continued\nHidden by default part of the block quotation started\nExpandable block quotation continued\nThe last line of the block quotation&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>

<p>Please note:</p>
<ul>
<li><p>Only the tags mentioned above are currently supported.</p>
</li>
<li><p>All , and symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities ( with , with and with ).<code>&lt;``&gt;``&amp;``&lt;``&amp;lt;``&gt;``&amp;gt;``&amp;``&amp;amp;</code></p>
</li>
<li><p>All numerical HTML entities are supported.</p>
</li>
<li><p>The API currently supports only the following named HTML entities: , , and .<code>&amp;lt;``&amp;gt;``&amp;amp;``&amp;quot;</code></p>
</li>
<li><p>Use nested and tags, to define programming language for entity.<code>pre``code``pre</code></p>
</li>
<li><p>Programming language can’t be specified for standalone tags.<code>code</code></p>
</li>
<li><p>A valid emoji must be used as the content of the tag. The emoji will be shown instead of the custom emoji in places where a custom emoji cannot be displayed (e.g., system notifications) or if the message is forwarded by a non-premium user. It is recommended to use the emoji from the <strong>emoji</strong> field of the custom emoji <a href="https://core.telegram.org/bots/api#sticker">sticker</a>.<code>tg-emoji</code></p>
</li>
<li><p>Custom emoji entities can only be used by bots that purchased additional usernames on <a href="https://fragment.com/">Fragment</a>.</p>
</li>
</ul>
<h6 id="Markdown-style"><a href="#Markdown-style" class="headerlink" title="Markdown style"></a><a href="https://core.telegram.org/bots/api#markdown-style"></a>Markdown style</h6><p>This is a legacy mode, retained for backward compatibility. To use this mode, pass <em>Markdown</em> in the <em>parse_mode</em> field. Use the following syntax in your message:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*bold text*</span><br><span class="line">_italic text_</span><br><span class="line">[inline URL](http://www.example.com/)</span><br><span class="line">[inline mention of a user](tg://user?id=123456789)</span><br><span class="line">`inline fixed-width code`</span><br><span class="line">```</span><br><span class="line">pre-formatted fixed-width code block</span><br><span class="line">```</span><br><span class="line">```python</span><br><span class="line">pre-formatted fixed-width code block written in the Python programming language</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>Please note:</p>
<ul>
<li><p>Entities must not be nested, use parse mode <a href="https://core.telegram.org/bots/api#markdownv2-style">MarkdownV2</a> instead.</p>
</li>
<li><p>There is no way to specify “underline”, “strikethrough”, “spoiler”, “blockquote”, “expandable_blockquote” and “custom_emoji” entities, use parse mode <a href="https://core.telegram.org/bots/api#markdownv2-style">MarkdownV2</a> instead.</p>
</li>
<li><p>To escape characters ‘_‘, ‘*‘, ‘`‘, ‘[‘ outside of an entity, prepend the characters ‘\‘ before them.</p>
</li>
<li><p>Escaping inside entities is not allowed, so entity must be closed first and reopened again: use for italic and for bold .<code>_snake_\__case_``snake_case``*2*\**2=4*``2*2=4</code></p>
</li>
</ul>
<h4 id="Paid-Broadcasts"><a href="#Paid-Broadcasts" class="headerlink" title="Paid Broadcasts"></a><a href="https://core.telegram.org/bots/api#paid-broadcasts"></a>Paid Broadcasts</h4><p>By default, all bots are able to broadcast up to <a href="https://core.telegram.org/bots/faq#my-bot-is-hitting-limits-how-do-i-avoid-this">30 messages</a> per second to their users. Developers can increase this limit by enabling <em>Paid Broadcasts</em> in <a href="https://t.me/botfather">@Botfather</a> - allowing their bot to broadcast <strong>up to 1000 messages</strong> per second.</p>
<p>Each message broadcasted over the free amount of 30 messages per second incurs a cost of 0.1 Stars per message, paid with Telegram Stars from the bot’s balance. In order to use this feature, a bot must have at least <em>10,000 Stars</em> on its balance.</p>
<p>Bots with increased limits are only charged for messages that are broadcasted successfully.</p>
<p><a href="https://core.telegram.org/bots/api#november-17-2024">Telegram Bot API</a></p>
]]></content>
      <categories>
        <category>wenzhang</category>
      </categories>
  </entry>
</search>
